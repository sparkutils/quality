{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quality - 0.0.1-SNAPSHOT \u00b6 Coverage Statement 86.30 Branch 76.04 Run complex data quality rules using simple SQL in a batch or streaming Spark application at scale. \u00b6 Write rules using simple SQL or create re-usable functions via SQL Lambdas Your rules are just versioned data, store them wherever convenient, use them by simply defining a column. - Simplified aggExpr - control the types once and handles decimal precision issues - Higher Order Functions - pass lambdas to lambdas, partially apply them, return them and use them in Spark sql functions Rules are evaluated lazily during Spark actions, such as writing a row, with results saved in a single predicatable and extensible column. Enhanced Spark Functionality \u00b6 Lookup Functions are distributed across the Spark cluster and held in memory, as such no shuffling is required where the shuffling introduced by joins may be too expensive: Support for massive Bloom Filters while retaining FPP (i.e. several billion items at 0.001 would not fit into a normal 2gb byte array) Map lookup expressions for exact lookups and contains tests, using broadcast variables under the hood they are a great fit for small reference data sets Lambda Functions - user provided re-usable sql functions over late binded columns Fast PRNG's exposing RandomSource allowing plugable and stable generation across the cluster Aggregate functions over Maps expandable with simple SQL Lambdas Row ID expressions including guaranteed unique row IDs (based on MAC address guarantees) Plus a collection of handy functions to integrate it all.","title":"Home"},{"location":"#quality-001-snapshot","text":"Coverage Statement 86.30 Branch 76.04","title":"Quality - 0.0.1-SNAPSHOT"},{"location":"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale","text":"Write rules using simple SQL or create re-usable functions via SQL Lambdas Your rules are just versioned data, store them wherever convenient, use them by simply defining a column. - Simplified aggExpr - control the types once and handles decimal precision issues - Higher Order Functions - pass lambdas to lambdas, partially apply them, return them and use them in Spark sql functions Rules are evaluated lazily during Spark actions, such as writing a row, with results saved in a single predicatable and extensible column.","title":"Run complex data quality rules using simple SQL in a batch or streaming Spark application at scale."},{"location":"#enhanced-spark-functionality","text":"Lookup Functions are distributed across the Spark cluster and held in memory, as such no shuffling is required where the shuffling introduced by joins may be too expensive: Support for massive Bloom Filters while retaining FPP (i.e. several billion items at 0.001 would not fit into a normal 2gb byte array) Map lookup expressions for exact lookups and contains tests, using broadcast variables under the hood they are a great fit for small reference data sets Lambda Functions - user provided re-usable sql functions over late binded columns Fast PRNG's exposing RandomSource allowing plugable and stable generation across the cluster Aggregate functions over Maps expandable with simple SQL Lambdas Row ID expressions including guaranteed unique row IDs (based on MAC address guarantees) Plus a collection of handy functions to integrate it all.","title":"Enhanced Spark Functionality"},{"location":"sqlfunctions/","text":"_ \u00b6 _( [ddl type], [nullable] ) provides PlaceHolders for lambda functions to allow partial application, use them in place of actual values or expressions to either change arity or allow use in _lambda_. The default type is Long / Bigint, you will have to provide the types directly when using something else. By default the placeholders are assumed to be nullable (i.e. true), you can use false to state the field should not be null. _lambda_ \u00b6 _lambda_( user function ) extracts the Spark LambdaFunction from a resolved user function, this must have the correct types expected by the Spark HigherOrderFunction they are parameters for. This allows using user defined functions and lambdas with in-built Spark HigherOrderFunctions aggExpr \u00b6 aggExpr( [ddl sum type], filter, sum, result) aggregates on rows which match the filter expression using the sum expression to aggregate then processes the results using the result expression. You can run multiple aggExpr's in a single pass select, use the first parameter to thread DDL type information through to the sum and result functions. bigBloom \u00b6 bigBloom(buildFrom, expectedSize, expectedFPP, 'bloom_id') creates an aggregated bloom filter using the buildFrom expression. The blooms are stored on a shared filesystem using the bloom_id, they can scale to high numbers of items whilst keeping the FPP (e.g. millions at 0.01 would imply 99% probability, you may have to cast to double in Spark 3.2). buildFrom can be driven by digestToLongs or hashWith functions when using multiple fields. callFun \u00b6 callFun( user function lambda variable, param1, param2, \u2026 paramN ) used within a lambda function it allows calling a lambda variable that contains a user function. Used from the top level sql it performs a similar function expecting either a full user function or a partially applied function, typically returned from another lambda user function. coalesceIfAttributesMissing \u00b6 coalesceIfAttributesMissing(expr, replaceWith) substitutes expr with the replaceWith expression when expr has missing attributes in the source dataframe. Your code must call the scala processIfAttributeMissing function before using in validate or ruleEngineRunner/ruleRunner: val missingAttributesAreReplacedRS = processIfAttributeMissing ( rs , struct ) val ( errors , _ ) = validate ( struct , missingAttributesAreReplacedRS ) // use it missingAttributesAreReplacedRS in your dataframe.. coalesceIfAttributesMissingDisable \u00b6 coalesceIfAttributesMissingDisable(expr) substitutes expr with the DisabledRule Integer result (-2) when expr has missing attributes in the source dataframe. Your code must call the scala processIfAttributeMissing function before using in validate or ruleEngineRunner/ruleRunner: val missingAttributesAreReplacedRS = processIfAttributeMissing ( rs , struct ) val ( errors , _ ) = validate ( struct , missingAttributesAreReplacedRS ) // use it missingAttributesAreReplacedRS in your dataframe.. digestToLongs \u00b6 digestToLongs('digestImpl', fields*) creates an array of longs based on creating the given MessageDigest impl. A 128-bit impl will generate two longs from it's digest digestToLongsStruct \u00b6 digestToLongsStruct('digestImpl', fields*) creates structure of longs with i0 to iN named fields based on creating the given MessageDigest impl. disabledRule \u00b6 disabledRule() returns the DisabledRule Integer result (-2) for use in filtering and to disable rules (which may not signify a version bump) failed \u00b6 failed() returns the Failed Integer result (0) for use in filtering fieldBasedID \u00b6 fieldBasedID('prefix', 'digestImpl', fields*) creates a variable bit length id by using a given MessageDigest impl over the fields, prefix is used with the _base, _i0 and _iN fields in the resulting structure flattenResults \u00b6 flattenResults(dataQualityExpr) expands data quality results into a flat array flattenRuleResults \u00b6 flattenRuleResults(dataQualityExpr) expands data quality results into a structure of flattenedResults, salientRule (the one used to create the output) and the rule result. salientRule will be null if there was no matching rule hashFieldBasedID \u00b6 hashFieldBasedID('prefix', 'digestImpl', fields*) creates a variable bit length id by using a given Guava Hasher impl over the fields, prefix is used with the _base, _i0 and _iN fields in the resulting structure hashWith \u00b6 hashWith('HASH', fields*) Generates a hash value (array of longs) suitable for using in blooms based on the given Guava hash implementation. Note based on testing the digestToLongs function for SHA256 and MD5 are faster. Valid hashes: MURMUR3_32, MURMUR3_128, MD5, SHA-1, SHA-256, SHA-512, ADLER32, CRC32, SIPHASH24. When an invalid HASH name is provided MURMUR3_128 will be chosen. Open source Spark 3.1.2 issues On Spark 3.1.2 open source this may get resolver errors due to a downgrade on guava version - 15.0 is used on Databricks, open source 3.0.3 uses 16.0.1, 3.1.2 drops this to 11 and misses crc32, sipHash24 and adler32. hashWithStruct \u00b6 per hashWith('HASH', fields*) but generates a struct with i0 to ix named longs. This structure is not suitable for blooms idEqual \u00b6 idEqual(leftPrefix, rightPrefix) takes two prefixes which will be used to match leftPrefix_base = rightPrefix_base, i0 and i1 fields. It does not currently support more than two i's inc \u00b6 inc() increments the current sum by 1 Alternatives: inc( x ) use an expression of type Long to increment longPair \u00b6 longPair(lower, higher) creates a structure with these lower and higher longs longPairEqual \u00b6 longPairEqual(leftPrefix, rightPrefix) takes two prefixes which will be used to match leftPrefix_lower = rightPrefix_lower and leftPrefix_higher = rightPrefix_higher longPairFromUUID \u00b6 longPairFromUUID(expr) converts a UUID to a structure with lower and higher longs mapContains \u00b6 mapContains(expr, 'mapid') returns true if there is an item in the map mapLookup \u00b6 mapLookup(expr, 'mapid') returns either the lookup in map specified by mapid or null meanF \u00b6 meanF() simple mean on the results, expecting sum and count type Long murmur3ID \u00b6 murmur3ID('prefix', fields*) Generates a 160bit id using murmer3 hashing over input fields, prefix is used with the _base, _i0 and _i1 fields in the resulting structure packInts \u00b6 packInts(lower, higher) a packaged long from two ints, used within result compression passed \u00b6 passed() returns the Passed Integer for use in filtering: 10000 prefixedToLongPair \u00b6 prefixedToLongPair('prefix', field) converts a 128bit longpair field with the given prefix into a higher and lower long pair without prefix. This is suitable for converting provided id's into uuids for example via a further call to rngUUID. printCode \u00b6 printCode( [msg], expr ) prints the code generated by an expression, the value variable and the isNull variable and forwards eval calls / type etc. to the expression. The code is printed once per partition on the executors std. output. You will have to check each executor to find the used nodes output. To use with unit testing on a single host you may overwrite the writer function in registerQualityFunctions, you should however use a top level object and var to write into (or stream), printCode will not be able to write to std out properly (spark redirects / captures stdout) or non top level objects (due to classloader / function instance issues). Testing on other hosts without using stdout should do so to a shared file location or similar. !!! \"information\" It is not compatible with every expression Aggregate expressions like aggExpr or sum etc. won't generate code so they aren't compatible with printCode. \\_lambda\\_ is also incompatible with printCode both wrapping a user function and the \\_lambda\\_ function. Similarly the \\_() placeholder function cannot be wrapped. Any function expecting a specific signature like aggExpr or other HigherOrderFunctions like aggregate or filter are unlikely to support wrapped arguements. printExpr \u00b6 printExpr( [msg], expr ) prints the expression tree via toString with an optional msg The message is printed to the driver nodes std. output, often shown in notebooks as well. To use with unit testing you may overwrite the writer function in registerQualityFunctions, you should however use a top level object and var to write into (or stream). probability \u00b6 probability(expr) will translate probability rule results into a double, e.g. 1000 returns 0.01. This is useful for interpreting and filtering on probability based results: 0 -> 10000 non-inclusive probabilityIn \u00b6 probabilityIn(expr, 'bloomid') returns the probability of the expr being in the bloomfilter specified by bloomid. This function either returns 0.0, where it is definitely not present, or the original FPP where it may be present. You may use digestToLongs or hashWith as appropriate to use multiple columns safely. providedID \u00b6 providedID('prefix', existingLongs) creates an id for an existing array of longs, prefix is used with the _base, _i0 and _iN fields in the resulting structure resultsWith \u00b6 resultsWith( x ) process results lambda x (e.g. (sum, count) -> sum ) that takes sum from the aggregate, count from the number of rows counted. Defaults both the sumtype and counttype as LongType Alternatives: resultsWith( [sum ddl type], x) Use the given ddl type for the sum type e.g. 'MAP<STRING, DOUBLE>' resultsWith( [sum ddl type], [result ddl type], x) Use the given ddl type for the sum and result types returnSum \u00b6 returnSum( sum type ddl ) just returns the sum and ignores the count param, expands to resultsWith( [sum ddl_type], (sum, count) -> sum) rng \u00b6 rng() Generates a 128bit random id using XO_RO_SHI_RO_128_PP, encoded as a lower and higher long pair Alternatives: rng('algorithm') Uses Commons RNG RandomSource to implement the RNG rng('algorithm', seedL) Uses Commons RNG RandomSource to implement the RNG with a long seed rngBytes \u00b6 rngBytes() Generates a 128bit random id using XO_RO_SHI_RO_128_PP, encoded as a byte array Alternatives: rngBytes('algorithm') Uses Commons RNG RandomSource to implement the RNG rngBytes('algorithm', seedL) Uses Commons RNG RandomSource to implement the RNG with a long seed rngBytes('algorithm', seedL, byteCount) Uses Commons RNG RandomSource to implement the RNG with a long seed, with a specific byte length integer (e.g. 16 is two longs, 8 is integer) rngID \u00b6 rngID('prefix') Generates a 160bit random id using XO_RO_SHI_RO_128_PP, prefix is used with the _base, _i0 and _i1 fields in the resulting structure Alternatives: rngId('prefix', 'algorithm') Uses Commons RNG RandomSource to implement the RNG, using other algorithm's may generate more long _iN fields rngId('prefix', 'algorithm', seedL) Uses Commons RNG RandomSource to implement the RNG with a long seed, using other algorithm's may generate more long _iN fields rngUUID \u00b6 rngUUID(expr) takes either a structure with lower and higher longs or a 128bit binary type and converts to a string uuid ruleSuiteResultDetails \u00b6 ruleSuiteResultDetails(dq) strips the overallResult from the dataquality results, suitable for keeping overall result as a top-level field with associated performance improvements saferLongPair \u00b6 deprecated use uniqueId - saferLongPair(expr, 'bloomid') Prefer to use uniqueID, this 'safer' rng repeatedly calls the expr rng function until there is no matching entry in the bloom id. It returns lower and higher longs. smallBloom \u00b6 smallBloom(buildFrom, expectedSize, expectedFPP) creates a simply bytearray bloom filter using the expected size and fpp - 0.01 is 99%, you may have to cast to double in Spark 3.2. buildFrom can be driven by digestToLongs or hashWith functions when using multiple fields. softFail \u00b6 softFail(ruleexpr) will treat any rule failure (e.g. failed() ) as returning softFailed() softFailed \u00b6 softFailed() returns the SoftFailed Integer result (-1) for use in filtering sumWith \u00b6 sumWith( x ) adds expression x for each row processed in an aggExpr with a default of LongType Alternatives: sumWith( [ddl type], x) Use the given ddl type e.g. 'MAP<STRING, DOUBLE>' uniqueID \u00b6 uniqueID('prefix') Generates a 160bit guaranteed unique id (requires MAC address uniqueness) with contiguous higher values within a partition and overflow with timestamp ms., prefix is used with the _base, _i0 and _i1 fields in the resulting structure unpack \u00b6 unpack(expr) takes a packed rule long and unpacks it to a .id and .version structure unpackIdTriple \u00b6 unpackIdTriple(expr) takes a packed rule triple of longs (ruleSuiteId, ruleSetId and ruleId) and unpacks it to (ruleSuiteId, ruleSuiteVersion, ruleSetId, ruleSetVersion, ruleId, ruleVersion) updateField \u00b6 updateField(structure_expr, 'field.subfield', replaceWith, 'fieldN', replaceWithN) processes structures allowing you to replace sub items (think lens in functional programming) using the structure fields path name. This is wrapped and almost verbatim version of Make Structs Easier' AddFields zaFieldBasedID \u00b6 zaFieldBasedID('prefix', 'digestImpl', fields*) creates a 64bit id (96bit including header) by using a given Zero Allocation impl over the fields, prefix is used with the _base and _i0 fields in the resulting structure. Prefer using the zaLongsFieldBasedID for less collisions zaHashLongsWith \u00b6 zaHashLongsWith('HASH', fields*) generates a multi length long array but with a zero allocation implementation . This structure is suitable for blooms, the default XXH3 algorithm is the 128bit version of that used by the internal bigBloom implementation. Available HASH functions are MURMUR3_128, XXH3 zaHashLongsWithStruct \u00b6 similar to zaHashLongsWith('HASH', fields*) but generates an ID relevant multi length long struct, which is not suitable for blooms zaHashWith \u00b6 zaHashWith('HASH', fields*) generates a single length long array always with 64 bits but with a zero allocation implementation . This structure is suitable for blooms, the default XX algorithm is used by the internal bigBloom implementation. Available HASH functions are MURMUR3_64, CITY_1_1, FARMNA, FARMOU, METRO, WY_V3, XX zaHashWithStruct \u00b6 similar to zaHashWith('HASH', fields*) but generates an ID relevant multi length long struct (of one long), which is not suitable for blooms. Prefer zaHashLongsWithStruct for reduced collisions with either the MURMUR3_128 or XXH3 versions of hashes zaLongsFieldBasedID \u00b6 zaLongsFieldBasedID('prefix', 'digestImpl', fields*) creates a variable length id by using a given Zero Allocation impl over the fields, prefix is used with the _base, _i0 and _iN fields in the resulting structure. Murmur3_128 is faster than on the Guava implementation.","title":"SQL Functions Documentation"},{"location":"sqlfunctions/#_","text":"_( [ddl type], [nullable] ) provides PlaceHolders for lambda functions to allow partial application, use them in place of actual values or expressions to either change arity or allow use in _lambda_. The default type is Long / Bigint, you will have to provide the types directly when using something else. By default the placeholders are assumed to be nullable (i.e. true), you can use false to state the field should not be null.","title":"_"},{"location":"sqlfunctions/#_lambda_","text":"_lambda_( user function ) extracts the Spark LambdaFunction from a resolved user function, this must have the correct types expected by the Spark HigherOrderFunction they are parameters for. This allows using user defined functions and lambdas with in-built Spark HigherOrderFunctions","title":"_lambda_"},{"location":"sqlfunctions/#aggexpr","text":"aggExpr( [ddl sum type], filter, sum, result) aggregates on rows which match the filter expression using the sum expression to aggregate then processes the results using the result expression. You can run multiple aggExpr's in a single pass select, use the first parameter to thread DDL type information through to the sum and result functions.","title":"aggExpr"},{"location":"sqlfunctions/#bigbloom","text":"bigBloom(buildFrom, expectedSize, expectedFPP, 'bloom_id') creates an aggregated bloom filter using the buildFrom expression. The blooms are stored on a shared filesystem using the bloom_id, they can scale to high numbers of items whilst keeping the FPP (e.g. millions at 0.01 would imply 99% probability, you may have to cast to double in Spark 3.2). buildFrom can be driven by digestToLongs or hashWith functions when using multiple fields.","title":"bigBloom"},{"location":"sqlfunctions/#callfun","text":"callFun( user function lambda variable, param1, param2, \u2026 paramN ) used within a lambda function it allows calling a lambda variable that contains a user function. Used from the top level sql it performs a similar function expecting either a full user function or a partially applied function, typically returned from another lambda user function.","title":"callFun"},{"location":"sqlfunctions/#coalesceifattributesmissing","text":"coalesceIfAttributesMissing(expr, replaceWith) substitutes expr with the replaceWith expression when expr has missing attributes in the source dataframe. Your code must call the scala processIfAttributeMissing function before using in validate or ruleEngineRunner/ruleRunner: val missingAttributesAreReplacedRS = processIfAttributeMissing ( rs , struct ) val ( errors , _ ) = validate ( struct , missingAttributesAreReplacedRS ) // use it missingAttributesAreReplacedRS in your dataframe..","title":"coalesceIfAttributesMissing"},{"location":"sqlfunctions/#coalesceifattributesmissingdisable","text":"coalesceIfAttributesMissingDisable(expr) substitutes expr with the DisabledRule Integer result (-2) when expr has missing attributes in the source dataframe. Your code must call the scala processIfAttributeMissing function before using in validate or ruleEngineRunner/ruleRunner: val missingAttributesAreReplacedRS = processIfAttributeMissing ( rs , struct ) val ( errors , _ ) = validate ( struct , missingAttributesAreReplacedRS ) // use it missingAttributesAreReplacedRS in your dataframe..","title":"coalesceIfAttributesMissingDisable"},{"location":"sqlfunctions/#digesttolongs","text":"digestToLongs('digestImpl', fields*) creates an array of longs based on creating the given MessageDigest impl. A 128-bit impl will generate two longs from it's digest","title":"digestToLongs"},{"location":"sqlfunctions/#digesttolongsstruct","text":"digestToLongsStruct('digestImpl', fields*) creates structure of longs with i0 to iN named fields based on creating the given MessageDigest impl.","title":"digestToLongsStruct"},{"location":"sqlfunctions/#disabledrule","text":"disabledRule() returns the DisabledRule Integer result (-2) for use in filtering and to disable rules (which may not signify a version bump)","title":"disabledRule"},{"location":"sqlfunctions/#failed","text":"failed() returns the Failed Integer result (0) for use in filtering","title":"failed"},{"location":"sqlfunctions/#fieldbasedid","text":"fieldBasedID('prefix', 'digestImpl', fields*) creates a variable bit length id by using a given MessageDigest impl over the fields, prefix is used with the _base, _i0 and _iN fields in the resulting structure","title":"fieldBasedID"},{"location":"sqlfunctions/#flattenresults","text":"flattenResults(dataQualityExpr) expands data quality results into a flat array","title":"flattenResults"},{"location":"sqlfunctions/#flattenruleresults","text":"flattenRuleResults(dataQualityExpr) expands data quality results into a structure of flattenedResults, salientRule (the one used to create the output) and the rule result. salientRule will be null if there was no matching rule","title":"flattenRuleResults"},{"location":"sqlfunctions/#hashfieldbasedid","text":"hashFieldBasedID('prefix', 'digestImpl', fields*) creates a variable bit length id by using a given Guava Hasher impl over the fields, prefix is used with the _base, _i0 and _iN fields in the resulting structure","title":"hashFieldBasedID"},{"location":"sqlfunctions/#hashwith","text":"hashWith('HASH', fields*) Generates a hash value (array of longs) suitable for using in blooms based on the given Guava hash implementation. Note based on testing the digestToLongs function for SHA256 and MD5 are faster. Valid hashes: MURMUR3_32, MURMUR3_128, MD5, SHA-1, SHA-256, SHA-512, ADLER32, CRC32, SIPHASH24. When an invalid HASH name is provided MURMUR3_128 will be chosen. Open source Spark 3.1.2 issues On Spark 3.1.2 open source this may get resolver errors due to a downgrade on guava version - 15.0 is used on Databricks, open source 3.0.3 uses 16.0.1, 3.1.2 drops this to 11 and misses crc32, sipHash24 and adler32.","title":"hashWith"},{"location":"sqlfunctions/#hashwithstruct","text":"per hashWith('HASH', fields*) but generates a struct with i0 to ix named longs. This structure is not suitable for blooms","title":"hashWithStruct"},{"location":"sqlfunctions/#idequal","text":"idEqual(leftPrefix, rightPrefix) takes two prefixes which will be used to match leftPrefix_base = rightPrefix_base, i0 and i1 fields. It does not currently support more than two i's","title":"idEqual"},{"location":"sqlfunctions/#inc","text":"inc() increments the current sum by 1 Alternatives: inc( x ) use an expression of type Long to increment","title":"inc"},{"location":"sqlfunctions/#longpair","text":"longPair(lower, higher) creates a structure with these lower and higher longs","title":"longPair"},{"location":"sqlfunctions/#longpairequal","text":"longPairEqual(leftPrefix, rightPrefix) takes two prefixes which will be used to match leftPrefix_lower = rightPrefix_lower and leftPrefix_higher = rightPrefix_higher","title":"longPairEqual"},{"location":"sqlfunctions/#longpairfromuuid","text":"longPairFromUUID(expr) converts a UUID to a structure with lower and higher longs","title":"longPairFromUUID"},{"location":"sqlfunctions/#mapcontains","text":"mapContains(expr, 'mapid') returns true if there is an item in the map","title":"mapContains"},{"location":"sqlfunctions/#maplookup","text":"mapLookup(expr, 'mapid') returns either the lookup in map specified by mapid or null","title":"mapLookup"},{"location":"sqlfunctions/#meanf","text":"meanF() simple mean on the results, expecting sum and count type Long","title":"meanF"},{"location":"sqlfunctions/#murmur3id","text":"murmur3ID('prefix', fields*) Generates a 160bit id using murmer3 hashing over input fields, prefix is used with the _base, _i0 and _i1 fields in the resulting structure","title":"murmur3ID"},{"location":"sqlfunctions/#packints","text":"packInts(lower, higher) a packaged long from two ints, used within result compression","title":"packInts"},{"location":"sqlfunctions/#passed","text":"passed() returns the Passed Integer for use in filtering: 10000","title":"passed"},{"location":"sqlfunctions/#prefixedtolongpair","text":"prefixedToLongPair('prefix', field) converts a 128bit longpair field with the given prefix into a higher and lower long pair without prefix. This is suitable for converting provided id's into uuids for example via a further call to rngUUID.","title":"prefixedToLongPair"},{"location":"sqlfunctions/#printcode","text":"printCode( [msg], expr ) prints the code generated by an expression, the value variable and the isNull variable and forwards eval calls / type etc. to the expression. The code is printed once per partition on the executors std. output. You will have to check each executor to find the used nodes output. To use with unit testing on a single host you may overwrite the writer function in registerQualityFunctions, you should however use a top level object and var to write into (or stream), printCode will not be able to write to std out properly (spark redirects / captures stdout) or non top level objects (due to classloader / function instance issues). Testing on other hosts without using stdout should do so to a shared file location or similar. !!! \"information\" It is not compatible with every expression Aggregate expressions like aggExpr or sum etc. won't generate code so they aren't compatible with printCode. \\_lambda\\_ is also incompatible with printCode both wrapping a user function and the \\_lambda\\_ function. Similarly the \\_() placeholder function cannot be wrapped. Any function expecting a specific signature like aggExpr or other HigherOrderFunctions like aggregate or filter are unlikely to support wrapped arguements.","title":"printCode"},{"location":"sqlfunctions/#printexpr","text":"printExpr( [msg], expr ) prints the expression tree via toString with an optional msg The message is printed to the driver nodes std. output, often shown in notebooks as well. To use with unit testing you may overwrite the writer function in registerQualityFunctions, you should however use a top level object and var to write into (or stream).","title":"printExpr"},{"location":"sqlfunctions/#probability","text":"probability(expr) will translate probability rule results into a double, e.g. 1000 returns 0.01. This is useful for interpreting and filtering on probability based results: 0 -> 10000 non-inclusive","title":"probability"},{"location":"sqlfunctions/#probabilityin","text":"probabilityIn(expr, 'bloomid') returns the probability of the expr being in the bloomfilter specified by bloomid. This function either returns 0.0, where it is definitely not present, or the original FPP where it may be present. You may use digestToLongs or hashWith as appropriate to use multiple columns safely.","title":"probabilityIn"},{"location":"sqlfunctions/#providedid","text":"providedID('prefix', existingLongs) creates an id for an existing array of longs, prefix is used with the _base, _i0 and _iN fields in the resulting structure","title":"providedID"},{"location":"sqlfunctions/#resultswith","text":"resultsWith( x ) process results lambda x (e.g. (sum, count) -> sum ) that takes sum from the aggregate, count from the number of rows counted. Defaults both the sumtype and counttype as LongType Alternatives: resultsWith( [sum ddl type], x) Use the given ddl type for the sum type e.g. 'MAP<STRING, DOUBLE>' resultsWith( [sum ddl type], [result ddl type], x) Use the given ddl type for the sum and result types","title":"resultsWith"},{"location":"sqlfunctions/#returnsum","text":"returnSum( sum type ddl ) just returns the sum and ignores the count param, expands to resultsWith( [sum ddl_type], (sum, count) -> sum)","title":"returnSum"},{"location":"sqlfunctions/#rng","text":"rng() Generates a 128bit random id using XO_RO_SHI_RO_128_PP, encoded as a lower and higher long pair Alternatives: rng('algorithm') Uses Commons RNG RandomSource to implement the RNG rng('algorithm', seedL) Uses Commons RNG RandomSource to implement the RNG with a long seed","title":"rng"},{"location":"sqlfunctions/#rngbytes","text":"rngBytes() Generates a 128bit random id using XO_RO_SHI_RO_128_PP, encoded as a byte array Alternatives: rngBytes('algorithm') Uses Commons RNG RandomSource to implement the RNG rngBytes('algorithm', seedL) Uses Commons RNG RandomSource to implement the RNG with a long seed rngBytes('algorithm', seedL, byteCount) Uses Commons RNG RandomSource to implement the RNG with a long seed, with a specific byte length integer (e.g. 16 is two longs, 8 is integer)","title":"rngBytes"},{"location":"sqlfunctions/#rngid","text":"rngID('prefix') Generates a 160bit random id using XO_RO_SHI_RO_128_PP, prefix is used with the _base, _i0 and _i1 fields in the resulting structure Alternatives: rngId('prefix', 'algorithm') Uses Commons RNG RandomSource to implement the RNG, using other algorithm's may generate more long _iN fields rngId('prefix', 'algorithm', seedL) Uses Commons RNG RandomSource to implement the RNG with a long seed, using other algorithm's may generate more long _iN fields","title":"rngID"},{"location":"sqlfunctions/#rnguuid","text":"rngUUID(expr) takes either a structure with lower and higher longs or a 128bit binary type and converts to a string uuid","title":"rngUUID"},{"location":"sqlfunctions/#rulesuiteresultdetails","text":"ruleSuiteResultDetails(dq) strips the overallResult from the dataquality results, suitable for keeping overall result as a top-level field with associated performance improvements","title":"ruleSuiteResultDetails"},{"location":"sqlfunctions/#saferlongpair","text":"deprecated use uniqueId - saferLongPair(expr, 'bloomid') Prefer to use uniqueID, this 'safer' rng repeatedly calls the expr rng function until there is no matching entry in the bloom id. It returns lower and higher longs.","title":"saferLongPair"},{"location":"sqlfunctions/#smallbloom","text":"smallBloom(buildFrom, expectedSize, expectedFPP) creates a simply bytearray bloom filter using the expected size and fpp - 0.01 is 99%, you may have to cast to double in Spark 3.2. buildFrom can be driven by digestToLongs or hashWith functions when using multiple fields.","title":"smallBloom"},{"location":"sqlfunctions/#softfail","text":"softFail(ruleexpr) will treat any rule failure (e.g. failed() ) as returning softFailed()","title":"softFail"},{"location":"sqlfunctions/#softfailed","text":"softFailed() returns the SoftFailed Integer result (-1) for use in filtering","title":"softFailed"},{"location":"sqlfunctions/#sumwith","text":"sumWith( x ) adds expression x for each row processed in an aggExpr with a default of LongType Alternatives: sumWith( [ddl type], x) Use the given ddl type e.g. 'MAP<STRING, DOUBLE>'","title":"sumWith"},{"location":"sqlfunctions/#uniqueid","text":"uniqueID('prefix') Generates a 160bit guaranteed unique id (requires MAC address uniqueness) with contiguous higher values within a partition and overflow with timestamp ms., prefix is used with the _base, _i0 and _i1 fields in the resulting structure","title":"uniqueID"},{"location":"sqlfunctions/#unpack","text":"unpack(expr) takes a packed rule long and unpacks it to a .id and .version structure","title":"unpack"},{"location":"sqlfunctions/#unpackidtriple","text":"unpackIdTriple(expr) takes a packed rule triple of longs (ruleSuiteId, ruleSetId and ruleId) and unpacks it to (ruleSuiteId, ruleSuiteVersion, ruleSetId, ruleSetVersion, ruleId, ruleVersion)","title":"unpackIdTriple"},{"location":"sqlfunctions/#updatefield","text":"updateField(structure_expr, 'field.subfield', replaceWith, 'fieldN', replaceWithN) processes structures allowing you to replace sub items (think lens in functional programming) using the structure fields path name. This is wrapped and almost verbatim version of Make Structs Easier' AddFields","title":"updateField"},{"location":"sqlfunctions/#zafieldbasedid","text":"zaFieldBasedID('prefix', 'digestImpl', fields*) creates a 64bit id (96bit including header) by using a given Zero Allocation impl over the fields, prefix is used with the _base and _i0 fields in the resulting structure. Prefer using the zaLongsFieldBasedID for less collisions","title":"zaFieldBasedID"},{"location":"sqlfunctions/#zahashlongswith","text":"zaHashLongsWith('HASH', fields*) generates a multi length long array but with a zero allocation implementation . This structure is suitable for blooms, the default XXH3 algorithm is the 128bit version of that used by the internal bigBloom implementation. Available HASH functions are MURMUR3_128, XXH3","title":"zaHashLongsWith"},{"location":"sqlfunctions/#zahashlongswithstruct","text":"similar to zaHashLongsWith('HASH', fields*) but generates an ID relevant multi length long struct, which is not suitable for blooms","title":"zaHashLongsWithStruct"},{"location":"sqlfunctions/#zahashwith","text":"zaHashWith('HASH', fields*) generates a single length long array always with 64 bits but with a zero allocation implementation . This structure is suitable for blooms, the default XX algorithm is used by the internal bigBloom implementation. Available HASH functions are MURMUR3_64, CITY_1_1, FARMNA, FARMOU, METRO, WY_V3, XX","title":"zaHashWith"},{"location":"sqlfunctions/#zahashwithstruct","text":"similar to zaHashWith('HASH', fields*) but generates an ID relevant multi length long struct (of one long), which is not suitable for blooms. Prefer zaHashLongsWithStruct for reduced collisions with either the MURMUR3_128 or XXH3 versions of hashes","title":"zaHashWithStruct"},{"location":"sqlfunctions/#zalongsfieldbasedid","text":"zaLongsFieldBasedID('prefix', 'digestImpl', fields*) creates a variable length id by using a given Zero Allocation impl over the fields, prefix is used with the _base, _i0 and _iN fields in the resulting structure. Murmur3_128 is faster than on the Guava implementation.","title":"zaLongsFieldBasedID"},{"location":"advanced/aggregations/","text":"Aggregation Functions \u00b6 Quality adds a number of aggregation primitives to allow building accross dataset functionality similar to Deequ and others but philisophically staying true to the customisation approach used throughout the library. At it's core all aggregations are formed using any number of aggExpr columns: aggExpr(filter, lambda sum, lambda result ) - allows filter expressions to be used to build up aggregated BIGINT (long) results with lambda functions, leveraging simple lambda functions (note count is currently only BIGINT / LongType): // generates with an long id column from 1 to 20 val df = sparkSession . range ( 1 , 20 ) // filter odd numbers, add the them together with sumWith lambda for the // sum, then using resultsWith lambda variables divide them by the count // of filtered rows val res = df . select ( expr ( \"aggExpr(id % 2 > 0, sumWith(sum -> sum + id), resultsWith( (sum, count) -> sum / count ) )\" ). as ( \"aggExpr\" )) res . show () // will show aggExpr with 10.0 as a result, // sum + count would show 110.. The filter parameter lets you select rows you care about to aggregate, but does not stop you aggregating different filters in different columns and still process all columns in a single pass. The sum function itself does the aggregation and finally the result function yields the last calculated result. Both of these functions operate on MAPs of any key and value type. Spark lambda functions are incompatible with aggregation wrt. type inference which requires that the type is specified to aggExpr as an optional default for any type other than bigint. Aggregation Lambda Functions \u00b6 sumWith( lambda entry -> entry ) - processes for each matched row the lambda with the given ddl type which defaults to LongType resultsWith( lambda (sum, count) -> ex ) - process results lambda with sum and count types passed in. inc( [expr] ) - increments the current sum either by default 1 or by expr using type LongType meanF() - simple mean on the results, expecting sum and count type Long: // generates with an long id column from 1 to 20 val df = sparkSession . range ( 1 , 20 ) // filter odd numbers, add the them together with inc lambda for the sum, then using meanF expression to divide them by the count of filtered rows val res = df . select ( expr ( \"aggExpr(id % 2 > 0, inc(id), meanF() )\" ). as ( \"aggExpr\" )) res . show () // will show aggExpr with 10.0 as a result, sum + count would show 110.. mapWith( keyExpr, x ) - uses a map to group via keyExpr and apply x to each element: // a counting example expr - group by and count distinct equivalent expr ( \"aggExpr('MAP<STRING, LONG>', 1 > 0, mapWith(date || ', ' || product, entry -> entry + 1 ), resultsWith( (sum, count) -> sum ) )\" ). as ( \"mapCountExpr\" ) // a summing example expr with embedded if's in the summing lambda for added fun expr ( \"aggExpr('MAP<STRING, DOUBLE>', 1 > 0, mapWith(date || ', ' || product, entry -> entry + IF(ccy='CHF', value, value * ccyrate) ), returnSum() )\" ). as ( \"mapSumExpr\" ) returnSum( ) - just returns the sum and ignores the count param, expands to resultsWith( (sum, count) -> sum) What about my pre 0.7.1 aggExpr functions using ddl type parameters? \u00b6 Prior to 0.7.1 functions such as sumWith, mapWith, returnSum and returnWith each had their own ddl parameters. 0.7.1 has moved this to the optional first parameter of aggExpr itself, this both reduces duplication and is less error-prone (stopping different sum types in both sum and result). The syntax is backwards compatible however (with the exception of decimal handling), whilst the 'evaluate' (e.g. returnSum, returnWith) ddl type parameters are ignored the 'sum' type parameter is used for the whole of aggExpr's 'sum type'. If you are using the deprecated sumWith('dll type', ..) and get differing types issues move the ddl to the first param of aggExpr. I get a strange error mentioning casts and type incompatiblity - what do? \u00b6 In order to support the simplified single DDL parameter there are a number of Spark Expression tree re-writes taking place to 'inject' the right type. These re-writes depend on a fixed format, this may change between Spark runtimes but they may also not work beyond the use cases they are tested against (see AggregatesTest.scala for the cases). Spark creates different plans and Expression trees from the simplified vs. the pre 0.7.1 versions, this could lead to unexpected re-write issues. If an sql was working pre 0.7.1 with the deprecated syntax but fails with the simplified or indeed you simply wish to test out if the previous syntax would have worked you can supply 'NO_REWRITE' for the first parameter of aggExpr (instead of DDL) in addition to supplying the other two DDL's directly. The ability to provide types is present for inc, meanF, returnSum and returnWith as before. Note inc('DDL', expression) does not work with NO_REWRITE, as such it throws an exception telling you to use the default approach. You can use an attribute directly with NO_REWRITE just not expressions Type Lookup and Monoidal Merging \u00b6 This section is very advanced but may be needed in a deeply nested type is to be aggregated. Type Lookup \u00b6 aggExpr, mapWith, sumWith and returnSum all rely on type lookup. The implementation uses sparks in-built DDL parsing to get types, but can be extended by supplying a custom function when registering functions e.g.: registerQualityFunctions ( parseTypes = ( str : String ) => defaultParseTypes ( str ). orElse ( logic goes here ) /* Option[DataType] */ ) Monoidal Merging \u00b6 Unlike type lookup custom merging could well be required for special types. Aggregation (as well as MapMerging and MapTransform) require a Zero value the defaultZero function can be extended or overwritten and passed into registerFunctions as per parseTypes. The defaultAdd function uses itself with an extension function parameter in order to supply map value monoidal associative add. Note This works great for Maps and default numeric types but it requires custom monoidal 'add' functions to be provided for merging complex types. Whilst zero returns a value to use as zero you may need to recurse for nested structures of zero, add requires defining Expressions and takes a left and right Expression to perform it: DataType => Option [( Expression , Expression ) => Expression ] Warning This is an area of functionality you should avoid unless needed as it often requires deep knowledge of Spark internals. There be dragons.","title":"Aggregation Functions"},{"location":"advanced/aggregations/#aggregation-functions","text":"Quality adds a number of aggregation primitives to allow building accross dataset functionality similar to Deequ and others but philisophically staying true to the customisation approach used throughout the library. At it's core all aggregations are formed using any number of aggExpr columns: aggExpr(filter, lambda sum, lambda result ) - allows filter expressions to be used to build up aggregated BIGINT (long) results with lambda functions, leveraging simple lambda functions (note count is currently only BIGINT / LongType): // generates with an long id column from 1 to 20 val df = sparkSession . range ( 1 , 20 ) // filter odd numbers, add the them together with sumWith lambda for the // sum, then using resultsWith lambda variables divide them by the count // of filtered rows val res = df . select ( expr ( \"aggExpr(id % 2 > 0, sumWith(sum -> sum + id), resultsWith( (sum, count) -> sum / count ) )\" ). as ( \"aggExpr\" )) res . show () // will show aggExpr with 10.0 as a result, // sum + count would show 110.. The filter parameter lets you select rows you care about to aggregate, but does not stop you aggregating different filters in different columns and still process all columns in a single pass. The sum function itself does the aggregation and finally the result function yields the last calculated result. Both of these functions operate on MAPs of any key and value type. Spark lambda functions are incompatible with aggregation wrt. type inference which requires that the type is specified to aggExpr as an optional default for any type other than bigint.","title":"Aggregation Functions"},{"location":"advanced/aggregations/#aggregation-lambda-functions","text":"sumWith( lambda entry -> entry ) - processes for each matched row the lambda with the given ddl type which defaults to LongType resultsWith( lambda (sum, count) -> ex ) - process results lambda with sum and count types passed in. inc( [expr] ) - increments the current sum either by default 1 or by expr using type LongType meanF() - simple mean on the results, expecting sum and count type Long: // generates with an long id column from 1 to 20 val df = sparkSession . range ( 1 , 20 ) // filter odd numbers, add the them together with inc lambda for the sum, then using meanF expression to divide them by the count of filtered rows val res = df . select ( expr ( \"aggExpr(id % 2 > 0, inc(id), meanF() )\" ). as ( \"aggExpr\" )) res . show () // will show aggExpr with 10.0 as a result, sum + count would show 110.. mapWith( keyExpr, x ) - uses a map to group via keyExpr and apply x to each element: // a counting example expr - group by and count distinct equivalent expr ( \"aggExpr('MAP<STRING, LONG>', 1 > 0, mapWith(date || ', ' || product, entry -> entry + 1 ), resultsWith( (sum, count) -> sum ) )\" ). as ( \"mapCountExpr\" ) // a summing example expr with embedded if's in the summing lambda for added fun expr ( \"aggExpr('MAP<STRING, DOUBLE>', 1 > 0, mapWith(date || ', ' || product, entry -> entry + IF(ccy='CHF', value, value * ccyrate) ), returnSum() )\" ). as ( \"mapSumExpr\" ) returnSum( ) - just returns the sum and ignores the count param, expands to resultsWith( (sum, count) -> sum)","title":"Aggregation Lambda Functions"},{"location":"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters","text":"Prior to 0.7.1 functions such as sumWith, mapWith, returnSum and returnWith each had their own ddl parameters. 0.7.1 has moved this to the optional first parameter of aggExpr itself, this both reduces duplication and is less error-prone (stopping different sum types in both sum and result). The syntax is backwards compatible however (with the exception of decimal handling), whilst the 'evaluate' (e.g. returnSum, returnWith) ddl type parameters are ignored the 'sum' type parameter is used for the whole of aggExpr's 'sum type'. If you are using the deprecated sumWith('dll type', ..) and get differing types issues move the ddl to the first param of aggExpr.","title":"What about my pre 0.7.1 aggExpr functions using ddl type parameters?"},{"location":"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do","text":"In order to support the simplified single DDL parameter there are a number of Spark Expression tree re-writes taking place to 'inject' the right type. These re-writes depend on a fixed format, this may change between Spark runtimes but they may also not work beyond the use cases they are tested against (see AggregatesTest.scala for the cases). Spark creates different plans and Expression trees from the simplified vs. the pre 0.7.1 versions, this could lead to unexpected re-write issues. If an sql was working pre 0.7.1 with the deprecated syntax but fails with the simplified or indeed you simply wish to test out if the previous syntax would have worked you can supply 'NO_REWRITE' for the first parameter of aggExpr (instead of DDL) in addition to supplying the other two DDL's directly. The ability to provide types is present for inc, meanF, returnSum and returnWith as before. Note inc('DDL', expression) does not work with NO_REWRITE, as such it throws an exception telling you to use the default approach. You can use an attribute directly with NO_REWRITE just not expressions","title":"I get a strange error mentioning casts and type incompatiblity - what do?"},{"location":"advanced/aggregations/#type-lookup-and-monoidal-merging","text":"This section is very advanced but may be needed in a deeply nested type is to be aggregated.","title":"Type Lookup and Monoidal Merging"},{"location":"advanced/aggregations/#type-lookup","text":"aggExpr, mapWith, sumWith and returnSum all rely on type lookup. The implementation uses sparks in-built DDL parsing to get types, but can be extended by supplying a custom function when registering functions e.g.: registerQualityFunctions ( parseTypes = ( str : String ) => defaultParseTypes ( str ). orElse ( logic goes here ) /* Option[DataType] */ )","title":"Type Lookup"},{"location":"advanced/aggregations/#monoidal-merging","text":"Unlike type lookup custom merging could well be required for special types. Aggregation (as well as MapMerging and MapTransform) require a Zero value the defaultZero function can be extended or overwritten and passed into registerFunctions as per parseTypes. The defaultAdd function uses itself with an extension function parameter in order to supply map value monoidal associative add. Note This works great for Maps and default numeric types but it requires custom monoidal 'add' functions to be provided for merging complex types. Whilst zero returns a value to use as zero you may need to recurse for nested structures of zero, add requires defining Expressions and takes a left and right Expression to perform it: DataType => Option [( Expression , Expression ) => Expression ] Warning This is an area of functionality you should avoid unless needed as it often requires deep knowledge of Spark internals. There be dragons.","title":"Monoidal Merging"},{"location":"advanced/blooms/","text":"Bloom Filters \u00b6 Bloom Filters are probabalistic data structures that, for a given number of items and a false positive probability (FPP) provides a mightContain function. This function guarantees that if an item is not in the bloom filter it will return false, however if it returns true this is to a probability defined by the FPP value. In contrast to a Set which requires the items (or at least their hash values) to be stored individually blooms make use of multiple blocks and apply bit setting based on hashes of the input value over some function. These resulting blocks and bitsets are far smaller in memory and storage usage than a typical set. For example it's possible to store hundreds of millions of items within a bloom and still keep withn a normal Java byte array boundary. This act of using bit flipping also allows blooms to be or'd for the same size and FPP, which is great for aggregation functions in Spark. Whilst blooms are great the guarantees break when: The number of items far exceeds the initial size used to create the bloom - false is still guaranteed to not be present but the true value will no longer represent FPP, the bloom has degraded The number of bits required to store the initial number of items at the FPP exceed what can be represented by the bloom algorithm. If you attempt to store billions of items within a bloom at a high FPP you will quickly fall foul of 2, and this is easily done with both the Spark stats.package and the current bloom filters on Databricks. This makes them next to useless for large dataset lookups on typical bloom implementations. How does Quality change this? \u00b6 It can't change the fundemental laws of bloom filters, if you use the number of bits up your bloom filter is next to useless. You can however add multiple Java byte arrays and bucket the hashes across them. This works great up to about 1.5b items in a typical aggregation function within Spark, however Spark only allows a maximum of 2Gb for an InternalRow - of which aggregates are stored in. Quality provides three bloom implementations the Spark stats package, small - which buckets within an InternalRow (1.2-1.5b items max whilst maintaining FPP) - and big which doesn't use Spark aggregations to store the results of aggregations but rather a shared file system such as Databricks dbfs. Both the small and big bloom functions use Parquet's bloom filter implementation which both significantly faster and has better statistical properties than Sparks/Guavas or Breezes. What are Bloom Maps? \u00b6 Bloom Maps are identifiers to a bloom filter. The examples below show how to create the key is to use the SparkBloomFilter or bloomFilter functions to provide the value and the FPP is required. registerBloomMapAndFunction ( bloomFilterMap ) Both registers the Bloom Map, the smallBloom and bigBloom aggregation functions and the probabilityIn function. Using the Spark stats package \u00b6 // generate a dataframe with an id column val df = sqlContext . range ( 1 , 20 ) // build a bloomfilter over the id's val bloom = df . stat . bloomFilter ( \"id\" , 20 , 0.01 ) // get the fpp and build the map val fpp = 1.0 - bloom . expectedFpp () val bloomFilterMap = SparkSession . active . sparkContext . broadcast ( Map ( \"ids\" -> ( SparkBloomFilter ( bloom ), fpp )) ) // register the map for this SparkSession registerBloomMapAndFunction ( bloomFilterMap ) // lookup the result of adding column's a and b against that bloom filter for each row otherSourceDF . withColumn ( \"probabilityInIds\" , expr ( \"probabilityIn(a + b, 'ids')\" )) The stats package bloomFilter function has severe limitations on a single field and does not allow expressions but through the SparkBloomFilter lookup function is integrated with Quality anyway. Using the Quality bloom filters \u00b6 The small and big bloom functions take a single expression parameter however it can be built from any number of fields or field types. Future versions will allow a flexible number of fields to be added to the hash function \"see here\" #19. smallBloom( column, expected number of items, fpp ) - an SQL aggregate function which generates a BloomFilter Array[Byte] for use in probabilityIn or rowId: val aggrow = orig . select ( expr ( s\"smallBloom(uuid, $ numRows , 0.01)\" )). head () val thebytes = aggrow . getAs [ Bytes ]( 0 ) val bf = bloomLookup ( thebytes ) val fpp = 0.99 val blooms : BloomFilterMap = Map ( \"ids\" -> ( bf , fpp )) bigBloom( column, expected number of items, fpp ) - can only be run on large memory sized workers and executors and can cover billions of rows while maintaining the FPP: // via the expression val interim = df . selectExpr ( s\"bigBloom( $ bloomOn , $ expectedSize , $ fpp , ' $ bloomId ')\" ). head . getAs [ Array [ Byte ]]( 0 ) val bloom = com . sparkutils . quality . impl . bloom . parquet . BucketedFiles . deserialize ( interim ) bloom . cleanupOthers () bloom val blooms : BloomFilterMap = Map ( \"ids\" -> ( bloomLookup ( bloom ), fpp )) // via the utility function, defaults to 0.01 fpp val bloom = bloomFrom ( df , \"id\" , expectedsize ) val blooms : BloomFilterMap = Map ( \"ids\" -> ( bloomLookup ( bloom ), 1 - bloom . fpp )) In testing the bigBloom creation over 1.5b rows on a small 4 node cluster took less than 8m to generate, using a resulting bloom however is far easier to load and distribute and constant time for lookups. Whilst the actual big bloom itself cannot be directly broadcast only the file location of the resulting bloom is and each node on the cluster directly loads it from the ADLS (or other hopefully fast store for the multiple GBs). To change the base location for blooms use the sparkSession.sparkContext.setLocalProperty(\"sparkutils.quality.bloom.root\") to specify the location root. Expressions which take expression parameters \u00b6 probabilityIn( content to lookup, bloomfilterName ) - returns the fpp value of a filter lookup against the bloomFilter with bloomFilterName in the registered BloomFilterMap, which works with the Spark stats package, small and big blooms.","title":"Bloom Filters"},{"location":"advanced/blooms/#bloom-filters","text":"Bloom Filters are probabalistic data structures that, for a given number of items and a false positive probability (FPP) provides a mightContain function. This function guarantees that if an item is not in the bloom filter it will return false, however if it returns true this is to a probability defined by the FPP value. In contrast to a Set which requires the items (or at least their hash values) to be stored individually blooms make use of multiple blocks and apply bit setting based on hashes of the input value over some function. These resulting blocks and bitsets are far smaller in memory and storage usage than a typical set. For example it's possible to store hundreds of millions of items within a bloom and still keep withn a normal Java byte array boundary. This act of using bit flipping also allows blooms to be or'd for the same size and FPP, which is great for aggregation functions in Spark. Whilst blooms are great the guarantees break when: The number of items far exceeds the initial size used to create the bloom - false is still guaranteed to not be present but the true value will no longer represent FPP, the bloom has degraded The number of bits required to store the initial number of items at the FPP exceed what can be represented by the bloom algorithm. If you attempt to store billions of items within a bloom at a high FPP you will quickly fall foul of 2, and this is easily done with both the Spark stats.package and the current bloom filters on Databricks. This makes them next to useless for large dataset lookups on typical bloom implementations.","title":"Bloom Filters"},{"location":"advanced/blooms/#how-does-quality-change-this","text":"It can't change the fundemental laws of bloom filters, if you use the number of bits up your bloom filter is next to useless. You can however add multiple Java byte arrays and bucket the hashes across them. This works great up to about 1.5b items in a typical aggregation function within Spark, however Spark only allows a maximum of 2Gb for an InternalRow - of which aggregates are stored in. Quality provides three bloom implementations the Spark stats package, small - which buckets within an InternalRow (1.2-1.5b items max whilst maintaining FPP) - and big which doesn't use Spark aggregations to store the results of aggregations but rather a shared file system such as Databricks dbfs. Both the small and big bloom functions use Parquet's bloom filter implementation which both significantly faster and has better statistical properties than Sparks/Guavas or Breezes.","title":"How does Quality change this?"},{"location":"advanced/blooms/#what-are-bloom-maps","text":"Bloom Maps are identifiers to a bloom filter. The examples below show how to create the key is to use the SparkBloomFilter or bloomFilter functions to provide the value and the FPP is required. registerBloomMapAndFunction ( bloomFilterMap ) Both registers the Bloom Map, the smallBloom and bigBloom aggregation functions and the probabilityIn function.","title":"What are Bloom Maps?"},{"location":"advanced/blooms/#using-the-spark-stats-package","text":"// generate a dataframe with an id column val df = sqlContext . range ( 1 , 20 ) // build a bloomfilter over the id's val bloom = df . stat . bloomFilter ( \"id\" , 20 , 0.01 ) // get the fpp and build the map val fpp = 1.0 - bloom . expectedFpp () val bloomFilterMap = SparkSession . active . sparkContext . broadcast ( Map ( \"ids\" -> ( SparkBloomFilter ( bloom ), fpp )) ) // register the map for this SparkSession registerBloomMapAndFunction ( bloomFilterMap ) // lookup the result of adding column's a and b against that bloom filter for each row otherSourceDF . withColumn ( \"probabilityInIds\" , expr ( \"probabilityIn(a + b, 'ids')\" )) The stats package bloomFilter function has severe limitations on a single field and does not allow expressions but through the SparkBloomFilter lookup function is integrated with Quality anyway.","title":"Using the Spark stats package"},{"location":"advanced/blooms/#using-the-quality-bloom-filters","text":"The small and big bloom functions take a single expression parameter however it can be built from any number of fields or field types. Future versions will allow a flexible number of fields to be added to the hash function \"see here\" #19. smallBloom( column, expected number of items, fpp ) - an SQL aggregate function which generates a BloomFilter Array[Byte] for use in probabilityIn or rowId: val aggrow = orig . select ( expr ( s\"smallBloom(uuid, $ numRows , 0.01)\" )). head () val thebytes = aggrow . getAs [ Bytes ]( 0 ) val bf = bloomLookup ( thebytes ) val fpp = 0.99 val blooms : BloomFilterMap = Map ( \"ids\" -> ( bf , fpp )) bigBloom( column, expected number of items, fpp ) - can only be run on large memory sized workers and executors and can cover billions of rows while maintaining the FPP: // via the expression val interim = df . selectExpr ( s\"bigBloom( $ bloomOn , $ expectedSize , $ fpp , ' $ bloomId ')\" ). head . getAs [ Array [ Byte ]]( 0 ) val bloom = com . sparkutils . quality . impl . bloom . parquet . BucketedFiles . deserialize ( interim ) bloom . cleanupOthers () bloom val blooms : BloomFilterMap = Map ( \"ids\" -> ( bloomLookup ( bloom ), fpp )) // via the utility function, defaults to 0.01 fpp val bloom = bloomFrom ( df , \"id\" , expectedsize ) val blooms : BloomFilterMap = Map ( \"ids\" -> ( bloomLookup ( bloom ), 1 - bloom . fpp )) In testing the bigBloom creation over 1.5b rows on a small 4 node cluster took less than 8m to generate, using a resulting bloom however is far easier to load and distribute and constant time for lookups. Whilst the actual big bloom itself cannot be directly broadcast only the file location of the resulting bloom is and each node on the cluster directly loads it from the ADLS (or other hopefully fast store for the multiple GBs). To change the base location for blooms use the sparkSession.sparkContext.setLocalProperty(\"sparkutils.quality.bloom.root\") to specify the location root.","title":"Using the Quality bloom filters"},{"location":"advanced/blooms/#expressions-which-take-expression-parameters","text":"probabilityIn( content to lookup, bloomfilterName ) - returns the fpp value of a filter lookup against the bloomFilter with bloomFilterName in the registered BloomFilterMap, which works with the Spark stats package, small and big blooms.","title":"Expressions which take expression parameters"},{"location":"advanced/expressionDocs/","text":"As Quality is based on sql it can be useful to document it in place, particularly with Lambda and Output expressions, but also applies to rules and trigger rules. The basic format follows javadocs / scaladocs approach, without *'s on each line, but is possible to define on one line: /** My Description @param name name desc @param othername othername desc @return return val*/ This could also be written with newlines including markdown (if the renderer supports it): /** My Description: * bullet point * more points @param name name desc @param othername othername: * more description points @return return val */ Param's are optional and will generate a warning if the names don't match in the validate function or if params are used on a non-lambda expression. The return value is also optional but would apply to all expressions. Whilst an incorrect parameter name will be flagged and warned against you won't be forced to put a comment for every parameter. A couple of helpful utility functions: val ( errors , warnings , out , docs , expr ) = validate ( Left ( struct ), ruleSuite ) import com . sparkutils . quality . utils .{ RuleSuiteDocs , RelativeWarningsAndErrors } val relative = RelativeWarningsAndErrors ( \"../sampleDocsValidation/\" , errors , warnings ) val md = RuleSuiteDocs . createMarkdown ( docs , ruleSuite , expr , qualityURLGOESHERE + \"/sqlfunctions/\" , Some ( relative )) IOUtils . write ( md , new FileOutputStream ( \"./docs/advanced/sampleDocsOutput.md\" )) val emd = RuleSuiteDocs . createErrorAndWarningMarkdown ( docs , ruleSuite , relative . copy ( relativePath = \"../sampleDocsOutput/\" )) IOUtils . write ( emd , new FileOutputStream ( \"./docs/advanced/sampleDocsValidation.md\" )) exist to generate docs of a ruleSuite and validation errors. The validate function returns both of these inputs. You must specify the quality url containing the sqlfunction documentation in order to link, hrefs are not carried across mike links yet. The sample docs and sample errors/warnings are generated from the DocMarkdownTest.","title":"Expression Documentation"},{"location":"advanced/mapFunctions/","text":"Map Functions \u00b6 A typical use case for processing DQ rules is that of cached value processing, reference data lookups or industry code checks etc. Quality's map functions reproduce the result of joining datasets but guarantees in memory operation only once they are loaded, no merges or joins required. However for larger data lookups either Bloom Filters should be preferred or simply use joins. Building the Lookup Maps \u00b6 In order to lookup values in the maps Quality requires a map of map id's to the actual maps. // create a map from ID to a MapCreator type with the dataframe and underlying // columns, including returning structures / maps etc. val lookups = mapLookupsFromDFs ( Map ( \"countryCode\" -> ( () => { val df = countryCodeCCY . toDF ( \"country\" , \"funnycheck\" , \"ccy\" ) ( df , new Column ( \"country\" ), functions . expr ( \"struct(funnycheck, ccy)\" )) } ), \"ccyRate\" -> ( () => { val df = ccyRate . toDF ( \"ccy\" , \"rate\" ) ( df , new Column ( \"ccy\" ), new Column ( \"rate\" )) }) )) registerMapLookupsAndFunction ( lookups ) In the countryCode map lookup case we are creating a map from country to a structure (funnycheck, ccy), whereas the ccyRate is a simple lookup between ccy and it's rate at point of loading. Map creation is not lazy and is forced at time of calling the registerMap\u2026 function, for streaming jobs this may be unacceptable. Prefer to use new map id's and merge old sets if you need to guarantee repeated calls to registerMapLookupsAndFunctions are working with up to date data. Note Repeated calls and streaming use cases have not been thoroughly tested, the Spark distribution method guarantees an object can be broadcast but no merging is automatically possible, users would be required to code this by hand. Expressions which take expression parameters \u00b6 mapLookup('map name', x) - looks up x against the map specified in map name, full type transparency from the underlying map values are supported including deeply nested structures // show the map of data 'country' field against country code and get back the currency df . select ( col ( \"*\" ), expr ( \"mapLookup('countryCode', country).ccy\" )). show () mapContains('map name', x) - returns true or false if an item is present as a key in the map","title":"Map Functions"},{"location":"advanced/mapFunctions/#map-functions","text":"A typical use case for processing DQ rules is that of cached value processing, reference data lookups or industry code checks etc. Quality's map functions reproduce the result of joining datasets but guarantees in memory operation only once they are loaded, no merges or joins required. However for larger data lookups either Bloom Filters should be preferred or simply use joins.","title":"Map Functions"},{"location":"advanced/mapFunctions/#building-the-lookup-maps","text":"In order to lookup values in the maps Quality requires a map of map id's to the actual maps. // create a map from ID to a MapCreator type with the dataframe and underlying // columns, including returning structures / maps etc. val lookups = mapLookupsFromDFs ( Map ( \"countryCode\" -> ( () => { val df = countryCodeCCY . toDF ( \"country\" , \"funnycheck\" , \"ccy\" ) ( df , new Column ( \"country\" ), functions . expr ( \"struct(funnycheck, ccy)\" )) } ), \"ccyRate\" -> ( () => { val df = ccyRate . toDF ( \"ccy\" , \"rate\" ) ( df , new Column ( \"ccy\" ), new Column ( \"rate\" )) }) )) registerMapLookupsAndFunction ( lookups ) In the countryCode map lookup case we are creating a map from country to a structure (funnycheck, ccy), whereas the ccyRate is a simple lookup between ccy and it's rate at point of loading. Map creation is not lazy and is forced at time of calling the registerMap\u2026 function, for streaming jobs this may be unacceptable. Prefer to use new map id's and merge old sets if you need to guarantee repeated calls to registerMapLookupsAndFunctions are working with up to date data. Note Repeated calls and streaming use cases have not been thoroughly tested, the Spark distribution method guarantees an object can be broadcast but no merging is automatically possible, users would be required to code this by hand.","title":"Building the Lookup Maps"},{"location":"advanced/mapFunctions/#expressions-which-take-expression-parameters","text":"mapLookup('map name', x) - looks up x against the map specified in map name, full type transparency from the underlying map values are supported including deeply nested structures // show the map of data 'country' field against country code and get back the currency df . select ( col ( \"*\" ), expr ( \"mapLookup('countryCode', country).ccy\" )). show () mapContains('map name', x) - returns true or false if an item is present as a key in the map","title":"Expressions which take expression parameters"},{"location":"advanced/prng/","text":"The existing Spark rand function has a few of limitations: It generates doubles Has a fixed implementation Only provides reseeding on each new parition ignoring splittable / jumpable algorithms The Quality psuedorandom generators produce either 128bit values (two longs) or a configurable number of bytes and, as a result, do not suffer precision issues, they also leverage RandomSource implementations allowing users to choose the algorithm used. In addition, by leveraging .isJumpable and the resulting jump function the Quality prng function can benefit from the implementations own approach to managing overalapping intervals across the cluster. RNG Expressions \u00b6 rngBytes( [number of bytes to fill - defaults to 16], [RandomSource RNG Impl - defaults to 'XO_RO_SHI_RO_128_PP'], [seed - defaults to 0] ) - Uses commons rng to create byte arrays, implementations can be plugged in, when seed is 0 the RNG's default seed generator is used. Note when a given RNG isJumpable then it will use jumping for each partition where possible both improving speed and statistical results. rng( [RandomSource RNG Impl - defaults to 'XO_RO_SHI_RO_128_PP'], [seed - defaults to 0] ) - Uses commons rng to create byte arrays, implementations can be plugged in, when seed is 0 the RNG's default seed generator is used. Note when a given RNG isJumpable then it will use jumping for each partition where possible both improving speed and statistical results. rngUUID( expr ) - processes expr with either byte arrays or two longs into a UUID string, it's counterpart longPairFromUUID generates two longs","title":"PRNG Functions"},{"location":"advanced/prng/#rng-expressions","text":"rngBytes( [number of bytes to fill - defaults to 16], [RandomSource RNG Impl - defaults to 'XO_RO_SHI_RO_128_PP'], [seed - defaults to 0] ) - Uses commons rng to create byte arrays, implementations can be plugged in, when seed is 0 the RNG's default seed generator is used. Note when a given RNG isJumpable then it will use jumping for each partition where possible both improving speed and statistical results. rng( [RandomSource RNG Impl - defaults to 'XO_RO_SHI_RO_128_PP'], [seed - defaults to 0] ) - Uses commons rng to create byte arrays, implementations can be plugged in, when seed is 0 the RNG's default seed generator is used. Note when a given RNG isJumpable then it will use jumping for each partition where possible both improving speed and statistical results. rngUUID( expr ) - processes expr with either byte arrays or two longs into a UUID string, it's counterpart longPairFromUUID generates two longs","title":"RNG Expressions"},{"location":"advanced/rowIdFunctions/","text":"Row ID functions are at least 160bit, made of a lower base id and two longs. There are 4 distinct implementations: Random Number, a 128bit payload based on XO_RO_SHI_RO_128_PP Field Based, 128bit MD5 payload based on fields e.g. for DataVault style approaches Provided, an Opaque ID payload, typically 128bit, provided by some upstream system fields (MD5 is not used under the hood) Guaranteed Unique, 160bit ID based on Twitters snowflake IDs at Spark scale - requires MAC addresses to be stable and unique on a driver These IDs use the \"base\" field to provide extensibility but comparisons must include all three fields (or more longs should they be added). From a performance perspective you should transform the column to make the structure into top-level fields via selectExpr ( \"*\" , \"myIDField.*\" ). drop ( \"myIDField\" ) rngID('prefix') - generates a Random 128bit number with each column name prefixed for easy extraction uniqueID('prefix') - generates a unique 160bit ID with each column name prefixed for easy extraction fieldBasedID('prefix', 'messagedigest', exp1, exp2, *) - generates a digest based e.g. 'MD5' identifier based on an expression list providedID('prefix', longArrayBasedExpression) - generates a providedID based on supplied array of two longs expression murmur3ID('prefix', exp1, exp2, *) - generates and ID using hashes based on a version of murmur3 - not cryptographically secure but fast idEqual('left_prefix', 'right_prefix') - (SQL only) tests the two top level field IDs by adding the prefixes, note this does allow predicate push-down / pruning etc. (NB further versions may be added when 160bit is exceeded) Id's can be 96-bit or larger multiples of 64 The algorithm you chose to use for generating Ids will change the length of underlying longs, idEqual cannot be used on different lengths but you can easily replace this with a lambda of the correct length. There are many different hash impls The fieldBasedID functions have a family of alternatives for MessageDigest, ZA based hashes and Guava based Hashers. See SQL Functions and look for the Hash and ID tags. fieldBasedID with MD5 - Seems far slower than other approaches \u00b6 It's definitely slower than either uniqueId or rngID. If your use case allows it, consider murmur3ID if this is sufficient, it's slightly faster as is the XXH3 za hash. MD5 was chosen based on the ubiquity of implementations including on backends (e.g. allowing datavault style approaches). Guaranteed Unique ID - How? \u00b6 In order to lock down a globally (within a Spark using routable IP address space) ID you need to make sure a given machine, point in time and partition (thread) is unique. Your networking / vendor setup should guarantee the machines MAC Address is unique for your Spark Driver, Spark guarantees that the partition id, although re-usable, does not get re-used within a Spark cluster and for a given ms since an epoch we can lock down a range of row numbers. This leaves the following storage model: gantt dateFormat YYYY-MM-DD axisFormat %j title Bit Layout todayMarker off section First Int Unique ID Type and Reserved Space :active, start, 2021-01-01, 8d First 3 Bytes of MAC : startmac, after start, 24d section First Long Last 3 Bytes of MAC :endmac, after startmac, 24d Spark Partition :partition, after endmac, 32d First 8 bits of Timestamp :starttimestamp, after partition, 8d section Second Long Rest of Timestamp :done, endtimestamp, after starttimestamp, 33d Row number in Partition :rowid, after endtimestamp, 31d When Spark starts a new partition the uniqueID expression resets the timestamp and partition and each row evaluates the rowid. When 32bits of rowid would be hit the timestamp is reset and the count resets to 0 allowing over a billion rows per ms. This approach is faster than rngID but also means rows written to the same partitions have statistically incrementing id's allowing Parquet statistical ranges to be used for all three values in predicate pushdowns.","title":"Row ID Functions"},{"location":"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches","text":"It's definitely slower than either uniqueId or rngID. If your use case allows it, consider murmur3ID if this is sufficient, it's slightly faster as is the XXH3 za hash. MD5 was chosen based on the ubiquity of implementations including on backends (e.g. allowing datavault style approaches).","title":"fieldBasedID with MD5 - Seems far slower than other approaches"},{"location":"advanced/rowIdFunctions/#guaranteed-unique-id-how","text":"In order to lock down a globally (within a Spark using routable IP address space) ID you need to make sure a given machine, point in time and partition (thread) is unique. Your networking / vendor setup should guarantee the machines MAC Address is unique for your Spark Driver, Spark guarantees that the partition id, although re-usable, does not get re-used within a Spark cluster and for a given ms since an epoch we can lock down a range of row numbers. This leaves the following storage model: gantt dateFormat YYYY-MM-DD axisFormat %j title Bit Layout todayMarker off section First Int Unique ID Type and Reserved Space :active, start, 2021-01-01, 8d First 3 Bytes of MAC : startmac, after start, 24d section First Long Last 3 Bytes of MAC :endmac, after startmac, 24d Spark Partition :partition, after endmac, 32d First 8 bits of Timestamp :starttimestamp, after partition, 8d section Second Long Rest of Timestamp :done, endtimestamp, after starttimestamp, 33d Row number in Partition :rowid, after endtimestamp, 31d When Spark starts a new partition the uniqueID expression resets the timestamp and partition and each row evaluates the rowid. When 32bits of rowid would be hit the timestamp is reset and the count resets to 0 allowing over a billion rows per ms. This approach is faster than rngID but also means rows written to the same partitions have statistically incrementing id's allowing Parquet statistical ranges to be used for all three values in predicate pushdowns.","title":"Guaranteed Unique ID - How?"},{"location":"advanced/ruleEngine/","text":"Quality provides a basic rule engine for data quality rules the output of each rule however is always translated to RuleResult, encoded and persisted for audit reasons. The ruleEngineRunner function however allows you to take an action based on the passing of a rule and, via salience, choose the most appropriate output for a given row. You can understand QualityRules as a large scale auditable SQL case statement with \"when\" being the trigger rule and the \"then\" as the output expression. RuleSuites are built per the normal DQ rules however a RuleResultProcessor is supplied: val ruleResultProcessor = RunOnPassProcessor ( salience , Id ( outputId , outputVersion ), RuleLogicUtils . expr ( \"array(account_row('from', account), account_row('to', 'other_account1'))\" ))) val rule = Rule ( Id ( id , version ), expressionRule , ruleResultProcessor ) val ruleSuite = RuleSuite ( Id ( ruleSuiteId , ruleSuiteVersion ), Seq ( RuleSet ( Id ( ruleSetId , ruleSetVersion ), Seq ( rule ) ))) val rer = ruleEngineRunner ( ruleSuite , DataType . fromDDL ( \"ARRAY<STRUCT<`transfer_type`: STRING, `account`: STRING>>\" )) val testDataDF = ... val outdf = testDataDF . withColumn ( \"together\" , rer ). selectExpr ( \"*\" , \"together.result\" ) The ruleEngineRunner takes a DataType parameter that must describe the type of the result column type. An additional salientRule column is available that packs three the Id's that represent the ruleId chosen by salience. If this is null then no rule was triggered and the output column will also be null (verifiable via debug mode), if however there is an entry but the output is null then this signifies that the output expression produced a null. The salientRule column may be pulled apart down to the id number and versions via the unpack expression or unpackIdTriple to unpack the lot in one go. If you are using frameless encoders these longs can be converted to a triple of Id's. The salience parameter to the RunOnPassProcessor is used to ensure the lowest value is returned for a ruleSuite. It is the responsibility of the rule configuration to ensure there can only be one output. All of the existing functionality, lambadas etc. can be used to customise the results and, as per the normal DQ processing, is run in-process across the clusters when the spark action is taken (like writing the dataframe to disk). Serializing \u00b6 The serializing approach uses the same functions as normal DQ RuleSuites, the only difference is you should use toDS and provide the two additional ruleEngine parameters when reading from a DF: val withoutLambdasAndOutputExpressions = readRulesFromDF ( rulesDF , col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ), col ( \"ruleSetId\" ), col ( \"ruleSetVersion\" ), col ( \"ruleId\" ), col ( \"ruleVersion\" ), col ( \"ruleExpr\" ), col ( \"ruleEngineSalience\" ), col ( \"ruleEngineId\" ), col ( \"ruleEngineVersion\" ) ) val lambdas = ... val outputExpressions = readOutputExpressionsFromDF ( so . toDF (), col ( \"ruleExpr\" ), col ( \"functionId\" ), col ( \"functionVersion\" ), col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ) ) val ( ruleMap , missing ) = integrateOutputExpressions ( withoutLambdasAndOutputExpressions , outputExpressions ) The ruleExpr is only run for the lowest ruleEngineSalience result of any passing ruleExpr. The missing result will contain any output expressions specified by a rule which do not exist in the output expression dataframe based by rulesuite id, if your rulesuite id is not present in the missing entries your RuleSuite is good to go. The rest of the serialization functions to combine lambdas etc. work as per normal DQ rules allowing you to use lambda functions in your QualityRules output rules as well. The result of toDS will contain the three ruleEngine fields, you can simply drop them if they are not needed. Debugging \u00b6 The RuleResult's indicate if a rule has not triggered but in the case of multiple matching rules it can be useful to see which rules would have been chosen. To enable this you can add the debugMode parameter to the ruleEngineRunner: val rer = ruleEngineRunner ( ruleSuite , DataType . fromDDL ( \"ARRAY<STRUCT<`transfer_type`: STRING, `account`: STRING>>\" ), debugMode = true ) This changes the output column 'result' field type to: ARRAY < STRUCT <` salience ` : INTEGER , ` result ` : ARRAY < ORIGINGALRESULTTYPE >> Why do I have a null There are two cases where you may get a null result: no rules have matched (you can verify this as you'll have no passed() rules). your rule actually returned a null (you can verify this by putting on debug mode, you'll see a salience but no result) flattenRuleResults \u00b6 val outdf = testDataDF . withColumn ( \"together\" , rer ). selectExpr ( \"explode(flattenRuleResults(together)) as expl\" ). selectExpr ( \"expl.*\" ) This sql function behaves the same way as per flattenResults, however there are now two structures to 'explode'. debugRules works as expected here as well. resolveWith \u00b6 Use with care - very experimental The resolveWith functionality has several issues with Spark compatibility which may lead to code failing when it looks like it should work. Known issues: Using filter then count will stop necessary attributes being produced for resolving, Spark optimises them out as count doesn't need them, however the rules definitely do need some attributes to be useful. You may not select different attributes, remove any, re-order them, or add extra attributes, this is likely to cause failure in show'ing or write'ing Spark is free to optimise other actions than just count, ymmv in which ones work. resolveWith attempts to improve performance of planning for general spark operations by first using a reduced plan against the source dataframe. The resulting Expression will have all functions and attributes resolved and is hidden from further processing by Spark until your rules actually run. val testDataDF = .... val rer = ruleEngineRunner ( ruleSuite , DataType . fromDDL ( DDL ), debugMode = debugMode , resolveWith = resolveWith = Some ( testDataDF )) val withRules = rer . withColumn ( \"ruleResults\" , rer ) // ... use the rules Why is this needed? \u00b6 For RuleSuites with 1000s of triggers the effort for Spark to prepare the rules is significant. In tests 1k rule with 50 field evalutaions is already sufficient to cause a delay of over 1m for each action (show, write, count etc.) and the size of the data being processed is not relevant. After building the action QualityRules scale and perform as expected, but that initial costs of 1m per action is significant as it can only be improved by higher spec drivers. resolveWith, if it works for given use case, drastically reduces this cost, the above 1k example is a 30s evaluation up front and far less cost for each further action. With the rather horrible 1k rule example the clock time of running 1k rows through 1k rules with a simple show, then count and write for actions was 6m15s on an Azure b4ms, using resolveWith brings this down to 1m30s for the same actions. Still not blazingly fast of course, but far more tolerable and becomes suitable for smaller batch jobs. Any reason why I shouldn't try it? \u00b6 Not really but for production use cases where your trigger and output rules complexity is low you should prefer to not use it, it's likely fast enough and this solution is very much experimental. You definitely shouldn't use it when using relation or table fields in your expressions e.g. table.field this does not work (verify this by running JoinValidationTest using evalCodeGens instead of evalCodeGensNoResolve). There be dragons. This is known to fail on all OSS builds and OSS runtimes (up to and including 3.2.0). 10.2.dbr and 9.1.dbr actually do work running the tests in notebooks with resolveWith and relations (the test itself is not built for this however to ensure cross compilation on the OSS base). forceRunnerEval \u00b6 By default, QualityRules runs with an optimised wholestage codegen wherever possible. This works by breaking out the nested structure of a RuleSuite into multiple index, salience and id arrays which are fixed for the duration of an action. Whilst this reduces the overhead of array and temporary structure creation the compilation also unrolls the evaluation of trigger rules allowing jit optimisations to kick in. Using large RuleSuites, however, may cause large compilation times which are unsuitable for smaller batches, as such you can force the interpreted path to be used by setting this parameter to true. Individual trigger and output expressions are still compiled but the evaluation will not be.","title":"Engine"},{"location":"advanced/ruleEngine/#serializing","text":"The serializing approach uses the same functions as normal DQ RuleSuites, the only difference is you should use toDS and provide the two additional ruleEngine parameters when reading from a DF: val withoutLambdasAndOutputExpressions = readRulesFromDF ( rulesDF , col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ), col ( \"ruleSetId\" ), col ( \"ruleSetVersion\" ), col ( \"ruleId\" ), col ( \"ruleVersion\" ), col ( \"ruleExpr\" ), col ( \"ruleEngineSalience\" ), col ( \"ruleEngineId\" ), col ( \"ruleEngineVersion\" ) ) val lambdas = ... val outputExpressions = readOutputExpressionsFromDF ( so . toDF (), col ( \"ruleExpr\" ), col ( \"functionId\" ), col ( \"functionVersion\" ), col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ) ) val ( ruleMap , missing ) = integrateOutputExpressions ( withoutLambdasAndOutputExpressions , outputExpressions ) The ruleExpr is only run for the lowest ruleEngineSalience result of any passing ruleExpr. The missing result will contain any output expressions specified by a rule which do not exist in the output expression dataframe based by rulesuite id, if your rulesuite id is not present in the missing entries your RuleSuite is good to go. The rest of the serialization functions to combine lambdas etc. work as per normal DQ rules allowing you to use lambda functions in your QualityRules output rules as well. The result of toDS will contain the three ruleEngine fields, you can simply drop them if they are not needed.","title":"Serializing"},{"location":"advanced/ruleEngine/#debugging","text":"The RuleResult's indicate if a rule has not triggered but in the case of multiple matching rules it can be useful to see which rules would have been chosen. To enable this you can add the debugMode parameter to the ruleEngineRunner: val rer = ruleEngineRunner ( ruleSuite , DataType . fromDDL ( \"ARRAY<STRUCT<`transfer_type`: STRING, `account`: STRING>>\" ), debugMode = true ) This changes the output column 'result' field type to: ARRAY < STRUCT <` salience ` : INTEGER , ` result ` : ARRAY < ORIGINGALRESULTTYPE >> Why do I have a null There are two cases where you may get a null result: no rules have matched (you can verify this as you'll have no passed() rules). your rule actually returned a null (you can verify this by putting on debug mode, you'll see a salience but no result)","title":"Debugging"},{"location":"advanced/ruleEngine/#flattenruleresults","text":"val outdf = testDataDF . withColumn ( \"together\" , rer ). selectExpr ( \"explode(flattenRuleResults(together)) as expl\" ). selectExpr ( \"expl.*\" ) This sql function behaves the same way as per flattenResults, however there are now two structures to 'explode'. debugRules works as expected here as well.","title":"flattenRuleResults"},{"location":"advanced/ruleEngine/#resolvewith","text":"Use with care - very experimental The resolveWith functionality has several issues with Spark compatibility which may lead to code failing when it looks like it should work. Known issues: Using filter then count will stop necessary attributes being produced for resolving, Spark optimises them out as count doesn't need them, however the rules definitely do need some attributes to be useful. You may not select different attributes, remove any, re-order them, or add extra attributes, this is likely to cause failure in show'ing or write'ing Spark is free to optimise other actions than just count, ymmv in which ones work. resolveWith attempts to improve performance of planning for general spark operations by first using a reduced plan against the source dataframe. The resulting Expression will have all functions and attributes resolved and is hidden from further processing by Spark until your rules actually run. val testDataDF = .... val rer = ruleEngineRunner ( ruleSuite , DataType . fromDDL ( DDL ), debugMode = debugMode , resolveWith = resolveWith = Some ( testDataDF )) val withRules = rer . withColumn ( \"ruleResults\" , rer ) // ... use the rules","title":"resolveWith"},{"location":"advanced/ruleEngine/#why-is-this-needed","text":"For RuleSuites with 1000s of triggers the effort for Spark to prepare the rules is significant. In tests 1k rule with 50 field evalutaions is already sufficient to cause a delay of over 1m for each action (show, write, count etc.) and the size of the data being processed is not relevant. After building the action QualityRules scale and perform as expected, but that initial costs of 1m per action is significant as it can only be improved by higher spec drivers. resolveWith, if it works for given use case, drastically reduces this cost, the above 1k example is a 30s evaluation up front and far less cost for each further action. With the rather horrible 1k rule example the clock time of running 1k rows through 1k rules with a simple show, then count and write for actions was 6m15s on an Azure b4ms, using resolveWith brings this down to 1m30s for the same actions. Still not blazingly fast of course, but far more tolerable and becomes suitable for smaller batch jobs.","title":"Why is this needed?"},{"location":"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it","text":"Not really but for production use cases where your trigger and output rules complexity is low you should prefer to not use it, it's likely fast enough and this solution is very much experimental. You definitely shouldn't use it when using relation or table fields in your expressions e.g. table.field this does not work (verify this by running JoinValidationTest using evalCodeGens instead of evalCodeGensNoResolve). There be dragons. This is known to fail on all OSS builds and OSS runtimes (up to and including 3.2.0). 10.2.dbr and 9.1.dbr actually do work running the tests in notebooks with resolveWith and relations (the test itself is not built for this however to ensure cross compilation on the OSS base).","title":"Any reason why I shouldn't try it?"},{"location":"advanced/ruleEngine/#forcerunnereval","text":"By default, QualityRules runs with an optimised wholestage codegen wherever possible. This works by breaking out the nested structure of a RuleSuite into multiple index, salience and id arrays which are fixed for the duration of an action. Whilst this reduces the overhead of array and temporary structure creation the compilation also unrolls the evaluation of trigger rules allowing jit optimisations to kick in. Using large RuleSuites, however, may cause large compilation times which are unsuitable for smaller batches, as such you can force the interpreted path to be used by setting this parameter to true. Individual trigger and output expressions are still compiled but the evaluation will not be.","title":"forceRunnerEval"},{"location":"advanced/ruleEngineWorkflow/","text":"Overview and terms \u00b6 QualityRules is a matching engine which applies match/trigger rules to a Dataframe and, when these rules evaluate to passed (i.e. they match or trigger) output sql is run. Only one trigger rule may produce output, so salience is used as a tie-breaker, the lowest salience wins. Aim to have unique salience for tie-breaking If you have multiple trigger rules with the same salience that both trigger the \"winning\" output chosen is non-deterministic, chose your salience wisely. An alternative way to think of this is the trigger rules are your if and the output expressions are the when, from a logic perspective it may be helpful to think of them as output verbs - when this is true do that. Suggested approach to QualityRules management \u00b6 Keep unrelated rules in their own RuleSuites, making things easier to reason about Make commonly used lambdas or output expressions global Use descriptive verbs for your output expressions Keep duplication or complexity in lambdas Only use fields that change as parameters to those lambdas Always start with test data you want to match against and your expected output Run all test cases for your RuleSuite for any change, don't assume because your rule worked that others won't stop working Use the validation and documentation functionality to document your lambdas and verify you've not made simple mistakes - Spark errors aren't always easy to understand This could be visualised as such: Don't repeat yourself If you are typing the same trigger rule, output expression or even lambda text repeatedly - make another lambda and consider making it global","title":"Workflow"},{"location":"advanced/ruleEngineWorkflow/#overview-and-terms","text":"QualityRules is a matching engine which applies match/trigger rules to a Dataframe and, when these rules evaluate to passed (i.e. they match or trigger) output sql is run. Only one trigger rule may produce output, so salience is used as a tie-breaker, the lowest salience wins. Aim to have unique salience for tie-breaking If you have multiple trigger rules with the same salience that both trigger the \"winning\" output chosen is non-deterministic, chose your salience wisely. An alternative way to think of this is the trigger rules are your if and the output expressions are the when, from a logic perspective it may be helpful to think of them as output verbs - when this is true do that.","title":"Overview and terms"},{"location":"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management","text":"Keep unrelated rules in their own RuleSuites, making things easier to reason about Make commonly used lambdas or output expressions global Use descriptive verbs for your output expressions Keep duplication or complexity in lambdas Only use fields that change as parameters to those lambdas Always start with test data you want to match against and your expected output Run all test cases for your RuleSuite for any change, don't assume because your rule worked that others won't stop working Use the validation and documentation functionality to document your lambdas and verify you've not made simple mistakes - Spark errors aren't always easy to understand This could be visualised as such: Don't repeat yourself If you are typing the same trigger rule, output expression or even lambda text repeatedly - make another lambda and consider making it global","title":"Suggested approach to QualityRules management"},{"location":"advanced/ruleFolder/","text":"The ruleFolderRunner function uses the same data formats and structures as the ruleEngineRunner (with the exception of RuleFolderResult) however it allows you to \"fold\" results over many matching rules. In contrast to ruleEngineRunner, which uses salience to select which output expression to run, ruleFolderRunner uses salience to order the execution of each matching output expression. To facilitate this OutputExpressions in the ruleFolderRunner must be lambdas with one parameter. ruleFolderRunner takes a starter Column, which is evaluated against the row and then is passed as the parameter to the OutputExpression lambdas, in turn the result of these output lambdas is then fed in to the next matching OutputExpression and folded over until the last is run, which is returned. When using debugMode you get the salience and each output returned in the resulting array, as with ruleEngineRunner the Encoder derivations for RuleFolderResult work with both T and Seq[(Int, T)] where the Int is salience. RuleSuites are built per the normal DQ rules however a RuleResultProcessor is supplied with Lambda OutputExpressions: val ruleResultProcessor = RunOnPassProcessor ( salience , Id ( outputId , outputVersion ), RuleLogicUtils . expr ( \"thecurrent -> updateField(thecurrent, 'account', concat(thecurrent.account, '_suffix') )\" ))) val rule = Rule ( Id ( id , version ), expressionRule , ruleResultProcessor ) val ruleSuite = RuleSuite ( Id ( ruleSuiteId , ruleSuiteVersion ), Seq ( RuleSet ( Id ( ruleSetId , ruleSetVersion ), Seq ( rule ) ))) val rer = ruleFolderRunner ( ruleSuite , struct ( $ \"transfer_type\" , $ \"account\" )) val testDataDF = ... val outdf = testDataDF . withColumn ( \"together\" , rer ). selectExpr ( \"*\" , \"together.result\" ) You may use multiple path, expression combinations, to change multiple fields at once - this will be faster than nesting results. Don't use 'current' for a variable on 2.4 It may be tempting to use 'current' as your lambda variable name, but this causes problems on 2.4 - every other version doesn't care. Don't use resolveWith on 2.4 2.4 will NPE using withResolve, this does not occur on more recent Spark versions Don't use select(*, ruleFolderRunner) Spark will not NPE using withColumn but will using select(expr(\"*\"), ruleFolderRunner(ruleSuite)). In order to thread the types through the resolving needs an additional projection, if you must avoid withColumn (e.g for performance reasons) then you may specify the DDL via the useType parameter. flattenFolderResults \u00b6 val outdf = testDataDF . withColumn ( \"together\" , rer ). selectExpr ( \"explode(flattenFolderResults(together)) as expl\" ). selectExpr ( \"expl.result\" ) This sql function behaves the same way as per flattenRuleResults with debugRules working as expected. resolveWith \u00b6 Use with care - very experimental The resolveWith functionality has several issues with Spark compatibility which may lead to code failing when it looks like it should work. Known issues: Using filter then count will stop necessary attributes being produced for resolving, Spark optimises them out as count doesn't need them, however the rules definitely do need some attributes to be useful. You may not select different attributes, remove any, re-order them, or add extra attributes, this is likely to cause failure in show'ing or write'ing Spark is free to optimise other actions than just count, ymmv in which ones work. resolveWith attempts to improve performance of planning for general spark operations by first using a reduced plan against the source dataframe. The resulting Expression will have all functions and attributes resolved and is hidden from further processing by Spark until your rules actually run. val testDataDF = .... val rer = ruleEngineRunner ( sparkSession . sparkContext . broadcast ( ruleSuite ), DataType . fromDDL ( DDL ), debugMode = debugMode , resolveWith = resolveWith = Some ( testDataDF )) val withRules = rer . withColumn ( \"ruleResults\" , rer ) // ... use the rules You definitely shouldn't use it when using relation or table fields in your expressions e.g. table.field this does not work (verify this by running JoinValidationTest using evalCodeGens instead of evalCodeGensNoResolve). There be dragons. This is known to fail on all OSS builds and OSS runtimes (up to and including 3.2.0). 10.2.dbr and 9.1.dbr actually do work running the tests in notebooks with resolveWith and relations (the test itself is not built for this however to ensure cross compilation on the OSS base).","title":"QualityFolder"},{"location":"advanced/ruleFolder/#flattenfolderresults","text":"val outdf = testDataDF . withColumn ( \"together\" , rer ). selectExpr ( \"explode(flattenFolderResults(together)) as expl\" ). selectExpr ( \"expl.result\" ) This sql function behaves the same way as per flattenRuleResults with debugRules working as expected.","title":"flattenFolderResults"},{"location":"advanced/ruleFolder/#resolvewith","text":"Use with care - very experimental The resolveWith functionality has several issues with Spark compatibility which may lead to code failing when it looks like it should work. Known issues: Using filter then count will stop necessary attributes being produced for resolving, Spark optimises them out as count doesn't need them, however the rules definitely do need some attributes to be useful. You may not select different attributes, remove any, re-order them, or add extra attributes, this is likely to cause failure in show'ing or write'ing Spark is free to optimise other actions than just count, ymmv in which ones work. resolveWith attempts to improve performance of planning for general spark operations by first using a reduced plan against the source dataframe. The resulting Expression will have all functions and attributes resolved and is hidden from further processing by Spark until your rules actually run. val testDataDF = .... val rer = ruleEngineRunner ( sparkSession . sparkContext . broadcast ( ruleSuite ), DataType . fromDDL ( DDL ), debugMode = debugMode , resolveWith = resolveWith = Some ( testDataDF )) val withRules = rer . withColumn ( \"ruleResults\" , rer ) // ... use the rules You definitely shouldn't use it when using relation or table fields in your expressions e.g. table.field this does not work (verify this by running JoinValidationTest using evalCodeGens instead of evalCodeGensNoResolve). There be dragons. This is known to fail on all OSS builds and OSS runtimes (up to and including 3.2.0). 10.2.dbr and 9.1.dbr actually do work running the tests in notebooks with resolveWith and relations (the test itself is not built for this however to ensure cross compilation on the OSS base).","title":"resolveWith"},{"location":"advanced/sampleDocsOutput/","text":"RuleSuite Id 0, 1 - 3 Errors 3 Warnings \u00b6 RuleSet Id - 1, 1 \u00b6 Rule Id - 2, 1 - 1 Warnings \u00b6 description Parameter Description fielda desc concat ( fielda , fieldb ) Spark functions used: concat Triggers output rule with id 6, 1 Salience 0 Rule Id - 6, 1 - 1 Warnings \u00b6 fielda > fieldb Triggers output rule with id 1002, 1 Salience 0 Rule Id - 4, 1 - \u00b6 testCaller2 ( fielda > fieldb ) and test ( fieldb ) Lambda used: testCaller2 test Rule Id - 5, 1 - \u00b6 mapLookup ( fielda , fieldb ) and test ( fieldb ) Quality functions used: mapLookup Lambda used: test Rule Id - 16, 1 - 3 Errors \u00b6 nonExistentFunction ( fielda ) and nonExistentFielda > nonExistentFieldb Output Rules \u00b6 Output Rule Id - 6, 1 - 1 Warnings \u00b6 testCaller2 ( fielda , fieldb ) Lambda used: testCaller2 Called by Rules: 2 - 1 Output Rule Id - 1002, 1 - 1 Warnings \u00b6 description 2 Parameter Description fielda desc 2 concat ( fielda , fieldb ) Spark functions used: concat Called by Rules: 6 - 1 Lambdas \u00b6 Lambda test \u00b6 Rule - Id - 6, 1 - 1 Warnings \u00b6 Name test lambda description Parameter Description fielda lambda desc variable -> variable Called by Rules: 5 - 1 4 - 1 Lambda testCaller2 \u00b6 Rule - Id - 7, 2 - \u00b6 Name testCaller2 ( outervariable1 , variable2 ) -> concat ( outervariable1 , variable2 ) and acos ( fielda ) Spark functions used: concat acos Called by Lambdas: testCaller3 Called by Output Expressions: 6 - 1 Called by Rules: 4 - 1 Lambda testCaller3 \u00b6 Rule - Id - 8, 1 - \u00b6 Name testCaller3 lambda description only ( outervariable1 , variable2 , variable3 ) -> testCaller2 ( outervariable1 , variable2 ) Lambda used: testCaller2","title":"sampleDocsOutput"},{"location":"advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings","text":"","title":"RuleSuite Id 0, 1  - 3 Errors 3 Warnings"},{"location":"advanced/sampleDocsOutput/#ruleset-id-1-1","text":"","title":"RuleSet Id - 1, 1 "},{"location":"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings","text":"description Parameter Description fielda desc concat ( fielda , fieldb ) Spark functions used: concat Triggers output rule with id 6, 1 Salience 0","title":"Rule Id - 2, 1  -  1 Warnings"},{"location":"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings","text":"fielda > fieldb Triggers output rule with id 1002, 1 Salience 0","title":"Rule Id - 6, 1  -  1 Warnings"},{"location":"advanced/sampleDocsOutput/#rule-id-4-1-","text":"testCaller2 ( fielda > fieldb ) and test ( fieldb ) Lambda used: testCaller2 test","title":"Rule Id - 4, 1  -"},{"location":"advanced/sampleDocsOutput/#rule-id-5-1-","text":"mapLookup ( fielda , fieldb ) and test ( fieldb ) Quality functions used: mapLookup Lambda used: test","title":"Rule Id - 5, 1  -"},{"location":"advanced/sampleDocsOutput/#rule-id-16-1-3-errors","text":"nonExistentFunction ( fielda ) and nonExistentFielda > nonExistentFieldb","title":"Rule Id - 16, 1  -  3 Errors"},{"location":"advanced/sampleDocsOutput/#output-rules","text":"","title":"Output Rules"},{"location":"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings","text":"testCaller2 ( fielda , fieldb ) Lambda used: testCaller2 Called by Rules: 2 - 1","title":"Output Rule Id - 6, 1  -  1 Warnings"},{"location":"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings","text":"description 2 Parameter Description fielda desc 2 concat ( fielda , fieldb ) Spark functions used: concat Called by Rules: 6 - 1","title":"Output Rule Id - 1002, 1  -  1 Warnings"},{"location":"advanced/sampleDocsOutput/#lambdas","text":"","title":"Lambdas"},{"location":"advanced/sampleDocsOutput/#lambda-test","text":"","title":"Lambda test"},{"location":"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1","text":"Name test lambda description Parameter Description fielda lambda desc variable -> variable Called by Rules: 5 - 1 4 - 1","title":"Rule - Id - 6, 1  -  1 Warnings"},{"location":"advanced/sampleDocsOutput/#lambda-testcaller2","text":"","title":"Lambda testCaller2"},{"location":"advanced/sampleDocsOutput/#rule-id-7-2-","text":"Name testCaller2 ( outervariable1 , variable2 ) -> concat ( outervariable1 , variable2 ) and acos ( fielda ) Spark functions used: concat acos Called by Lambdas: testCaller3 Called by Output Expressions: 6 - 1 Called by Rules: 4 - 1","title":"Rule - Id - 7, 2  -"},{"location":"advanced/sampleDocsOutput/#lambda-testcaller3","text":"","title":"Lambda testCaller3"},{"location":"advanced/sampleDocsOutput/#rule-id-8-1-","text":"Name testCaller3 lambda description only ( outervariable1 , variable2 , variable3 ) -> testCaller2 ( outervariable1 , variable2 ) Lambda used: testCaller2","title":"Rule - Id - 8, 1  -"},{"location":"advanced/sampleDocsValidation/","text":"Errors Summary \u00b6 Type Count RuleNameError Name nonExistentFielda is missing 1 RuleNameError Name nonExistentFieldb is missing 1 SparkFunctionNameError Name nonExistentFunction is missing 1 Warnings Summary \u00b6 Type Count NonLambdaDocParameters Parameter documentation is present on a non lambda expression 2 ExtraDocParameter Parameter fielda is not found in the lambda expression 1 Errors Identified for RuleSuite - Id 0, 1 \u00b6 Id 16, 1 \u00b6 RuleNameError Name nonExistentFielda is missing occurred when processing id Id(16,1) against expression nonExistentFunction ( fielda ) and nonExistentFielda > nonExistentFieldb RuleNameError Name nonExistentFieldb is missing occurred when processing id Id(16,1) against expression nonExistentFunction ( fielda ) and nonExistentFielda > nonExistentFieldb SparkFunctionNameError Name nonExistentFunction is missing occurred when processing id Id(16,1) against expression nonExistentFunction ( fielda ) and nonExistentFielda > nonExistentFieldb Warnings Identified for RuleSuite - Id 0, 1 \u00b6 Id 2, 1 \u00b6 NonLambdaDocParameters Parameter documentation is present on a non lambda expression, occurred when processing id Id(2,1) against expression /** description @param fielda desc */ concat ( fielda , fieldb ) Id 1002, 1 \u00b6 NonLambdaDocParameters Parameter documentation is present on a non lambda expression, occurred when processing id Id(1002,1) against expression /** description 2 @param fielda desc 2 */ concat ( fielda , fieldb ) Id 6, 1 \u00b6 ExtraDocParameter Parameter fielda is not found in the lambda expression, occurred when processing id Id(6,1) against expression /** lambda description @param fielda lambda desc */ variable -> variable","title":"sampleDocsValidation"},{"location":"advanced/sampleDocsValidation/#errors-summary","text":"Type Count RuleNameError Name nonExistentFielda is missing 1 RuleNameError Name nonExistentFieldb is missing 1 SparkFunctionNameError Name nonExistentFunction is missing 1","title":"Errors Summary"},{"location":"advanced/sampleDocsValidation/#warnings-summary","text":"Type Count NonLambdaDocParameters Parameter documentation is present on a non lambda expression 2 ExtraDocParameter Parameter fielda is not found in the lambda expression 1","title":"Warnings Summary"},{"location":"advanced/sampleDocsValidation/#errors-identified-for-rulesuite-id-0-1","text":"","title":"Errors Identified for RuleSuite - Id 0, 1 "},{"location":"advanced/sampleDocsValidation/#id-16-1","text":"RuleNameError Name nonExistentFielda is missing occurred when processing id Id(16,1) against expression nonExistentFunction ( fielda ) and nonExistentFielda > nonExistentFieldb RuleNameError Name nonExistentFieldb is missing occurred when processing id Id(16,1) against expression nonExistentFunction ( fielda ) and nonExistentFielda > nonExistentFieldb SparkFunctionNameError Name nonExistentFunction is missing occurred when processing id Id(16,1) against expression nonExistentFunction ( fielda ) and nonExistentFielda > nonExistentFieldb","title":"Id 16, 1 "},{"location":"advanced/sampleDocsValidation/#warnings-identified-for-rulesuite-id-0-1","text":"","title":"Warnings Identified for RuleSuite - Id 0, 1 "},{"location":"advanced/sampleDocsValidation/#id-2-1","text":"NonLambdaDocParameters Parameter documentation is present on a non lambda expression, occurred when processing id Id(2,1) against expression /** description @param fielda desc */ concat ( fielda , fieldb )","title":"Id 2, 1 "},{"location":"advanced/sampleDocsValidation/#id-1002-1","text":"NonLambdaDocParameters Parameter documentation is present on a non lambda expression, occurred when processing id Id(1002,1) against expression /** description 2 @param fielda desc 2 */ concat ( fielda , fieldb )","title":"Id 1002, 1 "},{"location":"advanced/sampleDocsValidation/#id-6-1","text":"ExtraDocParameter Parameter fielda is not found in the lambda expression, occurred when processing id Id(6,1) against expression /** lambda description @param fielda lambda desc */ variable -> variable","title":"Id 6, 1 "},{"location":"advanced/userFunctions/","text":"Users may register Lambda Functions using the sql lambda syntax: val rule = LambdaFunction ( \"multValCCY\" , \"(theValue, ccy) -> theValue * ccy\" , Id ( 1 , 2 )) registerLambdaFunctions ( Seq ( rule )) they may be then called in rules (or within any SQL expressions), in this case value and ccyrate from the data frame are provided to the function as parameters theValue and ccy: val ndf = df . withColumn ( \"newcalc\" , expr ( \"multValCCY(value, ccyrate)\" )) The function parameter and return types are derived during the analysis phase, this may lead to errors if types do not match the expressions upon an action only, such as writing or calling show. Note Whilst you are free to add lambdas when not using a RuleSuite the library will not ensure that only functions registered as part of a RuleSuite are used in rules, such hygiene is necessarily left to the user. LambdaFunctions may have any number of parameters e.g. given a greaterThan lambda: ( param1 , param2 ) -> param1 > param2 you would be able to call it with two expressions greaterThan ( col1 , col2 ) Single argument lambdas should not use brackets around the parameters and zero argument lambdas use no input or ->. In all cases the lambda can use the attributes from the surrounding dataframe - it's effectively global, you cannot use variables from surrounding / calling lambdas. Don't use 'current'\u2026 as a lambda variable name on 2.4 Bizarrely this causes the parser to fail on 2.4 only, no more recent version suffers this. Same goes for left or right as names. What about default parameter or different length parameter length Lambdas? \u00b6 To define multiple parameter length lambdas just define new lambdas with the same name but different argument lengths. You can freely call the same lambda name with different parameters e.g.: val rule = LambdaFunction ( \"multValCCY\" , \"multValCCY(value, ccyrate)\" , Id ( 1 , 2 )) val rule1 = LambdaFunction ( \"multValCCY\" , \"theValue -> multValCCY(theValue, ccyrate)\" , Id ( 2 , 2 )) val rule2 = LambdaFunction ( \"multValCCY\" , \"(theValue, ccy) -> theValue * ccy\" , Id ( 3 , 2 )) registerLambdaFunctions ( Seq ( rule , rule1 , rule2 )) // all of these should work df . withColumn ( \"newcalc\" , expr ( \"multValCCY()\" )) df . withColumn ( \"newcalc\" , expr ( \"multValCCY(value)\" )) df . withColumn ( \"newcalc\" , expr ( \"multValCCY(value, ccyrate)\" )) Higher Order Functions \u00b6 As Lambda's in Spark aren't first class citizens you can neither partially apply them (fill in parameters to derive new lambdas) nor pass them into a lambda. In 0.7.1 Quality experimentally adds three new concepts to the mix: Placeholders - _ () - which represents a value which still needs to be filled (partial application) Application - callFun () - which, in a lambda, allows you to apply a function parameter Lambda Extraction - _lambda_ () - which allows Lambdas to be used with existing Spark HigherOrderFunctions (like aggregate ) Unfortunately the last piece of that puzzle of returning a higher order function isn't currently possible. Putting together 1 and 3 (straight out of the test suite): val plus = LambdaFunction ( \"plus\" , \"(a, b) -> a + b\" , Id ( 1 , 2 )) val plus3 = LambdaFunction ( \"plus3\" , \"(a, b, c) -> a + b + c\" , Id ( 2 , 2 )) val hof = LambdaFunction ( \"hof\" , \"func -> aggregate(array(1, 2, 3), 0, _lambda_(func))\" , Id ( 3 , 2 )) registerLambdaFunctions ( Seq ( plus , plus3 , hof )) import sparkSession . implicits . _ // attempt to dropping a reference to a function where simple lambdas are expected. // control assert ( 6 == sparkSession . sql ( \"SELECT aggregate(array(1, 2, 3), 0, (acc, x) -> acc + x) as res\" ). as [ Int ]. head ) // all params would be needed with multiple aritys assert ( 6 == sparkSession . sql ( \"SELECT aggregate(array(1, 2, 3), 0, _lambda_(plus(_('int'), _('int')))) as res\" ). as [ Int ]. head ) // can we play with partials? assert ( 21 == sparkSession . sql ( \"SELECT aggregate(array(1, 2, 3), 0, _lambda_(plus3(_('int'), _('int'), 5))) as res\" ). as [ Int ]. head ) // hof'd assert ( 6 == sparkSession . sql ( \"SELECT hof(plus(_('int'), _('int'))) as res\" ). as [ Int ]. head ) In the above example you can see type's being specified to the placeholder function, this is needed because, similar to aggExpr, Spark can't know the types until after they are evaluated and resolved. This does have the benefit of keeping the types at the partial application site. The default placeholder type is Long / Bigint . The lambda function extracts a fully resolved underlying Spark LambdaFunction, which means the types must be correct as it is provided to the function (use the placeholder function to specify types). Similarly, you use the lambda function to extract the Spark LambdaFunction from a user provided parameter (as seen in the hof example). The aggregate function only accepts two parameters for its accumulator, but in the plus3 example we've 'injected' in a third. Partially applying the plus3 with the value 5 in it's \"c\" position leaves the two arguments as new function. Quality ensures the necessary transformations are done before it hits the aggregate expression. Great, but can I use it with aggExpr? Yep: select aggExpr ( 'DECIMAL(38,18)' , dec IS NOT NULL , myinc ( _ ()), myretsum ( _ (), _ ())) as agg allows you to define the myinc and myretsum elsewhere, you don't need to use the lambda function with aggExpr. What about application? Using callFun: val use = LambdaFunction ( \"use\" , \"(func, b) -> callFun(func, b)\" , Id ( 4 , 2 )) the first parameter must be the lambda variable referring to your function followed by the necessary parameters to pass in. Func in this case has a single parameter but of course it could have started with 5 and had 4 partially applied. Again you don't need to use lambda to pass the functions further down the line: val deep = LambdaFunction ( \"deep\" , \"(func, a, b) -> use(func, a, b)\" , Id ( 2 , 2 )) Deep takes the function and simply passes it to use where the callFun exists. Finally you can also further partially apply your lambda variables: val plus2 = LambdaFunction ( \"plus\" , \"(a, b) -> a + b\" , Id ( 3 , 2 )) val plus3 = LambdaFunction ( \"plus\" , \"(a, b, c) -> plus(plus(a, b), c)\" , Id ( 3 , 2 )) val papplyt = LambdaFunction ( \"papplyt\" , \"(func, a, b, c) -> callFun(callFun(func, _(), _(), c), a, b)\" , Id ( 2 , 2 )) registerLambdaFunctions ( Seq ( plus2 , plus3 , papplyt )) import sparkSession . implicits . _ assert ( 6L == sparkSession . sql ( \"select papplyt(plus(_(), _(), _()), 1L, 2L, 3L) as res\" ). as [ Long ]. head ) Here the callFun directly applies the function afterwards but you could equally pass it to other functions. callFun ( callFun ( func , _ (), _ (), c ), a , b ) can then be read as partially apply func (plus with 3 arguments) parameter 3 with the lambda variable c, creating a new two argument function. Then call that function with the a and b parameters. Useless in this case perhaps but it should be illustrative. All that's missing is returning lambdas: val plus2 = LambdaFunction ( \"plus\" , \"(a, b) -> a + b\" , Id ( 3 , 2 )) val plus3 = LambdaFunction ( \"plus\" , \"(a, b, c) -> plus(plus(a, b), c)\" , Id ( 3 , 2 )) val retLambda = LambdaFunction ( \"retLambda\" , \"(a, b) -> plus(a, b, _())\" , Id ( 2 , 2 )) registerLambdaFunctions ( Seq ( plus2 , plus3 , retLambda )) import sparkSession . implicits . _ assert ( 6L == { val sql = sparkSession . sql ( \"select callFun(retLambda(1L, 2L), 3L) as res\" ) sql . as [ Long ]. head }) here the user function retLambda returns the plus with 3 arity applied over a and b, leaving a function of one arity to fill. The top level callFun then applies the last argument (c). The second test It is experimental Although behaviour has been tested with compilation and across the support DBRs it's entirely possible there are gaps in the trickery used. A good example of the experimental nature is the _() function, it's quite possible that is taken by Spark at a later stage. lambda drop in call arguments to transform_values and transform_keys don't work on 3.0 and 3.1.2 They pattern match on List and not seq, later versions fix this. To work around this you must explicitly use lambdas for these functions. Controlling compilation - Tweaking the Quality Optimisations \u00b6 Normal Spark LambdaFunctions, NamedLambdaVariable and HigherOrderFunctions aren't compiled, this is - in part - due to the nature of having to thread the lambda variables across the Expression tree and calling bind. At the time of codegen bind has already been called however so the code is free to create a new tree just for compilation. Quality makes use of this and replaces all NamedLambdaVariables expressions with a simple variable in the generated code. NamedLambdaVariables also use AtomicReferences, which was introduced to avoid a tree manipulation task - see here for the code introduction. AtomicReferences are slower for both writes and reads of non-contended variables. As such Quality does away with this in its compilation, the exprId is sufficient to track the actual id. Quality only attempts to replace it's own FunN and reverts to using NamedLambdaVariables if it encounters any other HigherOrderFunction. Where it can replace it uses NamedLambdaVariableCodeGen with an ExprId specific code snippet. You can customise this logic via implementing: trait LambdaCompilationHandler { /** * * @param expr * @return empty if the expression should be transformed (i.e. there is a custom solution for it). Otherwise return the full set of NamedLambdaVariables found */ def shouldTransform ( expr : Expression ): Seq [ NamedLambdaVariable ] /** * Transform the expression using the scope of replaceable named lambda variable expression * @param expr * @param scope * @return */ def transform ( expr : Expression , scope : Map [ ExprId , NamedLambdaVariableCodeGen ]): Expression } and supplying it via the environment variable, System.property or via sparkSession.sparkContext.setLocalProperty quality.lambdaHandlers using this format: name = className where name is either a fully qualified class name of a HigherOrderFunction or of a lambda (FunN) function. The default org.apache.spark.sql.qualityFunctions.DoCodegenFallbackHandler allows you to disable any optimisation for a HigherOrderFunction. It can be used to disable all FunN optimisations with: -Dquality.lambdaHandlers=org.apache.spark.sql.qualityFunctions.FunN=org.apache.spark.sql.qualityFunctions.DoCodegenFallbackHandler Alternatively if you have a hotspot with any inbuilt HoF such as array_transform, filter or transform_values you could replace the implementation for compilation with your own transformation. e.g.: -Dquality.lambdaHandlers=org.apache.spark.sql.catalyst.expressions.TransformValues=org.mine.SuperfastTransformValues Why do all this? \u00b6 Speed, it's up to 40% faster. LambdaRowPerfTest, in the test suite, generates an increasing number of lambdas and only runs over 10k rows but still sees clear benefits e.g. (orange is compiled lambdas): This difference is already noticeable with a small increment function in a folder: thecurrent -> updateField ( thecurrent , 'thecount' , thecurrent . thecount + 1 ) The difference is typically higher with nested lambdas. Should your compilation time exceed the execution time you may wish to disable compilation via the fallback handler.","title":"User Defined Functions"},{"location":"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas","text":"To define multiple parameter length lambdas just define new lambdas with the same name but different argument lengths. You can freely call the same lambda name with different parameters e.g.: val rule = LambdaFunction ( \"multValCCY\" , \"multValCCY(value, ccyrate)\" , Id ( 1 , 2 )) val rule1 = LambdaFunction ( \"multValCCY\" , \"theValue -> multValCCY(theValue, ccyrate)\" , Id ( 2 , 2 )) val rule2 = LambdaFunction ( \"multValCCY\" , \"(theValue, ccy) -> theValue * ccy\" , Id ( 3 , 2 )) registerLambdaFunctions ( Seq ( rule , rule1 , rule2 )) // all of these should work df . withColumn ( \"newcalc\" , expr ( \"multValCCY()\" )) df . withColumn ( \"newcalc\" , expr ( \"multValCCY(value)\" )) df . withColumn ( \"newcalc\" , expr ( \"multValCCY(value, ccyrate)\" ))","title":"What about default parameter or different length parameter length Lambdas?"},{"location":"advanced/userFunctions/#higher-order-functions","text":"As Lambda's in Spark aren't first class citizens you can neither partially apply them (fill in parameters to derive new lambdas) nor pass them into a lambda. In 0.7.1 Quality experimentally adds three new concepts to the mix: Placeholders - _ () - which represents a value which still needs to be filled (partial application) Application - callFun () - which, in a lambda, allows you to apply a function parameter Lambda Extraction - _lambda_ () - which allows Lambdas to be used with existing Spark HigherOrderFunctions (like aggregate ) Unfortunately the last piece of that puzzle of returning a higher order function isn't currently possible. Putting together 1 and 3 (straight out of the test suite): val plus = LambdaFunction ( \"plus\" , \"(a, b) -> a + b\" , Id ( 1 , 2 )) val plus3 = LambdaFunction ( \"plus3\" , \"(a, b, c) -> a + b + c\" , Id ( 2 , 2 )) val hof = LambdaFunction ( \"hof\" , \"func -> aggregate(array(1, 2, 3), 0, _lambda_(func))\" , Id ( 3 , 2 )) registerLambdaFunctions ( Seq ( plus , plus3 , hof )) import sparkSession . implicits . _ // attempt to dropping a reference to a function where simple lambdas are expected. // control assert ( 6 == sparkSession . sql ( \"SELECT aggregate(array(1, 2, 3), 0, (acc, x) -> acc + x) as res\" ). as [ Int ]. head ) // all params would be needed with multiple aritys assert ( 6 == sparkSession . sql ( \"SELECT aggregate(array(1, 2, 3), 0, _lambda_(plus(_('int'), _('int')))) as res\" ). as [ Int ]. head ) // can we play with partials? assert ( 21 == sparkSession . sql ( \"SELECT aggregate(array(1, 2, 3), 0, _lambda_(plus3(_('int'), _('int'), 5))) as res\" ). as [ Int ]. head ) // hof'd assert ( 6 == sparkSession . sql ( \"SELECT hof(plus(_('int'), _('int'))) as res\" ). as [ Int ]. head ) In the above example you can see type's being specified to the placeholder function, this is needed because, similar to aggExpr, Spark can't know the types until after they are evaluated and resolved. This does have the benefit of keeping the types at the partial application site. The default placeholder type is Long / Bigint . The lambda function extracts a fully resolved underlying Spark LambdaFunction, which means the types must be correct as it is provided to the function (use the placeholder function to specify types). Similarly, you use the lambda function to extract the Spark LambdaFunction from a user provided parameter (as seen in the hof example). The aggregate function only accepts two parameters for its accumulator, but in the plus3 example we've 'injected' in a third. Partially applying the plus3 with the value 5 in it's \"c\" position leaves the two arguments as new function. Quality ensures the necessary transformations are done before it hits the aggregate expression. Great, but can I use it with aggExpr? Yep: select aggExpr ( 'DECIMAL(38,18)' , dec IS NOT NULL , myinc ( _ ()), myretsum ( _ (), _ ())) as agg allows you to define the myinc and myretsum elsewhere, you don't need to use the lambda function with aggExpr. What about application? Using callFun: val use = LambdaFunction ( \"use\" , \"(func, b) -> callFun(func, b)\" , Id ( 4 , 2 )) the first parameter must be the lambda variable referring to your function followed by the necessary parameters to pass in. Func in this case has a single parameter but of course it could have started with 5 and had 4 partially applied. Again you don't need to use lambda to pass the functions further down the line: val deep = LambdaFunction ( \"deep\" , \"(func, a, b) -> use(func, a, b)\" , Id ( 2 , 2 )) Deep takes the function and simply passes it to use where the callFun exists. Finally you can also further partially apply your lambda variables: val plus2 = LambdaFunction ( \"plus\" , \"(a, b) -> a + b\" , Id ( 3 , 2 )) val plus3 = LambdaFunction ( \"plus\" , \"(a, b, c) -> plus(plus(a, b), c)\" , Id ( 3 , 2 )) val papplyt = LambdaFunction ( \"papplyt\" , \"(func, a, b, c) -> callFun(callFun(func, _(), _(), c), a, b)\" , Id ( 2 , 2 )) registerLambdaFunctions ( Seq ( plus2 , plus3 , papplyt )) import sparkSession . implicits . _ assert ( 6L == sparkSession . sql ( \"select papplyt(plus(_(), _(), _()), 1L, 2L, 3L) as res\" ). as [ Long ]. head ) Here the callFun directly applies the function afterwards but you could equally pass it to other functions. callFun ( callFun ( func , _ (), _ (), c ), a , b ) can then be read as partially apply func (plus with 3 arguments) parameter 3 with the lambda variable c, creating a new two argument function. Then call that function with the a and b parameters. Useless in this case perhaps but it should be illustrative. All that's missing is returning lambdas: val plus2 = LambdaFunction ( \"plus\" , \"(a, b) -> a + b\" , Id ( 3 , 2 )) val plus3 = LambdaFunction ( \"plus\" , \"(a, b, c) -> plus(plus(a, b), c)\" , Id ( 3 , 2 )) val retLambda = LambdaFunction ( \"retLambda\" , \"(a, b) -> plus(a, b, _())\" , Id ( 2 , 2 )) registerLambdaFunctions ( Seq ( plus2 , plus3 , retLambda )) import sparkSession . implicits . _ assert ( 6L == { val sql = sparkSession . sql ( \"select callFun(retLambda(1L, 2L), 3L) as res\" ) sql . as [ Long ]. head }) here the user function retLambda returns the plus with 3 arity applied over a and b, leaving a function of one arity to fill. The top level callFun then applies the last argument (c). The second test It is experimental Although behaviour has been tested with compilation and across the support DBRs it's entirely possible there are gaps in the trickery used. A good example of the experimental nature is the _() function, it's quite possible that is taken by Spark at a later stage. lambda drop in call arguments to transform_values and transform_keys don't work on 3.0 and 3.1.2 They pattern match on List and not seq, later versions fix this. To work around this you must explicitly use lambdas for these functions.","title":"Higher Order Functions"},{"location":"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations","text":"Normal Spark LambdaFunctions, NamedLambdaVariable and HigherOrderFunctions aren't compiled, this is - in part - due to the nature of having to thread the lambda variables across the Expression tree and calling bind. At the time of codegen bind has already been called however so the code is free to create a new tree just for compilation. Quality makes use of this and replaces all NamedLambdaVariables expressions with a simple variable in the generated code. NamedLambdaVariables also use AtomicReferences, which was introduced to avoid a tree manipulation task - see here for the code introduction. AtomicReferences are slower for both writes and reads of non-contended variables. As such Quality does away with this in its compilation, the exprId is sufficient to track the actual id. Quality only attempts to replace it's own FunN and reverts to using NamedLambdaVariables if it encounters any other HigherOrderFunction. Where it can replace it uses NamedLambdaVariableCodeGen with an ExprId specific code snippet. You can customise this logic via implementing: trait LambdaCompilationHandler { /** * * @param expr * @return empty if the expression should be transformed (i.e. there is a custom solution for it). Otherwise return the full set of NamedLambdaVariables found */ def shouldTransform ( expr : Expression ): Seq [ NamedLambdaVariable ] /** * Transform the expression using the scope of replaceable named lambda variable expression * @param expr * @param scope * @return */ def transform ( expr : Expression , scope : Map [ ExprId , NamedLambdaVariableCodeGen ]): Expression } and supplying it via the environment variable, System.property or via sparkSession.sparkContext.setLocalProperty quality.lambdaHandlers using this format: name = className where name is either a fully qualified class name of a HigherOrderFunction or of a lambda (FunN) function. The default org.apache.spark.sql.qualityFunctions.DoCodegenFallbackHandler allows you to disable any optimisation for a HigherOrderFunction. It can be used to disable all FunN optimisations with: -Dquality.lambdaHandlers=org.apache.spark.sql.qualityFunctions.FunN=org.apache.spark.sql.qualityFunctions.DoCodegenFallbackHandler Alternatively if you have a hotspot with any inbuilt HoF such as array_transform, filter or transform_values you could replace the implementation for compilation with your own transformation. e.g.: -Dquality.lambdaHandlers=org.apache.spark.sql.catalyst.expressions.TransformValues=org.mine.SuperfastTransformValues","title":"Controlling compilation - Tweaking the Quality Optimisations"},{"location":"advanced/userFunctions/#why-do-all-this","text":"Speed, it's up to 40% faster. LambdaRowPerfTest, in the test suite, generates an increasing number of lambdas and only runs over 10k rows but still sees clear benefits e.g. (orange is compiled lambdas): This difference is already noticeable with a small increment function in a folder: thecurrent -> updateField ( thecurrent , 'thecount' , thecurrent . thecount + 1 ) The difference is typically higher with nested lambdas. Should your compilation time exceed the execution time you may wish to disable compilation via the fallback handler.","title":"Why do all this?"},{"location":"advanced/validation/","text":"Quality provides some validation utilities that can be used as part of your rule design activity to ensure sure you aren't using variables or functions that don't exist, or even possibly having recursive lambda calls. It comes in two distinct flavours: Schema Based - The schema representing your dictionary DataFrame Based - Use an actual DataFrame to provide your dictionary with the option of running the rules against your schema (or DataFrame) via the runnerFunction parameter. A simpler function for just assessing known Errors against a schema are also provided: def validate ( schema : StructType , ruleSuite : RuleSuite ): Set [ RuleError ] The validation result model is as follows: so the simple version returns any known Errors backed by case classes so you can pattern match as needed or just display as is via the id and errorText functions. Resolution of function names are run against the functionRegistry, as such you must register any UDF's or database functions before calling validate. What if I want to actually test the ruleSuite runs? \u00b6 def validate ( schemaOrFrame : Either [ StructType , DataFrame ], ruleSuite : RuleSuite , showParams : ShowParams = ShowParams (), runnerFunction : Option [ DataFrame => Column ] = None , qualityName : String = \"Quality\" , recursiveLambdasSOEIsOk : Boolean = false , transformBeforeShow : DataFrame => DataFrame = identity ): ( Set [ RuleError ], Set [ RuleWarning ], String , RuleSuiteDocs , Map [ Id , ExpressionLookup ]) Given you can either use a ruleRunner or a ruleEngineRunner and set a number of parameters on those Column functions the validate runnerFunction is as simple DataFrame => Column that allows you to tweak the output. In the case of ruleEngineRunner you could use debug mode, try with different DDL output types etc. Use the qualityName parameter if you want to store the output in another column. If you don't provide the runnerFunction the resulting string will be empty. You don't actually have to provide a DataFrame, instead using just schema will generate an empty dataset to allow Spark to resolve against. Using a DataFrame parameter will allow you to capture the output in the resulting tuples _3 String. There are a number of overloaded validate arity functions to help solve common cases, they all delegate to the above function, whic also returns the documentation objects for each expression in the RuleSuite via the RuleSuiteDocs object, this provides a base for the documentation of a RuleSuite . What I want to change the dataframe before I show it? \u00b6 Using the transformBeforeShow parameter you can enhance, select or filter the DataFrame before showing it. Why do I get a java.lang.AbstractMethodError when validating? \u00b6 The validation code also validates the sql documentation, checking documented parameters against lambda parameter names (or indeed that you have any parameters when not a lambda). You probably have a dependency on the Scala Compiler, due to the scala compiler requiring a different parser combinator library this may occur due to classpath issues. To remediate please make sure that Quality is higher up on your dependencies than the scala compiler is. If need be manually specify the parser combinator library dependency, making sure to use the same version declared in Qualities pom.","title":"Validation"},{"location":"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs","text":"def validate ( schemaOrFrame : Either [ StructType , DataFrame ], ruleSuite : RuleSuite , showParams : ShowParams = ShowParams (), runnerFunction : Option [ DataFrame => Column ] = None , qualityName : String = \"Quality\" , recursiveLambdasSOEIsOk : Boolean = false , transformBeforeShow : DataFrame => DataFrame = identity ): ( Set [ RuleError ], Set [ RuleWarning ], String , RuleSuiteDocs , Map [ Id , ExpressionLookup ]) Given you can either use a ruleRunner or a ruleEngineRunner and set a number of parameters on those Column functions the validate runnerFunction is as simple DataFrame => Column that allows you to tweak the output. In the case of ruleEngineRunner you could use debug mode, try with different DDL output types etc. Use the qualityName parameter if you want to store the output in another column. If you don't provide the runnerFunction the resulting string will be empty. You don't actually have to provide a DataFrame, instead using just schema will generate an empty dataset to allow Spark to resolve against. Using a DataFrame parameter will allow you to capture the output in the resulting tuples _3 String. There are a number of overloaded validate arity functions to help solve common cases, they all delegate to the above function, whic also returns the documentation objects for each expression in the RuleSuite via the RuleSuiteDocs object, this provides a base for the documentation of a RuleSuite .","title":"What if I want to actually test the ruleSuite runs?"},{"location":"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it","text":"Using the transformBeforeShow parameter you can enhance, select or filter the DataFrame before showing it.","title":"What I want to change the dataframe before I show it?"},{"location":"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating","text":"The validation code also validates the sql documentation, checking documented parameters against lambda parameter names (or indeed that you have any parameters when not a lambda). You probably have a dependency on the Scala Compiler, due to the scala compiler requiring a different parser combinator library this may occur due to classpath issues. To remediate please make sure that Quality is higher up on your dependencies than the scala compiler is. If need be manually specify the parser combinator library dependency, making sure to use the same version declared in Qualities pom.","title":"Why do I get a java.lang.AbstractMethodError when validating?"},{"location":"background/about/","text":"Why Quality? \u00b6 When looking at the Data Quality options for a data mesh standard runtime offering we identified gaps in the available platforms, so we asked: What would our Data Quality library look like? We ended up with a highly peformant and extensible row-level SQL based rule engine with low storage costs and a high degree of optimsation for both Spark and Databricks Runtimes. Gaps in existing Spark Offerings \u00b6 Deequ and databricks dq were unsuitable for the meshes requirements, crucially these tools (and others such as OwlDQ) could not run at low cost with tight SLAs, typically requiring processing the data once to get DQ and then once more to save with DQ information or to handle streamed data, not too surprising given their focus on quality across large data sets rather than at a row processing level as a first class citizen. An important use case for DQ rules within this mesh platform is the ability to filter out bad rows but also to allow the consumer of the data to decide what they filter, requiring the producers results to ideally be stored with data rows themselves. Additionally, and perhaps most importantly, they do not support arbitrary user driven rules without recoding. As such our notional library needs to be: fast to integrate into existing Spark action without much overhead auditable, it should be clear which rule generated which results capable of handling streamed data capable of being scripted integrate with DataFrames directly, also allowing consumer driven rules in addition to upstream producer DQ be able to fit results into a single field (e.g. a map structure of name to results) stored with the row at time of writing the results Resulting Solution Space \u00b6 In order to execute efficiently with masses of data the calculation of data quality must scale with Spark, this requires either map functions, UDFs or better still Catalyst Expressions, enabling simple SQL to be used. Storage of results for a row could be json, xml or using nested structures. The evaluation of these solutions can be found in the next sections. How did Rules and Folder come about? \u00b6 Whilst developing a bookkeeping application a need for simple rules that generate an output was raised. The initial approach taken, to effectively generate a case statement, ran into size and scale limitations. The architect of the application asked - can you have an output sql statement for the DQ rules? The result is QualityRules, although it should probably be called QualityCase\u2026 QualityFolder came from a related application which had a need to transform data - providing defaulting in some circumstances - but still had to be auditable and extensible as QualityRules was.","title":"History"},{"location":"background/about/#why-quality","text":"When looking at the Data Quality options for a data mesh standard runtime offering we identified gaps in the available platforms, so we asked: What would our Data Quality library look like? We ended up with a highly peformant and extensible row-level SQL based rule engine with low storage costs and a high degree of optimsation for both Spark and Databricks Runtimes.","title":"Why Quality?"},{"location":"background/about/#gaps-in-existing-spark-offerings","text":"Deequ and databricks dq were unsuitable for the meshes requirements, crucially these tools (and others such as OwlDQ) could not run at low cost with tight SLAs, typically requiring processing the data once to get DQ and then once more to save with DQ information or to handle streamed data, not too surprising given their focus on quality across large data sets rather than at a row processing level as a first class citizen. An important use case for DQ rules within this mesh platform is the ability to filter out bad rows but also to allow the consumer of the data to decide what they filter, requiring the producers results to ideally be stored with data rows themselves. Additionally, and perhaps most importantly, they do not support arbitrary user driven rules without recoding. As such our notional library needs to be: fast to integrate into existing Spark action without much overhead auditable, it should be clear which rule generated which results capable of handling streamed data capable of being scripted integrate with DataFrames directly, also allowing consumer driven rules in addition to upstream producer DQ be able to fit results into a single field (e.g. a map structure of name to results) stored with the row at time of writing the results","title":"Gaps in existing Spark Offerings"},{"location":"background/about/#resulting-solution-space","text":"In order to execute efficiently with masses of data the calculation of data quality must scale with Spark, this requires either map functions, UDFs or better still Catalyst Expressions, enabling simple SQL to be used. Storage of results for a row could be json, xml or using nested structures. The evaluation of these solutions can be found in the next sections.","title":"Resulting Solution Space"},{"location":"background/about/#how-did-rules-and-folder-come-about","text":"Whilst developing a bookkeeping application a need for simple rules that generate an output was raised. The initial approach taken, to effectively generate a case statement, ran into size and scale limitations. The architect of the application asked - can you have an output sql statement for the DQ rules? The result is QualityRules, although it should probably be called QualityCase\u2026 QualityFolder came from a related application which had a need to transform data - providing defaulting in some circumstances - but still had to be auditable and extensible as QualityRules was.","title":"How did Rules and Folder come about?"},{"location":"background/changelog/","text":"0.0.1-SNAPSHOT 5th March, 2023 \u00b6 Initial OSS version. (many internal versions in between) the Quality exploration starts 25th April, 2020 \u00b6 Start of investigations into how to manage DQ more effectively within Spark and the mesh platform.","title":"Changelog"},{"location":"background/changelog/#001-snapshot-5th-march-2023","text":"Initial OSS version. (many internal versions in between)","title":"0.0.1-SNAPSHOT 5th March, 2023"},{"location":"background/changelog/#the-quality-exploration-starts-25th-april-2020","text":"Start of investigations into how to manage DQ more effectively within Spark and the mesh platform.","title":"the Quality exploration starts 25th April, 2020"},{"location":"background/evaluation_method/","text":"How should rules be evaluated? \u00b6 Performance wise there is a clear winner as to approach for generating results: The green row is using the map function which is unfortunately the most straightforward to program. The blue is the baseline of processing a row without DQ and the orange is using withColumn. withColumn can use UDFs or inbuilt Catalyst style functions - the latter giving better performance and ability to more naturally integrate with spark, this review echos the findings and hinting at the effects of catalyst. Overall storage winner is nested columns , it has lower storage costs, is as fast as json to serialize (via an Expression) and faster to query with predicate push down support for faster filtering. Details of the analysis are below. Note Using withColumn is strongly discouraged, it very quickly introduces performance issues in spark code, prefer to use select and the Quality transform functions. A large part of the performance hit for using UDFs over Expressions is due to the conversion from user types to InternalRow - this cannot be avoided. Catalyst Expression Performance \u00b6 This diagram illustrates the overhead of cost of using Expressions using a simulated complexity of rule suites with increasing number of column checks ( c here is the column number, for a simple even check ): ( $c % 2) = 0 This measurement against 1k rows shows for the last column 230ms for 27 rules each with 27 columns applied, i.e. 0.23 ms per row for 84 rules total (albeit simple rules) on a single 4 core machine (24G heap). Orange representing the default compiled evaluations. However, this doesn't illustrate very well how things can scale. Running the 27 rules against 1m rows we see: with a mean time of 80,562ms for 1m rows that's 0.08ms per row for 27 rules, again orange representing the default options for compilation. Conversely, the same test run against 1m rows without rules has a mean of 14,052 - so 66,510ms overhead for processing 27m rules (i.e. 0.0025ms per simple rule). Stepping the complexity up a bit to 150 columns at 100k (24G ram) with a baseline no rules time of 15,847ms. Running with rules gives: so for compiled at a mean of 174,583ms we have 15m rules run at 0.011ms per rule. So although increased rule count obviously generates more work the overhead is still low per each rule even with larger counts and the benefit of the default (orange) compilation is visible (see the note at the bottom for when this may not be the case). When using RuleEngineRunners you should try to re-use output expressions (RunOnPassProcessor) wherever possible to improve performance. Sometimes Interpreted Is Better For very large complex rules (tested sample is 1k rules with over 50k expressions - over 30s compilation for a show and write) compilation can dominate time, as such you can set forceRunnerEval to true on RuleRunner and RuleEngineRunner to skip compilation. While compilation can be slow the execution is heavily optimised with minimal memory allocation, as such you should balance this out when using huge RuleSuites. Disabling compilation entirely is not a great idea Disabled generation, via ruleRunner ( ruleSuite , compileEvals = false , forceRunnerEval = true ) , takes 208,518ms for 150 rules over 100k data - 34s longer than the default, this of course adds up fast over millions of rows.","title":"Evaluation Method"},{"location":"background/evaluation_method/#how-should-rules-be-evaluated","text":"Performance wise there is a clear winner as to approach for generating results: The green row is using the map function which is unfortunately the most straightforward to program. The blue is the baseline of processing a row without DQ and the orange is using withColumn. withColumn can use UDFs or inbuilt Catalyst style functions - the latter giving better performance and ability to more naturally integrate with spark, this review echos the findings and hinting at the effects of catalyst. Overall storage winner is nested columns , it has lower storage costs, is as fast as json to serialize (via an Expression) and faster to query with predicate push down support for faster filtering. Details of the analysis are below. Note Using withColumn is strongly discouraged, it very quickly introduces performance issues in spark code, prefer to use select and the Quality transform functions. A large part of the performance hit for using UDFs over Expressions is due to the conversion from user types to InternalRow - this cannot be avoided.","title":"How should rules be evaluated?"},{"location":"background/evaluation_method/#catalyst-expression-performance","text":"This diagram illustrates the overhead of cost of using Expressions using a simulated complexity of rule suites with increasing number of column checks ( c here is the column number, for a simple even check ): ( $c % 2) = 0 This measurement against 1k rows shows for the last column 230ms for 27 rules each with 27 columns applied, i.e. 0.23 ms per row for 84 rules total (albeit simple rules) on a single 4 core machine (24G heap). Orange representing the default compiled evaluations. However, this doesn't illustrate very well how things can scale. Running the 27 rules against 1m rows we see: with a mean time of 80,562ms for 1m rows that's 0.08ms per row for 27 rules, again orange representing the default options for compilation. Conversely, the same test run against 1m rows without rules has a mean of 14,052 - so 66,510ms overhead for processing 27m rules (i.e. 0.0025ms per simple rule). Stepping the complexity up a bit to 150 columns at 100k (24G ram) with a baseline no rules time of 15,847ms. Running with rules gives: so for compiled at a mean of 174,583ms we have 15m rules run at 0.011ms per rule. So although increased rule count obviously generates more work the overhead is still low per each rule even with larger counts and the benefit of the default (orange) compilation is visible (see the note at the bottom for when this may not be the case). When using RuleEngineRunners you should try to re-use output expressions (RunOnPassProcessor) wherever possible to improve performance. Sometimes Interpreted Is Better For very large complex rules (tested sample is 1k rules with over 50k expressions - over 30s compilation for a show and write) compilation can dominate time, as such you can set forceRunnerEval to true on RuleRunner and RuleEngineRunner to skip compilation. While compilation can be slow the execution is heavily optimised with minimal memory allocation, as such you should balance this out when using huge RuleSuites. Disabling compilation entirely is not a great idea Disabled generation, via ruleRunner ( ruleSuite , compileEvals = false , forceRunnerEval = true ) , takes 208,518ms for 150 rules over 100k data - 34s longer than the default, this of course adds up fast over millions of rows.","title":"Catalyst Expression Performance"},{"location":"background/storage_method/","text":"How should rule results be stored? - JSON vs Structures \u00b6 Note While Jackson is faster than circe serialization for JSON it doens't serialize easily so only used for comparison as its the fastest possible serialization framework. UDF Created Structures \u00b6 When serializing rule results to Nested Rows via UDF struct creation (shown as Orange) the results are very expensive, the more complex the rule setup the worse the performance. In comparison Jackson (shown as blue) keeps a low cost as it's just a string (the cost instead is in parsing, storage and filtering) Expression Created Structures \u00b6 When serializing rule results with a custom Expression (shown as orange, using eval only - without custom compilation), Jackson (shown as blue) based serialisation looses it's clear lead with Expressions closing the gap as complexity increases: Filtering Costs \u00b6 Filtering on a nested column with deep queries (shown in red) is as expected faster the same query with a json structure. Nested predicates can be pushed down to the underlying storage for efficient querying. Note Depending on the Databricks runtime used the benefit from seperating the overallResult field to a top level field can be 10-20% faster. While each new release of Spark and DBR closes this gap it is recommended to use addOverallResultsAndDetailsF to split the fields. This not only improves filter speed but also benefits with a simpler filter sql. Structure Model - storage costs \u00b6 A naive structure representing RuleSuite, RuleSet and Rule results is actually less efficient than storage of JSON, however the current compressed model used by Quality has low overhead for even complex results.","title":"Storage Method"},{"location":"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures","text":"Note While Jackson is faster than circe serialization for JSON it doens't serialize easily so only used for comparison as its the fastest possible serialization framework.","title":"How should rule results be stored? -  JSON vs Structures"},{"location":"background/storage_method/#udf-created-structures","text":"When serializing rule results to Nested Rows via UDF struct creation (shown as Orange) the results are very expensive, the more complex the rule setup the worse the performance. In comparison Jackson (shown as blue) keeps a low cost as it's just a string (the cost instead is in parsing, storage and filtering)","title":"UDF Created Structures"},{"location":"background/storage_method/#expression-created-structures","text":"When serializing rule results with a custom Expression (shown as orange, using eval only - without custom compilation), Jackson (shown as blue) based serialisation looses it's clear lead with Expressions closing the gap as complexity increases:","title":"Expression Created Structures"},{"location":"background/storage_method/#filtering-costs","text":"Filtering on a nested column with deep queries (shown in red) is as expected faster the same query with a json structure. Nested predicates can be pushed down to the underlying storage for efficient querying. Note Depending on the Databricks runtime used the benefit from seperating the overallResult field to a top level field can be 10-20% faster. While each new release of Spark and DBR closes this gap it is recommended to use addOverallResultsAndDetailsF to split the fields. This not only improves filter speed but also benefits with a simpler filter sql.","title":"Filtering Costs"},{"location":"background/storage_method/#structure-model-storage-costs","text":"A naive structure representing RuleSuite, RuleSet and Rule results is actually less efficient than storage of JSON, however the current compressed model used by Quality has low overhead for even complex results.","title":"Structure Model - storage costs"},{"location":"getting_started/","text":"Building The Library \u00b6 fork, use the Scala dev environment of your choice, or build directly using Maven Building via commandline \u00b6 For OSS versions (non Databricks runtime - dbr): mvn --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd = true -DdeployAtEnd = true -DskipTests install -P Spark321 but dbr versions will not be able to run tests from the command line (typically not an issue in intellij): mvn --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd = true -DdeployAtEnd = true -DskipTests clean install -P 10 .4.dbr You may also build the shaded uber test jar for easy testing in Spark clusters for each profile: mvn -f testShades/pom.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd = true -DdeployAtEnd = true -Dmaven.test.skip = true clean install -P 10 .4.dbr The uber test jar artefact starts with 'quality_testshade_' instead of just 'quality_' and is located in the testShades/target/ directory of a given build. This is also true for the artefacts of a runtime build job within a full build gitlab pipeline. All of the required jar's are shaded so you can quickly jump into using Quality in notebooks for example . Running the tests \u00b6 As with any local Spark development, in order to run the tests you must have the vcredist 2010 and winutils packages installed, for Spark 2.4.6 and 3.0 it can be downloaded from here . If you are using 3.1.2 or 3.2 download both the dll and exe from here and ensure that not only is the HADOOP_HOME defined but that the bin directory within it is on the PATH, you may need to restart Intellij. Also ensure only the correct target Maven profile and source directories are enabled in your IDE of choice. The performance tests are not automated and must be manually run when needed. Build tool dependencies \u00b6 Quality is cross compiled for different versions of Spark, Scala and runtimes such as Databricks. The format for artefacts is: quality_RUNTIME_SPARKCOMPATVERSION_SCALACOMPATVERSION-VERSION.jar e.g. quality_3.3.0.oss_3.3_2.12-0.7.0-SNAPSHOT.jar The build poms generate those variables via maven profiles, but you are advised to use properties to configure e.g. for Maven: <dependency> <groupId> com.sparkutils </groupId> <artifactId> quality_${qualityRuntime}${sparkShortVersion}_${scalaCompatVersion} </artifactId> <version> ${qualityVersion} </version> </dependency> The full list of supported runtimes is below: Spark Version sparkShortVersion qualityRuntime scalaCompatVersion 2.4.6 2.4 2.11 3.0.3 3.0 2.12 3.1.2 3.1 2.12 3.1.2 3.1 9.1.dbr_ 2.12 3.2.0 3.2 2.12 3.2.0 3.2 10.2.dbr_ 2.12 3.2.1 3.2 3.2.1.oss_ 2.12 3.2.1 3.2 10.4.dbr_ 2.12 3.3.0 3.3 3.3.0.oss_ 2.12 3.3.0 3.3 11.0.dbr_ 2.12 Developing for a Databricks Runtime \u00b6 As there are many compatibility issues that Quality works around between the various Spark runtimes and their Databricks equivalents you will need to use two different runtimes when you do local testing (and of course you should do that): <properties> <qualityVersion> 0.7.0-SNAPSHOT </qualityVersion> <qualityTestPrefix> 3.2.1.oss_ </qualityTestPrefix> <qualityDatabricksPrefix> 10.4.dbr_ </qualityDatabricksPrefix> <sparkShortVersion> 3.2 </sparkShortVersion> <scalaCompatVersion> 2.12 </scalaCompatVersion> </properties> <dependencies> <dependency> <groupId> com.sparkutils. </groupId> <artifactId> quality_${qualityTestPrefix}${sparkShortVersion}_${scalaCompatVersion} </artifactId> <version> ${qualityVersion} </version> <scope> test </scope> </dependency> <dependency> <groupId> com.sparkutils </groupId> <artifactId> quality_${qualityDatabricksPrefix}${sparkShortVersion}_${scalaCompatVersion} </artifactId> <version> ${qualityVersion} </version> <scope> compile </scope> </dependency> </dependencies> That horrific looking \".\" on the test groupId is required to get Maven 3 to use different versions many thanks for finding this Zheng . It's safe to assume better build tools like gradle / sbt do not need such hackery. The known combinations requiring this approach is below: Spark Version sparkShortVersion qualityTestPrefix qualityDatabricksPrefix scalaCompatVersion 3.2.1 3.2 3.2.1.oss_ 10.4.dbr_ 2.12 3.3.0 3.3 3.3.0.oss_ 11.0.dbr_ 2.12 2.4 Support requires 2.4.6 or Janino 3.0.16 \u00b6 Due to Janino #90 using 2.4.5 directly will bring in 3.0.9 janino which can cause VerifyErrors, use 2.4.6 if you can't use a 3.x Spark.","title":"Building and Setting Up"},{"location":"getting_started/#building-the-library","text":"fork, use the Scala dev environment of your choice, or build directly using Maven","title":"Building The Library"},{"location":"getting_started/#building-via-commandline","text":"For OSS versions (non Databricks runtime - dbr): mvn --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd = true -DdeployAtEnd = true -DskipTests install -P Spark321 but dbr versions will not be able to run tests from the command line (typically not an issue in intellij): mvn --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd = true -DdeployAtEnd = true -DskipTests clean install -P 10 .4.dbr You may also build the shaded uber test jar for easy testing in Spark clusters for each profile: mvn -f testShades/pom.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd = true -DdeployAtEnd = true -Dmaven.test.skip = true clean install -P 10 .4.dbr The uber test jar artefact starts with 'quality_testshade_' instead of just 'quality_' and is located in the testShades/target/ directory of a given build. This is also true for the artefacts of a runtime build job within a full build gitlab pipeline. All of the required jar's are shaded so you can quickly jump into using Quality in notebooks for example .","title":"Building via commandline"},{"location":"getting_started/#running-the-tests","text":"As with any local Spark development, in order to run the tests you must have the vcredist 2010 and winutils packages installed, for Spark 2.4.6 and 3.0 it can be downloaded from here . If you are using 3.1.2 or 3.2 download both the dll and exe from here and ensure that not only is the HADOOP_HOME defined but that the bin directory within it is on the PATH, you may need to restart Intellij. Also ensure only the correct target Maven profile and source directories are enabled in your IDE of choice. The performance tests are not automated and must be manually run when needed.","title":"Running the tests"},{"location":"getting_started/#build-tool-dependencies","text":"Quality is cross compiled for different versions of Spark, Scala and runtimes such as Databricks. The format for artefacts is: quality_RUNTIME_SPARKCOMPATVERSION_SCALACOMPATVERSION-VERSION.jar e.g. quality_3.3.0.oss_3.3_2.12-0.7.0-SNAPSHOT.jar The build poms generate those variables via maven profiles, but you are advised to use properties to configure e.g. for Maven: <dependency> <groupId> com.sparkutils </groupId> <artifactId> quality_${qualityRuntime}${sparkShortVersion}_${scalaCompatVersion} </artifactId> <version> ${qualityVersion} </version> </dependency> The full list of supported runtimes is below: Spark Version sparkShortVersion qualityRuntime scalaCompatVersion 2.4.6 2.4 2.11 3.0.3 3.0 2.12 3.1.2 3.1 2.12 3.1.2 3.1 9.1.dbr_ 2.12 3.2.0 3.2 2.12 3.2.0 3.2 10.2.dbr_ 2.12 3.2.1 3.2 3.2.1.oss_ 2.12 3.2.1 3.2 10.4.dbr_ 2.12 3.3.0 3.3 3.3.0.oss_ 2.12 3.3.0 3.3 11.0.dbr_ 2.12","title":"Build tool dependencies"},{"location":"getting_started/#developing-for-a-databricks-runtime","text":"As there are many compatibility issues that Quality works around between the various Spark runtimes and their Databricks equivalents you will need to use two different runtimes when you do local testing (and of course you should do that): <properties> <qualityVersion> 0.7.0-SNAPSHOT </qualityVersion> <qualityTestPrefix> 3.2.1.oss_ </qualityTestPrefix> <qualityDatabricksPrefix> 10.4.dbr_ </qualityDatabricksPrefix> <sparkShortVersion> 3.2 </sparkShortVersion> <scalaCompatVersion> 2.12 </scalaCompatVersion> </properties> <dependencies> <dependency> <groupId> com.sparkutils. </groupId> <artifactId> quality_${qualityTestPrefix}${sparkShortVersion}_${scalaCompatVersion} </artifactId> <version> ${qualityVersion} </version> <scope> test </scope> </dependency> <dependency> <groupId> com.sparkutils </groupId> <artifactId> quality_${qualityDatabricksPrefix}${sparkShortVersion}_${scalaCompatVersion} </artifactId> <version> ${qualityVersion} </version> <scope> compile </scope> </dependency> </dependencies> That horrific looking \".\" on the test groupId is required to get Maven 3 to use different versions many thanks for finding this Zheng . It's safe to assume better build tools like gradle / sbt do not need such hackery. The known combinations requiring this approach is below: Spark Version sparkShortVersion qualityTestPrefix qualityDatabricksPrefix scalaCompatVersion 3.2.1 3.2 3.2.1.oss_ 10.4.dbr_ 2.12 3.3.0 3.3 3.3.0.oss_ 11.0.dbr_ 2.12","title":"Developing for a Databricks Runtime"},{"location":"getting_started/#24-support-requires-246-or-janino-3016","text":"Due to Janino #90 using 2.4.5 directly will bring in 3.0.9 janino which can cause VerifyErrors, use 2.4.6 if you can't use a 3.x Spark.","title":"2.4 Support requires 2.4.6 or Janino 3.0.16"},{"location":"getting_started/a_first_rulesuite/","text":"Defining & Running your first RuleSuite \u00b6 import com . sparkutils . quality . _ // setup all the Quality sql functions registerQualityFunctions () // define a rule suite val rules = RuleSuite ( rsId , Seq ( RuleSet ( Id ( 50 , 1 ), Seq ( Rule ( Id ( 100 , 1 ), ExpressionRule ( \"a % 2 == 0\" )), Rule ( Id ( 100 , 2 ), ExpressionRule ( \"b + 20 < 10\" )), Rule ( Id ( 100 , 3 ), ExpressionRule ( \"(100 * c) + d < e\" )) )), RuleSet ( Id ( 50 , 2 ), Seq ( Rule ( Id ( 100 , 5 ), ExpressionRule ( \"e > 60 or e < 30\" ))... )), RuleSet ( Id ( 50 , 3 ), Seq ( Rule ( Id ( 100 , 9 ), ExpressionRule ( \"i = 5\" )), ... )) ), Seq ( LambdaFunction ( \"isReallyNull\" , \"param -> isNull(param)\" , Id ( 200 , 134 )), LambdaFunction ( \"isGreaterThan\" , \"(a, b) -> a > b\" , Id ( 201 , 131 )) )) // add the ruleRunner expression to the DataFrame val withEvaluatedRulesDF = sparkSession . read . parquet (...). withColumn ( \"DataQuality\" , ruleRunner ( rules )) withEvaluatedRulesDF . write . ... // or show, or count, or some other action Your expressions used, in dq/triggers, output expressions (for Rules and Folder) and lambda functions can contain any valid SQL that does not include Nondeterministic functions such as rand(), uuid() or indeed the Quality random and unique_id() functions. withColumn is BAD - how else can I add columns? \u00b6 I understand repeatedly calling withColumn/withColumnRenamed can cause performance issues due to excessive projections but how else can I add a RuleSuite in Spark? // read a file and apply the rules storing results in the column DataQuality sparkSession . read . parquet ( \"theFilePath\" ). transform ( addDataQualityF ( rules , \"DataQuality\" )) // read a file and apply the rules storing the overall result and details in the columns overallResult, dataQualityResults sparkSession . read . parquet ( \"theFilePath\" ). transform ( addOverallResultsAndDetailsF ( rules , \"overallResult\" , \"dataQualityResults\" )) The transform functions allow easy chaining of operations on DataFrames. However you can equally use the non \"xxxxxF\" functions such as addOverallResultsAndDetails with the same names to directly add columns and rule processing. Filtering the Results \u00b6 The two most common cases for running DQ rules is to report on and filter out bad rows. Filtering can be implemented for a RuleSuiteResult with: withEvaluatedRulesDF . filter ( \"DataQuality.overallResult = passed()\" ) Getting all of the rule results can be implemented with the flattenResults function: val exploded = withEvaluatedRulesDF . select ( expr ( \"*\" ), expr ( \"explode(flattenResults(DataQuality))\" ). as ( \"struct\" )). select ( \"*\" , \"struct.*\" ) Flatten results unpacks the resulting structure, including unpacking all the Id and Versions Ints combined into the single LongType for storage.","title":"Defining & Running your first RuleSuite"},{"location":"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite","text":"import com . sparkutils . quality . _ // setup all the Quality sql functions registerQualityFunctions () // define a rule suite val rules = RuleSuite ( rsId , Seq ( RuleSet ( Id ( 50 , 1 ), Seq ( Rule ( Id ( 100 , 1 ), ExpressionRule ( \"a % 2 == 0\" )), Rule ( Id ( 100 , 2 ), ExpressionRule ( \"b + 20 < 10\" )), Rule ( Id ( 100 , 3 ), ExpressionRule ( \"(100 * c) + d < e\" )) )), RuleSet ( Id ( 50 , 2 ), Seq ( Rule ( Id ( 100 , 5 ), ExpressionRule ( \"e > 60 or e < 30\" ))... )), RuleSet ( Id ( 50 , 3 ), Seq ( Rule ( Id ( 100 , 9 ), ExpressionRule ( \"i = 5\" )), ... )) ), Seq ( LambdaFunction ( \"isReallyNull\" , \"param -> isNull(param)\" , Id ( 200 , 134 )), LambdaFunction ( \"isGreaterThan\" , \"(a, b) -> a > b\" , Id ( 201 , 131 )) )) // add the ruleRunner expression to the DataFrame val withEvaluatedRulesDF = sparkSession . read . parquet (...). withColumn ( \"DataQuality\" , ruleRunner ( rules )) withEvaluatedRulesDF . write . ... // or show, or count, or some other action Your expressions used, in dq/triggers, output expressions (for Rules and Folder) and lambda functions can contain any valid SQL that does not include Nondeterministic functions such as rand(), uuid() or indeed the Quality random and unique_id() functions.","title":"Defining &amp; Running your first RuleSuite"},{"location":"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns","text":"I understand repeatedly calling withColumn/withColumnRenamed can cause performance issues due to excessive projections but how else can I add a RuleSuite in Spark? // read a file and apply the rules storing results in the column DataQuality sparkSession . read . parquet ( \"theFilePath\" ). transform ( addDataQualityF ( rules , \"DataQuality\" )) // read a file and apply the rules storing the overall result and details in the columns overallResult, dataQualityResults sparkSession . read . parquet ( \"theFilePath\" ). transform ( addOverallResultsAndDetailsF ( rules , \"overallResult\" , \"dataQualityResults\" )) The transform functions allow easy chaining of operations on DataFrames. However you can equally use the non \"xxxxxF\" functions such as addOverallResultsAndDetails with the same names to directly add columns and rule processing.","title":"withColumn is BAD - how else can I add columns?"},{"location":"getting_started/a_first_rulesuite/#filtering-the-results","text":"The two most common cases for running DQ rules is to report on and filter out bad rows. Filtering can be implemented for a RuleSuiteResult with: withEvaluatedRulesDF . filter ( \"DataQuality.overallResult = passed()\" ) Getting all of the rule results can be implemented with the flattenResults function: val exploded = withEvaluatedRulesDF . select ( expr ( \"*\" ), expr ( \"explode(flattenResults(DataQuality))\" ). as ( \"struct\" )). select ( \"*\" , \"struct.*\" ) Flatten results unpacks the resulting structure, including unpacking all the Id and Versions Ints combined into the single LongType for storage.","title":"Filtering the Results"},{"location":"getting_started/flavours/","text":"Quality has three main flavours with sprinklings of other Quality ingredients like the sql function suite . These flavours are provided by three \"runners\" which add a Column to a Spark Dataset/Dataframe. Quality / QualityData - ruleRunner \u00b6 Execute SQL based data validation rules, capture all the results and store them with your data for easy and fast access. Example Usage: Validating in-bound data or the results of a calculation. What is stored: QualityRules - ruleEngineRunner \u00b6 QualityRules extends the base Quality framework to provide the ability to generate output based on a single SQL rule matching the input data. Effectively an auditable large scale SQL case statement. Conceptually trigger rules are the when and Output rules are the then ordered by salience. Example Usage: Derivation Logic. What is stored: QualityFolder - ruleFolderRunner \u00b6 QualityFolder extends QualityRules providing the ability to change values of attributes based on any number of SQL rules matching the input data. Unlike QualityRules which uses salience to select only one Output expression, Folder uses salience to order the execution of all the matching Trigger's paired Output Expressions - folding the results as it goes. Example Usage: Correction of in-bound data to enable subsequent calculators to process, defaulting etc. What is stored:","title":"Those are some Quality flavours"},{"location":"getting_started/flavours/#quality-qualitydata-rulerunner","text":"Execute SQL based data validation rules, capture all the results and store them with your data for easy and fast access. Example Usage: Validating in-bound data or the results of a calculation. What is stored:","title":"Quality / QualityData - ruleRunner"},{"location":"getting_started/flavours/#qualityrules-ruleenginerunner","text":"QualityRules extends the base Quality framework to provide the ability to generate output based on a single SQL rule matching the input data. Effectively an auditable large scale SQL case statement. Conceptually trigger rules are the when and Output rules are the then ordered by salience. Example Usage: Derivation Logic. What is stored:","title":"QualityRules - ruleEngineRunner"},{"location":"getting_started/flavours/#qualityfolder-rulefolderrunner","text":"QualityFolder extends QualityRules providing the ability to change values of attributes based on any number of SQL rules matching the input data. Unlike QualityRules which uses salience to select only one Output expression, Folder uses salience to order the execution of all the matching Trigger's paired Output Expressions - folding the results as it goes. Example Usage: Correction of in-bound data to enable subsequent calculators to process, defaulting etc. What is stored:","title":"QualityFolder - ruleFolderRunner"},{"location":"getting_started/key_functions/","text":"Key SQL Functions to use in your Rules \u00b6 Expressions with constants \u00b6 passed() - the value representing a passed rule failed() - the value representing a failed rule softFailed() - the value representing a failed rule which doesn't break the bank disabledRule() - the value representing a rule which has been disabled and should be ignored Expressions which take expression parameters \u00b6 probability(x) - returns the probability (between 0.0 for a fail and 1.0 for pass) of a rule result packInts(lower, higher) - returns a Long with both the lower and higher int's packed in, used for id matching softFail( x ) - if the expression doesn't result in a Passed it returns softFailed() which does not trigger an overall failed() RuleSuite, this is ideal for when you want to flag a rule as passing a test you wish to query on later but do not care if it doesn't pass. It can be treated as a \"warn\" or passed() expression. ruleSuiteResultDetails( ruleSuiteResult ) - separates the RuleSuiteResult.overallResult from the rest of the structure should it be needed typically this is done via the addOverallResultsAndDetailsF","title":"Key SQL Functions to use in your Rules"},{"location":"getting_started/key_functions/#key-sql-functions-to-use-in-your-rules","text":"","title":"Key SQL Functions to use in your Rules"},{"location":"getting_started/key_functions/#expressions-with-constants","text":"passed() - the value representing a passed rule failed() - the value representing a failed rule softFailed() - the value representing a failed rule which doesn't break the bank disabledRule() - the value representing a rule which has been disabled and should be ignored","title":"Expressions with constants"},{"location":"getting_started/key_functions/#expressions-which-take-expression-parameters","text":"probability(x) - returns the probability (between 0.0 for a fail and 1.0 for pass) of a rule result packInts(lower, higher) - returns a Long with both the lower and higher int's packed in, used for id matching softFail( x ) - if the expression doesn't result in a Passed it returns softFailed() which does not trigger an overall failed() RuleSuite, this is ideal for when you want to flag a rule as passing a test you wish to query on later but do not care if it doesn't pass. It can be treated as a \"warn\" or passed() expression. ruleSuiteResultDetails( ruleSuiteResult ) - separates the RuleSuiteResult.overallResult from the rest of the structure should it be needed typically this is done via the addOverallResultsAndDetailsF","title":"Expressions which take expression parameters"},{"location":"getting_started/running_on_databricks/","text":"The aim is to have explicit support for LTS', other interim versions may be supported as needed. Running 3.1 builds on Databricks Runtime 9.1 LTS \u00b6 Use the 9.1.dbr build / profile, the artefact name will also end with _9.1.dbr. OSS 3.1 do not need to worry about this and should not use this profile. Databricks has back-ported TreePattern including the final nodePatterns in HigherOrderFunction and 3.2's Conf class. As such very old versions of non-opensource Quality (<=0.5.0) will fail with AbstractMethodError's when lambda's are used are 9.1 as the OSS binary version of HigherOrderFunction does not have nodePattern. Similarly the quality_testshade jar must use the 9.1.dbr version due to Conf changes. The 9.1.dbr build class files are built on the fake TreePattern and HigherOrderFunction present in the 9.1.dbr-scala source directory, they are however removed in the jar. ResolveTableValuedFunctions and ResolveCreateNamedStruct are removed from resolveWith as they are binary incompatible with OSS. This does not seem to effect building namedstructs using resolveWith. Running 3.2.1 builds on Databricks Runtime 10.4 \u00b6 Use the 10.4.dbr build / profile, the artefact name will also end with _10.4.dbr. DBR 10.4 backports canonicalisation changes which allow Quality and any other code using explode and arrays to functionally run. Performance is still known to be affected. These fixes are not present in the 3.2.1 OSS release, although performance improvements may be back-ported. ResolveTables, ResolveAlterTableCommands and ResolveHigherOrderFunctions are removed from resolveWith as they are binary incompatible with OSS. Only 10.4 LTS is supported 10.2 version support was removed in 0.0.1 Running 3.3.0 builds on Databricks Runtime 11.3 LTS \u00b6 Use the 11.3.dbr build / profile, the artefact name will also end with _11.3.dbr. Due to a backport of SPARK-39316 only 11.3 LTS is supported (although likely 11.2 will also run), this changed the result type of Add causing incorrect aggregation precision via aggExpr (Sum and Average stopped using Add for this reason). Testing out Quality via Notebooks \u00b6 You can use the quality_testshade artefact jar to upload into your workspace / notebook env. When using Databricks make sure to use the appropriate _Version.dbr builds. Then using: import com . sparkutils . quality . tests . TestSuite import com . sparkutils . qualityTests . SparkTestUtils SparkTestUtils . setPath ( \"path_where_test_files_should_be_generated\" ) TestSuite . runTests in your cell will run through all of the test suite used when building Quality. In Databricks notebooks you can set the path up via: val fileLoc = \"/dbfs/databricks/quality_test\" SparkTestUtils . setPath ( fileLoc ) Ideally at the end of your runs you'll see - after 10 minutes or so and some stdout - for example on DBR 11.3 a run provides: Time: 682.626 OK (210 tests) Finished. Result: Failures: 0. Ignored: 0. Tests run: 210. Time: 682626ms. import com.sparkutils.quality.tests.TestSuite import com.sparkutils.qualityTests.SparkTestUtils fileLoc: String = /dbfs/databricks/quality_test","title":"Running Quality on Databricks"},{"location":"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts","text":"Use the 9.1.dbr build / profile, the artefact name will also end with _9.1.dbr. OSS 3.1 do not need to worry about this and should not use this profile. Databricks has back-ported TreePattern including the final nodePatterns in HigherOrderFunction and 3.2's Conf class. As such very old versions of non-opensource Quality (<=0.5.0) will fail with AbstractMethodError's when lambda's are used are 9.1 as the OSS binary version of HigherOrderFunction does not have nodePattern. Similarly the quality_testshade jar must use the 9.1.dbr version due to Conf changes. The 9.1.dbr build class files are built on the fake TreePattern and HigherOrderFunction present in the 9.1.dbr-scala source directory, they are however removed in the jar. ResolveTableValuedFunctions and ResolveCreateNamedStruct are removed from resolveWith as they are binary incompatible with OSS. This does not seem to effect building namedstructs using resolveWith.","title":"Running 3.1 builds on Databricks Runtime 9.1 LTS"},{"location":"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104","text":"Use the 10.4.dbr build / profile, the artefact name will also end with _10.4.dbr. DBR 10.4 backports canonicalisation changes which allow Quality and any other code using explode and arrays to functionally run. Performance is still known to be affected. These fixes are not present in the 3.2.1 OSS release, although performance improvements may be back-ported. ResolveTables, ResolveAlterTableCommands and ResolveHigherOrderFunctions are removed from resolveWith as they are binary incompatible with OSS. Only 10.4 LTS is supported 10.2 version support was removed in 0.0.1","title":"Running 3.2.1 builds on Databricks Runtime 10.4"},{"location":"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts","text":"Use the 11.3.dbr build / profile, the artefact name will also end with _11.3.dbr. Due to a backport of SPARK-39316 only 11.3 LTS is supported (although likely 11.2 will also run), this changed the result type of Add causing incorrect aggregation precision via aggExpr (Sum and Average stopped using Add for this reason).","title":"Running 3.3.0 builds on Databricks Runtime 11.3 LTS"},{"location":"getting_started/running_on_databricks/#testing-out-quality-via-notebooks","text":"You can use the quality_testshade artefact jar to upload into your workspace / notebook env. When using Databricks make sure to use the appropriate _Version.dbr builds. Then using: import com . sparkutils . quality . tests . TestSuite import com . sparkutils . qualityTests . SparkTestUtils SparkTestUtils . setPath ( \"path_where_test_files_should_be_generated\" ) TestSuite . runTests in your cell will run through all of the test suite used when building Quality. In Databricks notebooks you can set the path up via: val fileLoc = \"/dbfs/databricks/quality_test\" SparkTestUtils . setPath ( fileLoc ) Ideally at the end of your runs you'll see - after 10 minutes or so and some stdout - for example on DBR 11.3 a run provides: Time: 682.626 OK (210 tests) Finished. Result: Failures: 0. Ignored: 0. Tests run: 210. Time: 682626ms. import com.sparkutils.quality.tests.TestSuite import com.sparkutils.qualityTests.SparkTestUtils fileLoc: String = /dbfs/databricks/quality_test","title":"Testing out Quality via Notebooks"},{"location":"getting_started/serializing/","text":"Reading & Writing RuleSuites \u00b6 Typically you'd save the RuleSuite in configuration tables within a Database or Delta or some other easy to edit store. Saving: // The lambda functions from the RuleSuite val lambdaDF = toLambdaDS ( rules ) lambdaDF . write ..... // The rest of the rules val ruleDF = toRuleSuiteDF ( rules ) ruleDF . write ..... The field names used follow the convention of the default Product Encoder but can be renamed as desired. Similarly, reading the rules can be as simple as: val rereadWithoutLambdas = readRulesFromDF ( ruleDF , col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ), col ( \"ruleSetId\" ), col ( \"ruleSetVersion\" ), col ( \"ruleId\" ), col ( \"ruleVersion\" ), col ( \"ruleExpr\" ) ) val reReadLambdas = readLambdasFromDF ( lambdaDF . toDF (), col ( \"name\" ), col ( \"ruleExpr\" ), col ( \"functionId\" ), col ( \"functionVersion\" ), col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ) ) val reReadRuleSuite = integrateLambdas ( rereadWithoutLambdas , reReadLambdas ) The column names used during reading are not assumed and must be specified. Versioned rule datasets \u00b6 The user is completely free to chose their own version management approach, but the design is aimed at immutability and evidencing. To make things easy a simple scheme with library functions in the simpleVersioning package are provided: Rules can be added to rulesets (or indeed new rulesets) with just a single row within the input DF, this must increase the RuleSet AND RuleSuites version: ruleSuiteId ruleSuiteVersion ruleSetId ruleSetVersion ruleId ruleVersion ruleExpr 1 1 1 1 1 1 /* existing rule rows */ true () 1 2 1 2 2 1 /* new rule */ failed () Similarly, you can change a rule by adding a new row which increments the Rule Id's, RuleSet AND RuleSuites versions: ruleSuiteId ruleSuiteVersion ruleSetId ruleSetVersion ruleId ruleVersion ruleExpr 1 1 1 1 1 1 /* existing rule row */ true () 1 2 1 2 1 2 /* new version of the above rule */ failed () To delete a rule you can either use disabled() to flag the rule is inactivated or DELETED to flag the rule to be removed from a RuleSet, as before each version must be incremented: ruleSuiteId ruleSuiteVersion ruleSetId ruleSetVersion ruleId ruleVersion ruleExpr 1 1 1 1 1 1 /* existing rule row */ true () 1 2 1 2 1 2 DELETED OutputExpressions may be re-used with different versions (be it for QualityRules or QualityFolder), each rule row that needs to use a later OutputExpression must increment all of it's Id versions. You may are advised to use lambdas to soften the impact: ruleSuiteId ruleSuiteVersion ruleSetId ruleSetVersion ruleId ruleVersion ruleExpr ruleEngineSalience ruleEngineId ruleEngineVersion 1 1 1 1 1 1 true () 60 100 1 1 2 1 2 1 2 true () 60 100 2 Lambda Expressions for a RuleSuite simply take the latest version for a given lambda id. If you want to delete a lambda (for example you have used a name that is now an official Spark sql function) you can add a DELETED row for a given RuleSuite with a higher version. ruleSuiteId ruleSuiteVersion name functionId functionVersion ruleExpr 1 1 aToTrue 1 1 /** oops */ a -> a 1 1 always1 2 1 a -> 1 1 2 aToTrue 1 2 /** corrected */ a -> true () 1 2 always1 2 2 DELETED To use these you replace the above with: import com . sparkutils . quality . _ import simpleVersioning . _ val rereadWithoutLambdas = readVersionedRulesFromDF ( ruleDF , ... ) val reReadLambdas = readVersionedLambdasFromDF ( lambdaDF . toDF (), ... ) val outputExpressions = readVersionedOutputExpressionsFromDF ( outputDF , ... ) val rereadWithLambdas = integrateVersionedLambdas ( rereadWithoutLambdas , lambdas ) val ( reread , missingOutputExpressions ) = integrateVersionedOutputExpressions ( rereadWithLambdas , outputExpressions ) The \"readVersioned\" functions modify the dataframe per the above logic to create full sets of ruleSuiteId + ruleSuiteVersion pairs. The \"integrateVersioned\" functions will first try the same ruleSuiteId + ruleSuiteVersion pairs and were not present will take the next lowest available version. This runs on the assumption you if didn't need to change any OutputExpressions for a new ruleSuite version why should you need to create fake entries.","title":"Reading & Writing RuleSuites"},{"location":"getting_started/serializing/#reading-writing-rulesuites","text":"Typically you'd save the RuleSuite in configuration tables within a Database or Delta or some other easy to edit store. Saving: // The lambda functions from the RuleSuite val lambdaDF = toLambdaDS ( rules ) lambdaDF . write ..... // The rest of the rules val ruleDF = toRuleSuiteDF ( rules ) ruleDF . write ..... The field names used follow the convention of the default Product Encoder but can be renamed as desired. Similarly, reading the rules can be as simple as: val rereadWithoutLambdas = readRulesFromDF ( ruleDF , col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ), col ( \"ruleSetId\" ), col ( \"ruleSetVersion\" ), col ( \"ruleId\" ), col ( \"ruleVersion\" ), col ( \"ruleExpr\" ) ) val reReadLambdas = readLambdasFromDF ( lambdaDF . toDF (), col ( \"name\" ), col ( \"ruleExpr\" ), col ( \"functionId\" ), col ( \"functionVersion\" ), col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ) ) val reReadRuleSuite = integrateLambdas ( rereadWithoutLambdas , reReadLambdas ) The column names used during reading are not assumed and must be specified.","title":"Reading &amp; Writing RuleSuites"},{"location":"getting_started/serializing/#versioned-rule-datasets","text":"The user is completely free to chose their own version management approach, but the design is aimed at immutability and evidencing. To make things easy a simple scheme with library functions in the simpleVersioning package are provided: Rules can be added to rulesets (or indeed new rulesets) with just a single row within the input DF, this must increase the RuleSet AND RuleSuites version: ruleSuiteId ruleSuiteVersion ruleSetId ruleSetVersion ruleId ruleVersion ruleExpr 1 1 1 1 1 1 /* existing rule rows */ true () 1 2 1 2 2 1 /* new rule */ failed () Similarly, you can change a rule by adding a new row which increments the Rule Id's, RuleSet AND RuleSuites versions: ruleSuiteId ruleSuiteVersion ruleSetId ruleSetVersion ruleId ruleVersion ruleExpr 1 1 1 1 1 1 /* existing rule row */ true () 1 2 1 2 1 2 /* new version of the above rule */ failed () To delete a rule you can either use disabled() to flag the rule is inactivated or DELETED to flag the rule to be removed from a RuleSet, as before each version must be incremented: ruleSuiteId ruleSuiteVersion ruleSetId ruleSetVersion ruleId ruleVersion ruleExpr 1 1 1 1 1 1 /* existing rule row */ true () 1 2 1 2 1 2 DELETED OutputExpressions may be re-used with different versions (be it for QualityRules or QualityFolder), each rule row that needs to use a later OutputExpression must increment all of it's Id versions. You may are advised to use lambdas to soften the impact: ruleSuiteId ruleSuiteVersion ruleSetId ruleSetVersion ruleId ruleVersion ruleExpr ruleEngineSalience ruleEngineId ruleEngineVersion 1 1 1 1 1 1 true () 60 100 1 1 2 1 2 1 2 true () 60 100 2 Lambda Expressions for a RuleSuite simply take the latest version for a given lambda id. If you want to delete a lambda (for example you have used a name that is now an official Spark sql function) you can add a DELETED row for a given RuleSuite with a higher version. ruleSuiteId ruleSuiteVersion name functionId functionVersion ruleExpr 1 1 aToTrue 1 1 /** oops */ a -> a 1 1 always1 2 1 a -> 1 1 2 aToTrue 1 2 /** corrected */ a -> true () 1 2 always1 2 2 DELETED To use these you replace the above with: import com . sparkutils . quality . _ import simpleVersioning . _ val rereadWithoutLambdas = readVersionedRulesFromDF ( ruleDF , ... ) val reReadLambdas = readVersionedLambdasFromDF ( lambdaDF . toDF (), ... ) val outputExpressions = readVersionedOutputExpressionsFromDF ( outputDF , ... ) val rereadWithLambdas = integrateVersionedLambdas ( rereadWithoutLambdas , lambdas ) val ( reread , missingOutputExpressions ) = integrateVersionedOutputExpressions ( rereadWithLambdas , outputExpressions ) The \"readVersioned\" functions modify the dataframe per the above logic to create full sets of ruleSuiteId + ruleSuiteVersion pairs. The \"integrateVersioned\" functions will first try the same ruleSuiteId + ruleSuiteVersion pairs and were not present will take the next lowest available version. This runs on the assumption you if didn't need to change any OutputExpressions for a new ruleSuite version why should you need to create fake entries.","title":"Versioned rule datasets"},{"location":"model/","text":"Rules \u00b6 VersionedIDs are used throughout, changes to a Rule should imply a new Rule version, a new RuleSet version and a new RuleSuite version. RunOnPassProcessor (output expressions) should only be provided when using the ruleEngineRunner and are treated, like Lambdas, as top level unique concepts. You should organise using output expressions wherever possible as it's not only easier to conceptualise but it's also faster. Rule Results \u00b6 SoftFailed results do not cause the RuleSet or RuleSuite to fail DisabledRule results also do not cause the RuleSet or RuleSuite to fail but signal a rule has been disabled upstream Probability results with over 80 percent are deemed to have Passed, you may override this with the RuleSuite.withProbablePass function after creating the RuleSuite. RuleResultWithProcessor is only used when using the ruleEngineRunner and is not returned in the column, rather the result of the expression is - shown above as call to \"data\".","title":"Rule Model"},{"location":"model/#rules","text":"VersionedIDs are used throughout, changes to a Rule should imply a new Rule version, a new RuleSet version and a new RuleSuite version. RunOnPassProcessor (output expressions) should only be provided when using the ruleEngineRunner and are treated, like Lambdas, as top level unique concepts. You should organise using output expressions wherever possible as it's not only easier to conceptualise but it's also faster.","title":"Rules"},{"location":"model/#rule-results","text":"SoftFailed results do not cause the RuleSet or RuleSuite to fail DisabledRule results also do not cause the RuleSet or RuleSuite to fail but signal a rule has been disabled upstream Probability results with over 80 percent are deemed to have Passed, you may override this with the RuleSuite.withProbablePass function after creating the RuleSuite. RuleResultWithProcessor is only used when using the ruleEngineRunner and is not returned in the column, rather the result of the expression is - shown above as call to \"data\".","title":"Rule Results"},{"location":"model/meta/","text":"Meta Rulesets? \u00b6 Quality introduces a \"Meta Ruleset\" approach for added automation. Meta Rule sets evaluate each column of a DataFrame to see if a Rule should be generated for that column. Null checks, type checks etc. may all be applied generically without laboriously copying the rule for each applicable column, just define a single argument lambda expression. In order for this to work and be extensible you require stable ordering for each column used. // if you wish to use Meta Rule Sets val metaRuleSets = readMetaRuleSetsFromDF ( metaRuleDF , // an sql filter of the schema from a provided dataframe - name, //datatype (as DDL) and nullable can be filtered col ( \"columnFilter\" ), // single arg lambda to apply to all fields from the column filter col ( \"ruleExpr\" ), col ( \"ruleSetId\" ), col ( \"ruleSetVersion\" ), col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ) ) // make sure we use the correct rule suites for the dataset, e.g. val filteredRuleSuites : RuleSuiteMap = Map ( ruleSuiteId -> rules ) val theDataframe = sparkSession . read . parquet ( \"theFilePath\" ) // Guarantee each column always returns the same unique position val stablePositionsFromColumnNames : String => Int = ??? // filter theDataframe columns and generate rules for each Meta // RuleSet and re-integrate them val newRuleSuiteMap = integrateMetaRuleSets ( theDataframe , filteredRuleSuites , metaRuleSets , stablePositionsFromColumnNames ) An optional last paramater for integrateMetaRuleSets allows transformation of a generated column dataframe, allowing joins with other lookup tables for the column definition or applicable rules to generate for the column for example.","title":"Meta Rulesets?"},{"location":"model/meta/#meta-rulesets","text":"Quality introduces a \"Meta Ruleset\" approach for added automation. Meta Rule sets evaluate each column of a DataFrame to see if a Rule should be generated for that column. Null checks, type checks etc. may all be applied generically without laboriously copying the rule for each applicable column, just define a single argument lambda expression. In order for this to work and be extensible you require stable ordering for each column used. // if you wish to use Meta Rule Sets val metaRuleSets = readMetaRuleSetsFromDF ( metaRuleDF , // an sql filter of the schema from a provided dataframe - name, //datatype (as DDL) and nullable can be filtered col ( \"columnFilter\" ), // single arg lambda to apply to all fields from the column filter col ( \"ruleExpr\" ), col ( \"ruleSetId\" ), col ( \"ruleSetVersion\" ), col ( \"ruleSuiteId\" ), col ( \"ruleSuiteVersion\" ) ) // make sure we use the correct rule suites for the dataset, e.g. val filteredRuleSuites : RuleSuiteMap = Map ( ruleSuiteId -> rules ) val theDataframe = sparkSession . read . parquet ( \"theFilePath\" ) // Guarantee each column always returns the same unique position val stablePositionsFromColumnNames : String => Int = ??? // filter theDataframe columns and generate rules for each Meta // RuleSet and re-integrate them val newRuleSuiteMap = integrateMetaRuleSets ( theDataframe , filteredRuleSuites , metaRuleSets , stablePositionsFromColumnNames ) An optional last paramater for integrateMetaRuleSets allows transformation of a generated column dataframe, allowing joins with other lookup tables for the column definition or applicable rules to generate for the column for example.","title":"Meta Rulesets?"},{"location":"model/storage/","text":"Storage Model \u00b6 Nested columns, with nested columns, this lets you use Spark SQL to do filters and have predicate pushdown. Sample filter: df . select ( expr ( \"filter(map_values(DataQuality.ruleSetResults), ruleSet -> size(filter(map_values(ruleSet.ruleResults), result -> probability(result) > 0.3 )) > 0)\" ). as ( \"filtered\" )) actual type: struct < id : LongType , overallResult : IntegerType , ruleSetResults : map < LongType , struct < overallResult : IntegerType , ruleResults : map < LongType , IntegerType >>>> Alternatively when creating with addOverallResultsAndDetails you have the overallResult : IntegerType moved to the top level, leaving details : struct < id : LongType , ruleSetResults : map < LongType , struct < overallResult : IntegerType , ruleResults : map < LongType , IntegerType >>>> Where have all the VersionIds and RuleResults gone? \u00b6 In order to optimise storage and marshalling the VersionId parts are packed into a single LongType. RuleResults are similarly encoded into an IntegerType: Failed => FailedInt // 0 SoftFailed => SoftFailedInt // -1 Disabled => DisabledInt // -2 Passed => PassedInt // 100000 Probability(percentage) => (percentage * PassedInt).toInt When the developer wishes to retrieve the objects they may use the encoders directly: // frameless is used to encode import frameless . _ // imports the encoders for RuleSuiteResult import com . sparkutils . quality . implicits . _ // derive an encoder for the pair with a user type and the RuleSuiteResult for a given row implicit val enc = TypedExpressionEncoder [( TestIdLeft , RuleSuiteResult )] // select the fields needed for the user type and the DataQuality result (or details with RuleResult, RuleSuiteResultDetails for seperate overall results and details) val ds = df . selectExpr ( \"named_struct('left_lower', `1`, 'left_higher', `2`)\" , \"DataQuality\" ). as [( TestIdLeft , RuleSuiteResult )] the developer can then interegate the data quality results alongside their relevant data.","title":"Storage Model"},{"location":"model/storage/#storage-model","text":"Nested columns, with nested columns, this lets you use Spark SQL to do filters and have predicate pushdown. Sample filter: df . select ( expr ( \"filter(map_values(DataQuality.ruleSetResults), ruleSet -> size(filter(map_values(ruleSet.ruleResults), result -> probability(result) > 0.3 )) > 0)\" ). as ( \"filtered\" )) actual type: struct < id : LongType , overallResult : IntegerType , ruleSetResults : map < LongType , struct < overallResult : IntegerType , ruleResults : map < LongType , IntegerType >>>> Alternatively when creating with addOverallResultsAndDetails you have the overallResult : IntegerType moved to the top level, leaving details : struct < id : LongType , ruleSetResults : map < LongType , struct < overallResult : IntegerType , ruleResults : map < LongType , IntegerType >>>>","title":"Storage Model"},{"location":"model/storage/#where-have-all-the-versionids-and-ruleresults-gone","text":"In order to optimise storage and marshalling the VersionId parts are packed into a single LongType. RuleResults are similarly encoded into an IntegerType: Failed => FailedInt // 0 SoftFailed => SoftFailedInt // -1 Disabled => DisabledInt // -2 Passed => PassedInt // 100000 Probability(percentage) => (percentage * PassedInt).toInt When the developer wishes to retrieve the objects they may use the encoders directly: // frameless is used to encode import frameless . _ // imports the encoders for RuleSuiteResult import com . sparkutils . quality . implicits . _ // derive an encoder for the pair with a user type and the RuleSuiteResult for a given row implicit val enc = TypedExpressionEncoder [( TestIdLeft , RuleSuiteResult )] // select the fields needed for the user type and the DataQuality result (or details with RuleResult, RuleSuiteResultDetails for seperate overall results and details) val ds = df . selectExpr ( \"named_struct('left_lower', `1`, 'left_higher', `2`)\" , \"DataQuality\" ). as [( TestIdLeft , RuleSuiteResult )] the developer can then interegate the data quality results alongside their relevant data.","title":"Where have all the VersionIds and RuleResults gone?"}],"index":{"fieldVectors":[["title/",[0,6.45]],["text/",[1,1.311,2,2.678,3,2.678,4,0.794,5,3.438,6,2.565,7,3.438,8,3.438,9,3.438,10,1.168,11,2.041,12,2.354,13,1.228,14,0.517,15,2.619,16,2.458,17,2.565,18,2.377,19,1.65,20,2.297,21,2.041,22,2.485,23,1.329,24,2.538,25,4.13,26,1.395,27,1.424,28,2.082,29,1.307,30,1.691,31,2.465,32,3.438,33,2.041,34,1.728,35,2.276,36,2.971,37,1.847,38,2.811,39,1.003,40,2.377,41,2.678,42,2.971,43,2.811,44,1.691,45,1.657,46,1.504,47,1.532,48,2.565,49,1.805,50,1.244,51,1.691,52,3.438,53,2.811,54,2.097,55,2.251,56,2.276,57,0.74,58,2.678,59,1.504,60,3.438,61,2.297,62,2.971,63,3.075,64,2.678,65,3.375,66,3.438,67,2.377,68,5.051,69,1.592,70,2.465,71,2.678,72,2.971,73,1.691,74,3.438,75,1.592,76,1.065,77,3.438,78,2.097,79,2.297,80,2.465,81,2.565,82,2.159,83,3.438,84,4.365,85,2.377,86,2.971,87,2.159,88,1.657,89,1.986,90,1.072,91,3.438,92,2.377,93,1.186,94,2.377,95,1.728,96,3.17,97,3.17,98,2.225,99,2.465,100,2.678,101,1.657,102,1.765,103,1.352,104,2.339,105,3.438,106,2.971,107,1.988,108,3.438,109,3.438,110,2.465,111,1.329,112,3.438,113,2.811,114,1.098,115,1.657,116,2.465,117,1.056,118,1.805,119,2.998,120,2.097,121,1.504,122,2.678,123,2.678,124,2.971,125,3.438,126,3.438,127,2.297]],["title/#quality-001-snapshot",[1,1.052,2,3.157,3,3.157]],["text/#quality-001-snapshot",[5,7.097,6,5.295,7,7.097,8,7.097,9,7.097]],["title/#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale",[1,0.423,10,0.553,11,0.966,12,0.64,13,0.303,14,0.12,15,0.712,16,0.544,17,1.215,18,1.126,19,0.382,20,1.088,21,0.966]],["text/#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale",[12,2.101,13,1.405,14,0.555,15,2.337,16,2.524,19,1.606,22,3.367,23,2.065,24,2.685,25,4.369,26,1.324,27,2.213,28,2.236,29,2.031,30,2.629,31,3.831,32,5.342,33,3.171,34,2.685,35,2.602,36,4.617,37,2.87,38,4.369,39,1.559,40,3.694,41,4.162,42,4.617,43,4.369,44,2.629,45,2.575,46,2.337,47,2.381,48,3.986,49,2.805,50,1.934,51,2.629,52,5.342,53,4.369,54,3.26,55,2.381,56,2.031,57,1.15,58,4.162,59,2.337,60,5.342,61,3.57]],["title/#enhanced-spark-functionality",[19,0.951,26,0.711,62,3.501]],["text/#enhanced-spark-functionality",[12,1.811,14,0.339,15,2.014,16,2.075,19,1.08,24,2.314,25,3.765,26,1.376,28,1.838,35,1.751,55,2.052,56,2.359,63,3.605,64,3.587,65,4.147,66,4.605,67,3.183,68,6.206,69,2.132,70,3.302,71,3.587,72,3.979,73,2.266,74,4.605,75,2.132,76,1.426,77,4.605,78,2.809,79,3.077,80,3.302,81,3.435,82,2.891,83,4.605,84,5.363,85,3.183,86,3.979,87,2.891,88,2.219,89,2.44,90,1.317,91,4.605,92,3.183,93,1.589,94,3.183,95,2.314,96,4.246,97,4.246,98,2.98,99,3.302,100,3.587,101,2.219,102,2.365,103,1.811,104,2.874,105,4.605,106,3.979,107,2.662,108,4.605,109,4.605,110,3.302,111,1.78,112,4.605,113,3.765,114,1.47,115,2.219,116,3.302,117,1.298,118,2.418,119,3.684,120,2.809,121,2.014,122,3.587,123,3.587,124,3.979,125,4.605,126,4.605,127,3.077]],["title/sqlfunctions/",[16,1.355,26,0.711,128,2.544]],["text/sqlfunctions/",[1,0.338,4,1.13,10,0.238,12,0.513,13,0.633,14,0.598,15,0.306,16,0.234,18,0.901,19,0.867,20,0.468,21,0.415,22,0.9,23,1.868,26,1.164,27,0.54,28,1.007,29,1.167,30,0.344,33,0.415,34,0.352,35,0.266,37,1.453,39,1.703,40,0.484,44,0.641,45,1.911,47,1.022,48,0.973,49,0.367,50,1.749,56,0.696,57,1.413,59,0.8,63,0.359,69,0.324,73,0.641,75,1.95,76,1.304,78,1.117,79,0.468,82,1.149,87,0.819,88,1.638,89,0.513,90,1.025,92,0.484,93,0.791,95,1.708,102,1.898,103,0.902,104,1.252,110,2.437,111,1.045,114,1.7,115,1.48,116,1.312,117,1.047,118,0.367,119,0.415,120,0.795,121,1.182,122,0.545,123,0.545,129,1.605,130,2.278,131,1.127,132,1.497,133,0.572,134,0.352,135,1.003,136,0.318,137,0.545,138,1.426,139,1.318,140,2.548,141,0.545,142,0.385,143,0.7,144,0.502,145,0.669,146,0.468,147,0.7,148,2.199,149,1.223,150,0.572,151,0.502,152,0.844,153,0.427,154,1.359,155,1.312,156,0.457,157,0.439,158,3.491,159,1.303,160,0.95,161,1.204,162,0.605,163,0.318,164,0.359,165,0.522,166,1.066,167,0.484,168,1.365,169,0.7,170,1.066,171,1.066,172,1.304,173,1.688,174,1.066,175,0.7,176,0.545,177,0.616,178,0.405,179,0.844,180,1.544,181,0.545,182,1.365,183,0.605,184,1.202,185,1.563,186,1.066,187,1.869,188,0.973,189,1.066,190,2.106,191,1.875,192,1.066,193,0.645,194,0.645,195,0.7,196,0.94,197,1.422,198,1.605,199,1.487,200,0.628,201,1.585,202,0.453,203,0.376,204,0.545,205,0.7,206,0.7,207,1.688,208,1.202,209,1.616,210,1.184,211,0.819,212,1.698,213,1.003,214,1.388,215,0.871,216,2.115,217,0.819,218,1.524,219,1.202,220,0.887,221,2.831,222,1.202,223,2.033,224,0.94,225,0.7,226,0.7,227,1.644,228,2.35,229,0.57,230,0.7,231,1.805,232,1.497,233,2.134,234,0.7,235,1.44,236,1.51,237,0.312,238,0.645,239,0.7,240,0.7,241,1.884,242,1.581,243,0.887,244,0.405,245,0.645,246,0.7,247,1.062,248,0.55,249,0.605,250,0.645,251,1.875,252,2.255,253,2.832,254,2.555,255,2.555,256,2.392,257,0.545,258,0.7,259,0.7,260,0.545,261,0.7,262,0.7,263,1.202,264,0.774,265,0.902,266,0.7,267,0.7,268,1.875,269,0.645,270,1.202,271,2.321,272,2.392,273,2.429,274,0.376,275,0.7,276,1.066,277,0.7,278,0.7,279,2.211,280,1.83,281,0.584,282,0.7,283,0.7,284,1.304,285,1.304,286,1.304,287,0.7,288,0.502,289,1.83,290,1.365,291,0.735,292,0.7,293,0.7,294,0.344,295,0.605,296,0.7,297,0.522,298,0.7,299,0.7,300,0.717,301,0.7,302,0.645,303,0.7,304,1.202,305,1.422,306,0.7,307,0.7,308,0.7,309,0.795,310,0.983,311,0.7,312,1.426,313,0.871,314,1.822,315,2.321,316,1.202,317,0.7,318,1.928,319,0.7,320,0.7,321,0.7,322,0.7,323,0.7,324,0.7,325,0.605,326,0.7,327,1.875,328,1.312,329,0.7,330,0.7,331,1.688,332,0.605,333,0.7,334,0.685,335,1.016,336,0.468,337,1.543,338,0.605,339,0.645,340,1.497,341,0.7,342,0.453,343,1.581,344,0.7,345,0.605,346,0.453,347,0.453,348,0.605,349,1.202,350,0.7,351,0.7,352,1.939,353,0.901,354,0.795,355,0.453,356,0.337,357,0.468,358,1.066,359,2.493,360,1.688,361,2.115,362,0.7,363,0.7,364,0.605,365,0.754,366,0.973,367,1.127,368,1.688,369,0.468,370,0.56,371,0.545,372,1.066,373,1.202,374,1.304,375,1.202,376,1.202,377,0.973,378,1.265,379,1.202,380,0.359,381,0.7,382,0.7,383,0.545,384,1.127,385,0.7,386,0.7,387,0.7,388,0.484,389,0.545,390,0.871,391,0.572,392,0.502,393,1.304,394,0.522,395,0.616,396,2.115,397,0.453,398,1.066,399,0.7,400,0.545,401,0.7,402,1.202,403,0.545,404,0.7,405,0.405,406,0.7,407,0.545,408,0.502,409,0.453,410,0.484,411,0.7,412,0.645,413,0.605,414,0.545,415,0.7,416,0.545,417,0.7,418,1.497,419,0.453,420,0.522,421,0.605,422,0.453,423,0.685,424,0.7,425,0.572,426,0.605,427,0.645,428,0.645,429,0.7,430,0.415,431,2.017,432,0.7,433,0.7,434,0.844,435,1.202,436,0.935,437,0.468,438,0.405,439,0.7,440,3.87,441,1.365,442,1.365,443,0.901,444,1.304,445,2.271,446,1.982,447,1.787,448,1.066,449,1.83,450,0.7,451,0.502,452,0.545,453,0.572,454,1.688,455,1.644,456,1.304,457,0.7,458,0.572,459,0.394,460,0.545,461,0.7,462,0.7,463,0.502,464,0.522,465,0.468,466,0.605,467,0.405,468,0.7,469,0.572,470,1.426,471,0.7,472,1.184,473,0.7,474,0.545,475,0.502,476,0.502,477,0.572,478,0.7,479,0.7,480,0.484,481,1.698,482,0.7,483,0.545,484,0.502,485,1.312,486,0.318,487,0.645,488,0.7,489,0.7,490,0.605,491,0.545,492,1.365,493,0.7,494,0.935,495,0.645,496,0.7,497,0.645,498,0.871,499,0.871,500,0.973,501,0.468,502,0.468,503,0.522,504,0.605,505,0.7,506,0.7,507,0.7,508,0.7,509,0.522,510,0.7,511,0.605,512,0.7,513,0.605,514,0.484,515,0.7,516,0.376,517,0.502,518,0.7,519,0.7,520,0.7,521,0.7,522,0.7,523,0.7,524,1.644,525,1.711,526,1.202,527,0.468,528,1.202,529,0.7,530,1.202,531,1.581,532,1.497,533,0.973,534,0.935,535,1.202,536,0.973,537,0.7,538,1.202,539,0.522,540,0.645,541,1.304,542,0.7,543,0.7,544,0.7,545,0.7,546,0.7,547,0.7,548,0.7,549,0.468,550,0.7]],["title/sqlfunctions/#_",[129,3.424]],["text/sqlfunctions/#_",[4,0.952,14,0.602,20,3.852,26,1.011,28,1.707,39,2.282,48,4.301,79,3.852,90,1.223,103,2.823,111,2.776,129,3.422,130,2.961,131,6.204,132,5.871,133,4.714,134,2.897,135,2.521,136,2.618,137,4.491,138,4.491,139,3.083,140,2.192,141,4.491,142,3.171,143,5.765,144,4.134,145,2.961,146,3.852,147,5.765,148,1.786,149,3.852]],["title/sqlfunctions/#_lambda_",[138,4.494]],["text/sqlfunctions/#_lambda_",[4,0.839,14,0.465,19,1.912,26,1.429,28,1.874,34,3.18,39,1.846,102,4.184,111,2.446,138,4.93,150,5.174,151,4.537,152,4.095,153,3.861,154,3.18,155,5.45,156,2.218,157,3.973]],["title/sqlfunctions/#aggexpr",[37,3.099]],["text/sqlfunctions/#aggexpr",[10,2.007,14,0.582,26,1.037,37,3.176,39,2.128,47,2.634,56,2.247,57,1.777,59,2.585,76,2.259,90,1.678,115,3.515,130,3.745,156,2.072,158,5.038,159,2.849,160,2.448,161,3.104,162,5.108,163,2.685,164,3.035,165,4.41,166,4.833,167,4.087]],["title/sqlfunctions/#bigbloom",[168,4.304]],["text/sqlfunctions/#bigbloom",[14,0.576,19,1.359,21,3.439,23,2.24,26,1.016,30,2.851,75,3.335,76,1.794,78,3.535,82,3.638,90,1.229,115,2.792,148,1.794,161,3.042,169,5.793,170,4.737,171,4.737,172,7.202,173,6.642,174,4.737,175,5.793,176,4.514,177,2.736,178,3.35,179,3.749,180,2.631,181,4.514,182,4.322,183,5.006,184,5.343,185,3.35,186,4.737,187,4.005,188,4.322,189,4.737,190,4.514,191,4.737]],["title/sqlfunctions/#callfun",[192,4.717]],["text/sqlfunctions/#callfun",[4,0.958,14,0.531,16,1.947,26,1.531,28,2.432,48,4.344,49,3.057,50,2.107,92,4.025,95,3.631,102,4.218,111,2.251,154,2.926,192,4.761,193,5.369,194,5.369,195,5.822,196,2.99,197,2.696,198,3.456,199,3.203,200,2.806,201,4.025,202,3.768,203,3.128,204,4.536]],["title/sqlfunctions/#coalesceifattributesmissing",[205,5.769]],["text/sqlfunctions/#coalesceifattributesmissing",[4,1.195,14,0.523,26,0.996,90,1.205,129,3.372,197,2.631,206,5.681,207,6.561,208,5.239,209,3.112,210,3.676,211,3.567,212,3.567,213,3.112,214,2.917,215,3.796,216,6.561,217,3.567,218,4.011,219,5.239,220,2.75,221,7.164,222,5.239,223,3.914,224,2.917]],["title/sqlfunctions/#coalesceifattributesmissingdisable",[225,5.769]],["text/sqlfunctions/#coalesceifattributesmissingdisable",[4,1.198,14,0.52,26,0.987,57,1.211,129,3.34,197,2.605,208,5.188,209,3.093,210,3.641,211,3.533,212,3.533,213,3.093,214,2.889,215,3.759,216,6.521,217,3.533,218,3.986,219,5.188,220,2.734,221,7.132,222,5.188,223,3.89,224,2.889,226,5.626,227,4.034,228,3.889,229,2.461]],["title/sqlfunctions/#digesttolongs",[190,4.494]],["text/sqlfunctions/#digesttolongs",[23,3.007,88,3.17,114,2.1,121,2.877,140,2.957,148,2.037,230,6.577,231,2.677,232,5.378,233,4.884,234,6.577,235,4.13,236,3.236,237,2.931,238,6.066]],["title/sqlfunctions/#digesttolongsstruct",[239,5.769]],["text/sqlfunctions/#digesttolongsstruct",[23,3.058,121,2.96,140,2.573,148,2.45,231,2.755,232,5.534,233,4.25,240,6.768,241,2.228,242,5.848,243,2.617]],["title/sqlfunctions/#disabledrule",[227,4.137]],["text/sqlfunctions/#disabledrule",[4,0.892,13,1.252,14,0.495,29,2.558,50,2.435,57,1.448,76,2.084,227,5.653,228,4.652,229,2.943,244,3.891,245,6.206,246,6.729]],["title/sqlfunctions/#failed",[247,2.671]],["text/sqlfunctions/#failed",[14,0.513,50,2.523,57,1.5,76,2.159,228,4.819,247,3.726,248,2.939]],["title/sqlfunctions/#fieldbasedid",[249,4.985]],["text/sqlfunctions/#fieldbasedid",[14,0.565,23,2.487,57,1.384,95,3.232,104,2.979,117,1.345,148,2.541,231,2.618,232,5.26,233,4.039,235,4.039,241,2.118,250,5.932,251,5.26,252,3.924,253,3.924,254,4.447,255,4.447,256,5.011]],["title/sqlfunctions/#flattenresults",[257,4.494]],["text/sqlfunctions/#flattenresults",[1,1.82,12,2.757,57,1.509,88,3.38,116,5.028,258,7.012,259,7.012]],["title/sqlfunctions/#flattenruleresults",[260,4.494]],["text/sqlfunctions/#flattenruleresults",[1,1.707,12,2.586,13,1.448,14,0.484,23,2.543,57,1.674,116,4.716,149,4.395,159,3.17,241,2.165,261,6.577,262,6.577,263,7.173,264,3.904,265,2.586]],["title/sqlfunctions/#hashfieldbasedid",[266,5.769]],["text/sqlfunctions/#hashfieldbasedid",[14,0.563,23,2.473,57,1.377,95,3.215,104,2.962,117,1.338,148,2.535,231,2.604,233,4.017,235,4.017,241,2.106,251,5.231,252,3.903,253,3.903,254,4.423,255,4.423,256,4.984,267,6.397,268,5.231,269,5.899]],["title/sqlfunctions/#hashwith",[191,4.717]],["text/sqlfunctions/#hashwith",[14,0.539,19,1.542,26,0.881,29,1.909,44,2.47,75,2.325,88,2.42,93,1.732,103,1.974,114,1.603,121,2.875,135,2.196,140,1.909,148,1.555,152,3.249,190,3.912,210,3.249,212,4.602,218,2.83,224,2.578,231,2.043,243,1.941,268,5.375,270,4.63,271,4.882,272,3.249,273,2.523,274,2.697,275,5.021,276,5.375,277,2.697,278,5.021,279,5.375,280,7.329,281,1.603,282,5.021,283,5.021,284,6.573,285,6.573,286,6.573,287,5.021,288,3.6,289,7.329,290,5.467,291,2.83,292,5.021,293,5.021,294,2.47,295,4.338,296,5.021,297,3.745,298,5.021]],["title/sqlfunctions/#hashwithstruct",[299,5.769]],["text/sqlfunctions/#hashwithstruct",[75,3.152,114,2.173,140,2.588,148,2.109,223,3.745,241,2.241,242,5.882,243,2.632,270,6.278,272,4.406,300,3.745,301,6.808]],["title/sqlfunctions/#idequal",[302,5.32]],["text/sqlfunctions/#idequal",[4,0.872,14,0.484,73,3.236,148,2.037,159,3.17,236,3.827,242,5.683,253,4.013,303,6.577,304,6.066,305,3.046,306,6.577,307,6.577,308,6.577,309,4.013,310,3.534,311,6.577]],["title/sqlfunctions/#inc",[312,4.494]],["text/sqlfunctions/#inc",[4,0.892,14,0.495,39,1.963,90,1.428,140,2.558,158,4.106,281,2.148,309,4.106,312,6.142,313,5.268,314,3.994,315,4.225]],["title/sqlfunctions/#longpair",[316,5.32]],["text/sqlfunctions/#longpair",[23,2.711,45,3.892,140,2.666,241,2.309,317,7.012,318,4.403]],["title/sqlfunctions/#longpairequal",[319,5.769]],["text/sqlfunctions/#longpairequal",[4,1.049,14,0.498,159,3.262,236,3.33,253,4.129,304,6.242,305,3.134,320,6.768,321,6.768,322,6.768,323,6.768,324,6.768]],["title/sqlfunctions/#longpairfromuuid",[325,4.985]],["text/sqlfunctions/#longpairfromuuid",[45,3.38,140,2.666,241,2.309,318,4.403,326,7.012,327,5.734,328,5.028]],["title/sqlfunctions/#mapcontains",[329,5.769]],["text/sqlfunctions/#mapcontains",[50,2.553,82,4.43,89,2.774,145,3.623,330,7.054,331,6.506]],["title/sqlfunctions/#maplookup",[332,4.985]],["text/sqlfunctions/#maplookup",[50,2.523,63,3.58,89,2.741,149,4.658,331,7.421,333,6.97,334,3.66]],["title/sqlfunctions/#meanf",[335,4.494]],["text/sqlfunctions/#meanf",[15,3.03,39,2.022,57,1.491,140,2.634,154,3.482,158,4.227,335,5.398,336,4.63,337,3.482]],["title/sqlfunctions/#murmur3id",[338,4.985]],["text/sqlfunctions/#murmur3id",[14,0.57,57,1.408,104,3.029,114,2.088,117,1.368,148,2.559,241,2.153,253,3.99,254,4.522,255,4.522,271,4.107,339,6.032,340,5.348,341,6.54,342,4.233,343,5.652]],["title/sqlfunctions/#packints",[344,5.769]],["text/sqlfunctions/#packints",[14,0.507,45,3.32,57,1.482,140,2.619,196,3.537,236,3.389,345,5.952,346,4.458,347,4.458,348,5.952]],["title/sqlfunctions/#passed",[47,2.571]],["text/sqlfunctions/#passed",[14,0.516,47,3.598,50,2.538,76,2.172,228,4.848,349,6.467]],["title/sqlfunctions/#prefixedtolongpair",[350,5.769]],["text/sqlfunctions/#prefixedtolongpair",[27,2.635,45,3.066,103,2.502,140,2.419,148,2.362,197,2.946,231,2.589,253,4.653,272,4.117,316,5.867,318,3.995,327,6.236,328,4.562,351,6.362,352,4.562,353,4.398,354,3.882,355,4.117,356,3.066,357,4.251,358,5.202]],["title/sqlfunctions/#printcode",[359,5.32]],["text/sqlfunctions/#printcode",[4,1.005,14,0.53,18,2.887,19,0.98,22,2.856,26,1.376,37,3.119,39,1.218,40,2.887,44,2.055,59,1.827,73,2.055,76,1.294,90,1.53,93,2.003,95,2.917,102,2.145,114,1.853,115,2.798,129,2.479,132,3.415,135,1.827,154,2.099,155,2.995,158,2.548,166,3.415,174,3.415,197,1.934,198,3.446,199,3.193,201,2.887,209,1.827,214,3.426,265,2.282,291,2.354,300,2.297,354,2.548,359,6.65,360,3.851,361,5.353,362,4.176,363,4.176,364,3.609,365,3.356,366,3.115,367,5.016,368,5.353,369,2.791,370,1.793,371,3.254,372,3.415,373,3.851,374,5.805,375,3.851,376,3.851,377,3.115,378,4.013,379,3.851,380,2.145,381,4.176,382,4.176,383,3.254,384,5.016,385,2.244,386,4.176,387,4.176,388,2.887,389,3.254,390,3.879,391,3.415,392,2.995,393,5.805,394,3.115,395,1.973,396,6.153,397,2.703,398,3.415,399,4.176,400,3.254,401,4.176]],["title/sqlfunctions/#printexpr",[402,5.32]],["text/sqlfunctions/#printexpr",[4,0.8,14,0.543,18,4.171,22,2.968,26,1.058,27,2.499,90,1.28,93,2.081,198,3.581,199,3.319,209,2.639,265,2.372,360,6.81,361,6.81,368,5.564,372,4.933,373,5.564,375,5.564,376,5.564,377,4.501,378,4.171,379,5.564,402,5.564,403,4.7,404,6.033,405,3.488,406,6.033,407,4.7,408,4.326,409,3.905,410,4.171]],["title/sqlfunctions/#probability",[185,3.335]],["text/sqlfunctions/#probability",[4,0.858,13,1.204,14,0.476,50,2.341,57,1.658,76,2.003,121,2.829,180,2.938,182,4.825,185,4.453,187,4.472,248,2.727,349,5.965,385,3.475,411,6.468,412,5.965,413,5.589,414,5.039,415,6.468]],["title/sqlfunctions/#probabilityin",[416,4.494]],["text/sqlfunctions/#probabilityin",[14,0.559,26,1.11,35,2.406,50,2.751,78,3.861,161,3.323,185,3.658,190,4.93,191,5.174,209,2.768,334,3.323,417,6.328,418,6.215,419,4.095,420,4.72,421,5.468,422,4.095,423,3.991,424,6.328,425,5.174,426,5.468]],["title/sqlfunctions/#providedid",[427,5.32]],["text/sqlfunctions/#providedid",[14,0.492,23,2.586,57,1.44,88,3.225,117,1.399,140,2.544,148,2.072,241,2.203,253,4.082,254,4.625,255,4.625,256,5.212,428,6.17,429,6.69,430,3.971]],["title/sqlfunctions/#resultswith",[431,4.304]],["text/sqlfunctions/#resultswith",[4,1.01,14,0.509,28,1.612,39,2.508,56,2.069,57,1.639,115,2.623,130,4.251,139,2.337,158,5.245,160,2.254,177,2.571,180,3.145,187,3.763,231,2.818,305,2.52,314,3.23,315,5.033,337,3.827,395,2.571,431,5.681,432,5.442,433,5.442,434,3.522,435,5.019]],["title/sqlfunctions/#returnsum",[436,4.137]],["text/sqlfunctions/#returnsum",[4,1.031,39,1.919,50,2.38,116,4.716,130,3.378,158,5.33,337,3.909,431,4.907,436,4.716,437,4.395,438,3.803,439,6.577]],["title/sqlfunctions/#rng",[440,3.988]],["text/sqlfunctions/#rng",[14,0.592,45,2.969,110,5.363,114,1.967,117,1.288,140,2.843,273,3.759,314,3.657,318,3.868,352,4.418,353,4.259,440,5.933,441,4.596,442,4.596,443,4.259,444,7.479,445,4.998,446,5.323,447,4.8]],["title/sqlfunctions/#rngbytes",[448,4.717]],["text/sqlfunctions/#rngbytes",[14,0.596,87,4.427,88,2.698,110,5.533,114,1.788,117,1.171,140,2.934,180,2.543,228,4.874,236,2.755,252,3.416,273,3.878,314,3.323,352,4.015,398,4.578,440,5.892,441,4.177,442,4.177,443,3.871,445,5.156,446,6.092,447,5.493,448,4.578,449,7.716,450,5.599,451,4.015,452,4.362]],["title/sqlfunctions/#rngid",[453,4.717]],["text/sqlfunctions/#rngid",[14,0.627,57,1.205,110,5.055,114,2.464,117,1.171,140,2.934,148,2.39,241,1.843,253,3.416,254,3.871,255,3.871,256,5.493,273,3.543,310,3.788,314,3.323,340,4.578,343,4.838,440,5.6,441,4.177,442,4.177,445,4.711,446,4.838,447,4.362,454,7.116,455,5.055,456,7.05]],["title/sqlfunctions/#rnguuid",[358,4.717]],["text/sqlfunctions/#rnguuid",[39,1.986,45,3.281,140,2.588,241,2.241,305,3.152,318,4.275,327,5.567,328,4.881,352,4.881,457,6.808,458,5.567,459,3.838]],["title/sqlfunctions/#rulesuiteresultdetails",[460,4.494]],["text/sqlfunctions/#rulesuiteresultdetails",[57,1.691,148,2.072,179,4.33,198,3.971,199,3.681,200,3.225,272,4.33,461,6.69,462,6.69,463,4.798,464,4.991,465,4.471,466,5.781,467,3.868]],["title/sqlfunctions/#saferlongpair",[468,5.769]],["text/sqlfunctions/#saferlongpair",[14,0.561,26,1.116,45,3.066,50,2.303,75,2.946,117,1.33,140,2.419,159,3.066,197,2.946,209,2.783,318,3.995,418,5.202,440,5.272,469,5.202,470,5.941,471,6.362,472,4.117,473,6.362,474,4.957,475,4.562,476,4.562]],["title/sqlfunctions/#smallbloom",[477,4.717]],["text/sqlfunctions/#smallbloom",[14,0.557,19,1.477,23,2.433,26,1.104,33,3.736,75,2.914,76,1.949,78,3.84,148,1.949,154,3.163,161,3.305,170,5.146,171,5.146,173,5.804,182,4.695,184,5.804,186,5.146,187,4.351,188,4.695,189,5.146,190,4.903,191,5.146,478,6.293,479,6.293,480,4.351]],["title/sqlfunctions/#softfail",[481,3.622]],["text/sqlfunctions/#softfail",[4,0.919,13,1.289,50,2.508,180,3.147,247,3.209,481,4.351,482,6.929,483,5.398,484,4.968]],["title/sqlfunctions/#softfailed",[481,3.622]],["text/sqlfunctions/#softfailed",[4,0.919,14,0.51,50,2.508,57,1.491,76,2.146,228,4.79,281,2.212,481,5.035]],["title/sqlfunctions/#sumwith",[485,4.137]],["text/sqlfunctions/#sumwith",[4,0.844,14,0.468,37,3.418,39,2.225,56,2.419,90,1.35,130,3.916,139,2.732,160,2.635,180,2.89,187,4.398,231,2.589,314,3.777,315,5.128,370,2.732,434,4.117,435,5.867,485,5.468,486,2.89]],["title/sqlfunctions/#uniqueid",[470,4.494]],["text/sqlfunctions/#uniqueid",[14,0.463,45,3.033,57,1.355,69,2.914,114,2.009,117,1.316,119,3.736,120,4.622,122,4.903,123,4.903,135,2.753,148,1.949,196,3.232,241,2.072,253,3.84,254,4.351,255,4.351,340,5.146,343,5.438,366,4.695,487,5.804,488,6.293,489,6.293,490,5.438,491,4.903]],["title/sqlfunctions/#unpack",[492,4.304]],["text/sqlfunctions/#unpack",[13,1.289,29,2.634,117,1.449,140,2.634,241,2.281,305,3.209,492,5.169,493,6.929,494,4.968]],["title/sqlfunctions/#unpackidtriple",[495,5.32]],["text/sqlfunctions/#unpackidtriple",[13,1.238,140,2.529,305,3.081,492,4.963,494,4.77,496,6.652,497,6.135,498,5.233,499,5.233,500,5.842,501,4.445,502,4.445,503,4.963]],["title/sqlfunctions/#updatefield",[504,4.985]],["text/sqlfunctions/#updatefield",[14,0.46,26,1.098,29,2.38,82,3.931,111,2.42,148,1.939,160,2.593,207,5.773,223,3.444,241,2.486,243,2.42,396,5.773,505,6.26,506,6.26,507,6.26,508,6.26,509,4.67,510,6.26,511,5.409,512,6.26,513,5.409,514,4.328,515,6.26,516,3.363,517,4.489,518,6.26]],["title/sqlfunctions/#zafieldbasedid",[519,5.769]],["text/sqlfunctions/#zafieldbasedid",[14,0.595,23,2.407,57,1.34,104,2.883,117,1.302,118,3.269,148,2.506,231,2.534,233,3.91,241,2.05,251,5.091,253,3.799,254,4.305,255,4.305,472,4.03,520,6.226,521,6.226,522,6.226,523,6.226,524,4.465,525,4.645,526,5.742,527,4.161,528,5.742]],["title/sqlfunctions/#zahashlongswith",[529,5.769]],["text/sqlfunctions/#zahashlongswith",[4,0.826,14,0.458,26,1.092,29,2.367,75,2.883,88,3.001,114,1.988,139,2.674,140,2.367,148,1.929,168,4.645,241,2.05,252,3.799,271,3.91,272,4.03,273,3.783,279,5.091,352,4.465,455,4.465,524,4.465,525,4.645,530,5.742,531,5.38,532,6.155,533,4.645,534,4.465]],["title/sqlfunctions/#zahashlongswithstruct",[535,5.32]],["text/sqlfunctions/#zahashlongswithstruct",[75,3.152,114,2.173,117,1.423,140,2.588,148,2.109,201,4.706,223,3.745,252,4.153,272,4.406,530,6.278,531,5.882,536,5.078]],["title/sqlfunctions/#zahashwith",[537,5.769]],["text/sqlfunctions/#zahashwith",[4,0.8,14,0.444,26,1.058,59,2.639,75,2.794,88,2.908,114,1.926,139,2.591,140,2.294,148,1.869,168,4.501,235,3.788,241,1.986,252,3.681,271,3.788,272,3.905,273,3.711,455,4.326,524,4.326,525,4.501,533,4.501,534,4.326,538,5.564,539,4.501,540,5.564,541,7.384,542,6.033,543,6.033,544,6.033,545,6.033,546,6.033,547,6.033]],["title/sqlfunctions/#zahashwithstruct",[548,5.769]],["text/sqlfunctions/#zahashwithstruct",[29,2.445,75,2.979,114,2.054,117,1.345,140,2.918,148,1.992,201,4.447,223,3.539,252,3.924,264,3.818,271,4.039,272,4.163,279,5.26,472,4.163,528,5.932,531,5.558,532,5.26,535,5.932,536,4.799,538,5.932,549,4.298]],["title/sqlfunctions/#zalongsfieldbasedid",[526,5.32]],["text/sqlfunctions/#zalongsfieldbasedid",[14,0.557,23,2.433,57,1.355,95,3.163,104,2.914,117,1.316,148,2.518,231,2.561,233,3.952,241,2.072,251,5.146,252,3.84,253,3.84,254,4.351,255,4.351,256,4.903,268,5.146,273,3.163,277,3.381,279,5.146,524,4.513,525,4.695,550,6.293]],["title/advanced/aggregations/",[26,0.835,115,2.294]],["text/advanced/aggregations/",[1,0.325,4,1.195,11,0.744,14,0.496,15,0.968,16,0.419,19,1.064,22,1.464,23,0.484,24,2.462,26,1.222,27,0.519,28,1.916,29,0.476,33,0.744,34,0.63,35,1.56,36,2.571,37,3.196,39,2.231,41,0.976,42,1.082,44,1.089,46,0.968,47,1.326,49,0.658,50,0.801,51,0.616,55,0.987,56,1.366,57,1.182,59,0.968,61,0.837,63,1.845,69,2.099,73,0.616,76,1.518,89,1.412,90,1.262,93,0.764,95,0.63,98,0.811,103,0.871,111,0.856,114,0.707,115,2.867,116,0.898,117,0.622,130,2.678,133,1.024,135,1.983,136,0.569,139,1.762,140,1.56,141,2.318,142,1.218,145,0.643,154,0.63,156,1.925,157,0.787,158,4.554,159,0.604,160,1.232,162,1.082,163,1.351,164,1.528,177,1.938,178,1.28,180,1.006,186,1.024,187,0.866,200,0.604,201,0.866,209,2.281,211,0.787,217,0.787,220,1.389,224,1.137,229,0.968,231,0.51,236,0.616,237,0.558,241,0.412,247,0.58,248,1.515,273,0.63,274,1.598,281,1.665,300,0.689,305,1.025,309,1.351,312,2.318,313,0.837,315,1.39,334,0.658,335,2.799,336,0.837,337,3.321,356,1.067,370,1.277,377,0.935,380,0.643,390,0.837,394,0.935,395,1.405,400,0.976,403,1.725,405,1.72,410,1.531,423,0.658,431,3.061,434,1.925,436,3.25,437,1.479,438,1.28,459,0.706,466,1.082,469,1.81,476,3.25,485,2.576,486,2.059,524,2.576,527,0.837,533,0.935,549,0.837,551,1.253,552,0.968,553,1.253,554,0.787,555,1.082,556,0.976,557,1.253,558,1.253,559,1.024,560,1.067,561,1.082,562,0.787,563,1.082,564,1.253,565,1.253,566,0.604,567,1.155,568,2.484,569,1.93,570,1.314,571,1.652,572,2.042,573,1.531,574,2.042,575,2.042,576,1.253,577,2.38,578,2.042,579,2.042,580,1.082,581,0.898,582,1.433,583,2.019,584,0.689,585,1.988,586,0.976,587,1.253,588,0.811,589,0.935,590,0.837,591,0.866,592,1.253,593,1.253,594,1.082,595,1.253,596,2.571,597,2.214,598,2.214,599,1.253,600,1.082,601,1.082,602,2.214,603,2.214,604,1.725,605,1.253,606,1.253,607,1.253,608,0.837,609,1.253,610,1.253,611,0.976,612,1.253,613,2.743,614,3.197,615,1.253,616,2.743,617,1.913,618,1.082,619,1.253,620,2.571,621,1.253,622,1.913,623,1.253,624,1.253,625,1.253,626,1.253,627,1.253,628,1.082,629,1.913,630,0.837,631,0.866,632,0.898,633,0.837,634,0.658,635,1.762,636,1.253,637,1.006,638,0.592,639,0.689,640,1.253,641,0.976,642,1.082,643,0.866,644,1.253,645,0.898,646,0.837,647,1.253,648,2.484,649,2.975,650,0.787,651,0.898,652,1.253,653,0.866,654,1.253,655,1.253,656,1.253,657,3.104,658,2.68,659,0.976,660,0.744,661,1.253,662,1.232,663,1.082,664,1.163,665,1.253,666,1.082,667,1.725,668,2.219,669,0.898,670,2.042,671,2.214,672,1.253,673,1.253,674,0.837,675,1.024,676,0.764,677,1.253,678,1.253,679,1.253,680,1.253,681,1.253,682,1.253,683,1.253,684,1.253,685,1.253,686,1.155,687,1.082,688,0.866,689,0.724,690,1.253,691,0.935,692,1.253,693,0.976,694,1.253,695,0.976]],["title/advanced/aggregations/#aggregation-functions",[26,0.835,115,2.294]],["text/advanced/aggregations/#aggregation-functions",[1,0.859,4,1.19,14,0.477,15,1.448,19,0.777,24,2.469,26,1.317,28,2.223,35,2.464,37,3.482,39,1.891,47,1.475,56,1.868,57,1.49,59,1.448,69,1.533,76,2.144,89,1.302,90,0.702,95,1.664,111,1.899,114,1.057,115,3.618,117,1.027,135,1.448,139,1.422,140,1.868,141,4.563,145,1.7,156,1.16,158,4.58,160,1.372,163,2.231,177,2.767,201,2.289,209,1.448,220,1.899,229,1.448,237,1.475,248,1.396,274,1.779,281,1.569,309,2.02,334,1.739,337,3.478,394,2.47,395,1.564,405,1.914,431,3.665,434,2.143,485,2.374,486,2.231,551,3.311,552,2.149,553,3.311,554,2.079,555,2.861,556,2.58,557,3.311,558,3.311,559,2.707,560,1.596,561,2.861,562,2.079,563,2.861,564,3.311,565,3.311,566,1.596,567,3.053,568,3.396,569,2.639,570,1.965,571,2.47,572,3.053,573,2.289,574,3.053,575,3.053,576,3.311,577,3.076,578,3.053,579,3.053,580,2.861,581,2.374,582,2.143,583,2.417,584,1.821,585,2.212,586,2.58,587,3.311,588,2.143,589,2.47,590,2.212,591,2.289,592,3.311,593,3.311]],["title/advanced/aggregations/#aggregation-lambda-functions",[26,0.711,28,1.2,115,1.953]],["text/advanced/aggregations/#aggregation-lambda-functions",[4,1.219,14,0.41,15,1.335,24,2.322,27,1.264,28,2.083,35,1.16,37,2.483,39,1.815,47,1.36,49,1.602,50,1.104,56,1.757,57,1.2,76,1.431,89,1.2,90,0.647,114,0.974,116,2.188,117,0.638,130,1.567,135,2.021,139,1.984,140,2.12,154,1.533,158,4.992,159,1.471,160,1.914,163,1.386,177,1.441,187,2.11,209,3.195,220,1.786,229,1.335,231,1.242,248,2.352,281,2.245,309,1.862,312,3.6,313,2.039,315,2.901,335,4.345,336,2.039,337,3.946,356,2.227,370,1.984,431,4.161,434,2.991,436,3.313,437,2.039,438,1.764,476,5.043,485,2.188,486,1.386,568,3.195,569,2.483,570,1.811,571,2.276,572,2.814,573,2.11,574,2.814,575,2.814,577,2.929,578,2.814,579,2.814,594,2.637,595,3.051,596,2.637,597,4.621,598,4.621,599,3.051,600,2.637,601,2.637,602,4.621,603,4.621,604,3.6,605,3.051,606,3.051,607,3.051,608,2.039,609,3.051,610,3.051,611,2.377,612,3.051]],["title/advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters",[14,0.171,26,0.407,37,1.248,39,0.678,130,1.193,156,0.814,613,2.142,614,1.81]],["text/advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters",[4,0.683,14,0.492,26,0.904,37,3.592,39,2.433,41,4.015,42,4.453,44,2.536,51,2.536,55,2.297,57,1.109,130,3.812,156,2.753,158,4.792,162,4.453,164,3.434,178,2.98,180,2.341,224,2.647,370,2.213,390,3.444,395,3.158,405,2.98,436,4.795,437,3.444,438,2.98,469,4.214,485,3.696,527,3.444,549,3.444,582,3.335,583,3.29,585,3.444,596,4.453,614,5.209,615,5.154,616,6.166,617,5.778,618,4.453,619,5.154,620,4.453,621,5.154,622,4.453,623,5.154,624,5.154]],["title/advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do",[39,0.817,186,2.29,224,1.438,625,2.801,626,2.801,627,2.801]],["text/advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do",[14,0.505,16,1.476,19,1.612,22,3.379,23,1.706,24,3.452,29,1.678,33,2.62,36,5.935,37,2.371,39,1.759,44,2.171,46,1.93,55,1.967,59,1.93,73,2.171,90,1.566,93,2.08,103,1.735,130,3.097,133,3.609,136,2.004,139,1.895,142,3.317,156,2.113,164,2.266,177,2.084,211,2.771,217,2.771,236,2.171,247,2.044,274,2.371,305,2.044,312,3.438,335,3.438,380,2.266,403,4.698,423,2.317,436,3.164,469,3.609,560,2.127,583,2.171,613,5.561,614,4.698,616,4.07,620,5.21,622,3.813,628,3.813,629,3.813,630,2.949,631,3.051,632,3.164,633,2.949,634,2.317,635,3.17,636,4.413,637,2.739,638,2.084,639,2.428,640,4.413,641,3.438,642,3.813,643,3.051,644,4.413,645,3.164,646,2.949,647,4.413,648,4.169,649,6.869,650,2.771,651,3.164,652,4.413,653,3.051,654,4.413,655,4.413,656,4.413]],["title/advanced/aggregations/#type-lookup-and-monoidal-merging",[39,1.029,63,1.811,657,3.047,658,2.631]],["text/advanced/aggregations/#type-lookup-and-monoidal-merging",[39,2.034,115,3.359,659,5.43,660,4.138,661,6.97,662,2.887,663,6.023,664,3.66]],["title/advanced/aggregations/#type-lookup",[39,1.389,63,2.444]],["text/advanced/aggregations/#type-lookup",[4,1.2,14,0.42,19,1.339,26,1.252,37,3.067,39,2.082,63,2.932,130,2.932,157,3.584,180,2.593,273,2.869,377,4.259,436,4.093,459,3.218,485,4.093,596,4.933,648,3.947,665,5.708,666,4.933,667,4.447,668,4.259,669,4.093,670,5.264,671,7.136,672,5.708,673,5.708,674,3.815,675,4.668,676,3.483,677,5.708]],["title/advanced/aggregations/#monoidal-merging",[657,4.113,658,3.551]],["text/advanced/aggregations/#monoidal-merging",[4,1.068,11,2.701,14,0.453,19,1.068,26,1.37,34,2.287,39,2.181,46,1.99,47,2.028,50,1.647,61,3.041,63,2.337,69,3.617,89,2.421,90,1.657,98,2.945,103,1.789,115,2.193,135,3.052,139,1.954,156,1.595,178,2.631,200,2.193,241,1.498,274,2.445,300,2.503,305,2.107,400,3.545,405,2.631,410,4.257,466,3.932,486,3.169,524,5.361,533,3.395,585,3.041,629,3.932,635,1.954,648,3.146,657,5.32,658,4.593,662,2.55,664,2.39,667,3.545,668,4.593,670,4.197,678,4.551,679,4.551,680,4.551,681,4.551,682,4.551,683,4.551,684,4.551,685,4.551,686,4.197,687,3.932,688,3.146,689,2.631,690,4.551,691,3.395,692,4.551,693,3.545,694,4.551,695,3.545]],["title/advanced/blooms/",[75,2.204,76,1.474]],["text/advanced/blooms/",[1,1.101,4,1.204,10,0.448,12,0.518,14,0.461,16,0.441,19,1.256,23,0.895,26,1.18,27,0.959,29,0.501,30,2.479,34,0.662,35,1.177,39,0.385,49,0.692,50,1.12,55,0.587,56,1.177,57,0.913,59,1.013,63,2.399,64,1.027,65,1.547,67,1.601,69,1.434,75,3.861,76,1.883,78,4.479,80,0.945,81,1.727,82,3.817,85,0.911,86,1.139,87,2.338,88,1.492,89,2.212,90,0.9,93,0.455,94,1.601,98,2.004,99,3.041,101,1.492,103,1.217,104,1.434,107,0.762,111,1.44,114,0.988,115,2.428,117,1.119,119,1.838,121,1.013,127,0.881,134,0.662,135,2.043,136,1.406,139,0.566,142,1.274,145,1.189,146,2.069,148,1.153,154,1.163,156,0.811,157,0.827,161,1.626,163,0.599,167,0.911,168,2.31,170,1.893,171,1.078,174,1.078,176,1.027,177,2.658,178,1.79,179,0.853,181,1.027,182,2.31,185,1.339,196,1.912,203,1.663,209,1.013,213,0.576,220,2.547,229,0.576,231,0.536,233,0.827,235,2.338,237,0.587,241,0.434,248,0.976,271,2.338,273,1.556,277,0.708,281,0.739,294,1.139,305,1.072,309,0.804,334,0.692,342,0.853,346,2.41,355,0.853,356,1.116,367,1.139,370,0.994,372,1.893,388,1.601,389,2.412,395,1.759,416,2.412,418,1.078,420,3.485,423,0.692,455,0.945,477,1.893,480,2.14,486,0.599,516,1.244,517,0.945,527,0.881,552,1.013,554,0.827,566,1.116,568,1.601,569,2.001,570,1.374,571,0.983,577,0.692,584,1.274,585,0.881,591,0.911,608,1.547,635,0.994,638,1.093,639,0.725,669,2.22,676,0.804,696,1.318,697,1.027,698,1.318,699,1.215,700,1.139,701,2.315,702,1.318,703,2.31,704,1.078,705,0.662,706,1.027,707,0.708,708,1.318,709,1.318,710,2.135,711,1.318,712,1.318,713,1.318,714,1.318,715,0.587,716,0.945,717,2,718,1.66,719,1.139,720,1.454,721,1.318,722,0.911,723,1.027,724,1.318,725,1.318,726,1.078,727,0.945,728,1.318,729,1.66,730,1.893,731,1.454,732,1.027,733,1.318,734,1.318,735,2.315,736,2.855,737,1.318,738,2,739,0.911,740,3.467,741,1.318,742,1.318,743,2.135,744,3.664,745,0.853,746,1.215,747,1.318,748,1.318,749,1.318,750,0.911,751,1.027,752,1.078,753,1.318,754,1.318,755,0.945,756,0.983,757,2.855,758,2.135,759,4.12,760,1.318,761,1.139,762,1.078,763,1.139,764,1.318,765,1.804,766,1.318,767,0.762,768,1.318,769,1.318,770,1.078,771,1.318,772,1.318,773,1.318,774,1.318,775,1.318,776,1.139,777,2.315,778,1.318,779,1.318,780,1.318,781,2,782,2.315,783,2.315,784,2.315,785,3.096,786,1.318,787,1.318,788,1.318,789,2.135,790,0.911,791,1.318,792,1.318,793,0.853,794,0.853,795,0.911,796,1.318,797,1.318,798,1.318,799,1.139,800,1.318,801,0.945,802,0.853,803,1.318,804,1.318,805,1.893,806,1.139,807,0.708,808,1.318,809,1.318,810,1.318,811,1.318,812,1.318,813,1.318,814,2.315]],["title/advanced/blooms/#bloom-filters",[75,2.204,76,1.474]],["text/advanced/blooms/#bloom-filters",[12,1.445,14,0.458,19,1.244,23,1.421,26,1.195,30,3.351,34,1.847,49,1.93,50,1.919,57,0.791,63,1.888,67,2.542,69,2.456,75,3.892,76,1.927,78,4.591,81,2.742,82,4.87,85,2.542,87,2.308,88,1.772,98,3.432,101,2.999,103,1.445,104,1.702,111,1.421,115,1.772,119,3.693,121,1.608,135,2.979,145,2.724,146,4.157,161,1.93,176,2.864,177,3.217,178,2.125,179,2.379,181,2.864,185,3.066,196,2.724,203,2.849,229,1.608,231,1.496,235,3.907,237,1.638,241,1.21,271,3.33,273,1.847,294,1.809,309,2.243,342,2.379,356,1.772,395,1.736,423,1.93,455,2.636,480,3.667,516,2.849,554,2.308,584,2.918,696,3.676,697,2.864,698,3.676,699,3.39,700,3.177,701,5.303,702,3.676,703,3.956,704,3.006,705,1.847,706,2.864,707,1.975,708,3.676,709,3.676,710,3.39,711,3.676,712,3.676,713,3.676,714,3.676,715,1.638,716,2.636,717,4.583,718,3.803,719,3.177,720,3.33,721,3.676,722,2.542,723,2.864,724,3.676,725,3.676,726,3.006,727,2.636,728,3.676,729,2.636,730,3.006,731,2.308]],["title/advanced/blooms/#how-does-quality-change-this",[1,1.235,136,2.162]],["text/advanced/blooms/#how-does-quality-change-this",[1,1.219,14,0.522,19,1.777,26,1.103,30,3.095,55,2.093,57,1.011,75,3.657,76,2.196,78,2.866,82,3.949,86,4.059,87,2.949,88,2.264,98,3.04,99,4.51,103,1.847,111,1.816,115,3.65,136,2.133,161,2.467,174,3.841,177,2.219,178,2.716,196,3.23,203,2.524,235,2.949,271,2.949,273,3.161,277,2.524,294,2.311,346,3.04,388,3.248,395,2.971,486,2.133,566,3.031,635,2.017,710,4.332,729,3.368,730,3.841,732,3.66,733,4.697,734,4.697,735,6.29,736,5.8,737,4.697,738,5.435,739,3.248,740,3.841,741,4.697,742,4.697,743,4.332,744,5.435,745,3.04,746,4.332,747,4.697,748,4.697,749,4.697,750,3.248,751,3.66,752,3.841,753,4.697,754,4.697]],["title/advanced/blooms/#what-are-bloom-maps",[75,2.204,89,1.872]],["text/advanced/blooms/#what-are-bloom-maps",[4,0.985,14,0.448,23,2.357,26,1.406,69,2.823,75,3.713,76,1.888,78,3.719,89,2.922,103,2.397,115,2.938,135,2.666,168,4.548,356,2.938,395,2.879,416,4.749,420,4.548,477,4.985,577,3.201,591,4.215,669,4.371,755,4.371,756,4.548,757,5.622,758,5.622,759,4.985]],["title/advanced/blooms/#using-the-spark-stats-package",[14,0.259,19,0.827,346,2.282,740,2.884]],["text/advanced/blooms/#using-the-spark-stats-package",[1,1.084,4,1.223,26,1.018,35,1.588,56,1.588,57,0.899,59,1.827,63,2.981,75,3.339,76,1.294,78,4.071,80,2.995,89,2.624,90,0.886,94,2.887,104,1.934,111,1.614,114,1.333,117,1.508,127,2.791,148,1.294,167,2.887,171,3.415,182,3.115,209,1.827,213,1.827,220,2.788,281,1.333,346,2.703,355,2.703,370,1.793,420,4.977,552,2.539,568,4.013,569,3.119,570,3.446,571,3.115,608,2.791,638,1.973,669,2.995,740,4.747,757,5.353,758,3.851,759,4.747,760,4.176,761,3.609,762,3.415,763,3.609,764,4.176,765,4.522,766,4.176,767,2.415,768,4.176,769,4.176,770,3.415,771,4.176]],["title/advanced/blooms/#using-the-quality-bloom-filters",[1,0.915,14,0.259,75,1.633,76,1.092]],["text/advanced/blooms/#using-the-quality-bloom-filters",[1,0.688,4,1.222,10,0.9,14,0.375,16,0.886,26,1.013,27,1.717,29,1.007,30,1.304,35,1.576,39,0.773,56,1.576,57,0.892,59,1.159,63,1.361,64,2.064,65,2.77,67,1.832,75,3.792,78,4.508,81,1.976,82,2.603,87,2.603,88,1.277,89,2.007,90,0.879,93,0.914,94,1.832,99,2.972,104,1.227,107,1.532,111,1.024,114,1.323,115,1.277,117,1.207,121,1.159,134,1.331,136,1.203,139,1.138,142,2.28,148,1.581,154,2.083,156,0.929,157,1.664,161,1.391,163,1.203,168,3.092,170,3.389,177,2.727,178,1.532,182,3.092,209,1.159,220,2.922,233,1.664,248,1.748,271,1.664,281,0.846,305,1.227,334,1.391,367,2.289,370,1.138,372,3.389,388,1.832,389,3.978,416,2.064,418,2.166,420,1.976,477,2.166,480,1.832,517,1.9,527,1.77,569,2.227,585,1.77,608,1.77,639,1.457,676,1.616,703,1.976,731,1.664,736,2.443,743,2.443,744,3.582,759,4.175,772,2.649,773,2.649,774,2.649,775,2.649,776,2.289,777,4.145,778,2.649,779,2.649,780,2.649,781,3.582,782,4.145,783,4.145,784,4.145,785,5.105,786,2.649,787,2.649,788,2.649,789,3.822,790,1.832,791,2.649,792,2.649,793,1.715,794,1.715,795,1.832,796,2.649,797,2.649,798,2.649,799,2.289,800,2.649,801,1.9,802,1.715,803,2.649,804,2.649,805,3.389,806,2.289,807,1.423,808,2.649,809,2.649,810,2.649,811,2.649,812,2.649]],["title/advanced/blooms/#expressions-which-take-expression-parameters",[90,1.092,156,1.236,305,1.633]],["text/advanced/blooms/#expressions-which-take-expression-parameters",[4,0.853,19,1.509,50,2.328,63,3.942,75,2.979,76,1.992,78,3.924,99,4.612,135,2.813,346,4.163,416,5.011,420,4.799,635,2.762,638,3.038,669,4.612,740,5.26,744,5.558,759,5.26,813,6.432,814,7.676]],["title/advanced/expressionDocs/",[90,1.01,128,2.989]],["text/advanced/expressionDocs/",[1,1.407,4,1.214,13,0.83,14,0.328,16,0.974,22,2.195,26,0.951,28,1.321,34,1.464,46,1.275,49,2.343,50,2.5,73,1.434,90,1.15,92,2.015,114,1.731,118,1.53,121,1.275,128,2.802,133,2.383,135,1.275,156,1.564,159,1.404,178,1.685,209,1.951,218,3.425,220,2.671,223,1.603,224,2.784,243,2.671,264,1.73,265,1.146,310,2.397,334,1.53,342,1.886,354,1.778,370,1.251,380,1.497,385,1.566,391,2.383,395,1.376,405,2.58,430,1.73,438,3.786,560,1.404,632,2.09,638,1.376,687,2.518,689,3.513,707,1.566,793,1.886,794,1.886,799,3.855,815,3.258,816,1.643,817,2.914,818,2.09,819,3.258,820,3.258,821,3.258,822,3.648,823,3.404,824,3.748,825,6.793,826,2.687,827,3.258,828,3.258,829,3.258,830,3.258,831,4.433,832,3.258,833,2.09,834,2.687,835,2.383,836,2.383,837,2.383,838,3.258,839,3.258,840,2.383,841,7.322,842,2.199,843,1.778,844,5,845,4.989,846,6.062,847,2.914,848,4.989,849,3.258,850,3.258,851,4.989,852,4.989,853,2.515,854,4.989,855,3.258,856,4.989,857,3.258,858,2.687,859,3.258,860,2.914,861,3.258,862,3.258,863,4.989,864,3.258,865,3.258,866,3.258,867,3.648,868,3.258,869,3.258]],["title/advanced/mapFunctions/",[26,0.835,89,1.872]],["text/advanced/mapFunctions/",[1,0.681,4,1.207,12,2.259,13,0.489,14,0.423,15,1.148,18,2.845,19,0.616,23,1.591,26,1.008,33,1.559,35,2.185,39,1.201,40,1.815,46,1.148,50,1.489,57,0.565,63,3.68,64,2.046,67,1.815,69,2.351,71,3.954,73,1.292,75,1.216,76,0.813,82,1.649,89,3.288,90,0.873,93,0.906,94,1.815,100,2.046,101,1.265,102,1.348,117,0.549,118,2.161,119,3.013,134,1.319,135,2.22,145,1.348,146,1.754,148,0.813,156,0.92,160,1.705,163,1.193,197,2.351,202,1.699,203,1.411,209,1.8,213,1.148,214,2.607,220,1.962,237,1.17,241,1.671,243,1.962,274,1.411,305,1.216,315,3.187,334,1.379,355,2.664,365,2.38,369,1.754,378,1.815,423,1.379,472,2.664,552,1.148,554,1.649,566,1.984,569,3.353,577,2.161,590,1.754,591,1.815,611,3.954,633,1.754,635,1.127,637,2.305,638,1.944,658,3.787,662,1.088,663,2.269,664,1.379,707,1.411,801,1.883,805,3.365,807,1.411,831,2.147,836,2.147,853,3.239,870,1.559,871,2.626,872,2.626,873,2.626,874,2.626,875,2.147,876,2.626,877,2.951,878,2.626,879,4.116,880,2.626,881,3.07,882,5.755,883,4.116,884,5.721,885,2.626,886,5.076,887,4.116,888,2.626,889,2.626,890,2.626,891,2.046,892,2.626,893,2.269,894,3.556,895,2.626,896,2.626,897,2.269,898,2.626,899,2.626,900,2.626,901,1.699,902,2.626,903,2.046,904,2.626,905,1.883,906,2.626,907,2.626,908,2.626]],["title/advanced/mapFunctions/#map-functions",[26,0.835,89,1.872]],["text/advanced/mapFunctions/#map-functions",[12,2.85,13,1.089,14,0.533,26,1.026,33,3.474,40,4.046,57,1.259,63,3.722,67,4.046,69,2.71,71,6.134,75,2.71,76,1.812,89,2.301,100,4.559,119,3.474,135,2.559,160,3.002,203,3.144,214,3.005,365,3.383,369,3.91,472,3.787,554,3.674,590,3.91,637,2.658,658,4.365,805,4.785,870,3.474,871,5.852,872,5.852,873,5.852,874,5.852,875,4.785]],["title/advanced/mapFunctions/#building-the-lookup-maps",[63,2.081,89,1.593,552,1.772]],["text/advanced/mapFunctions/#building-the-lookup-maps",[1,0.906,4,1.216,12,1.372,14,0.376,15,1.526,18,3.53,19,0.819,23,1.974,26,0.896,35,2.527,39,1.018,46,1.526,50,1.263,63,3.632,64,2.718,69,2.365,89,3.234,93,1.204,94,2.412,101,1.682,102,1.792,117,0.73,118,1.832,119,3.031,134,1.753,135,1.526,197,2.797,209,1.526,213,1.526,214,1.792,220,2.335,237,1.555,241,1.681,274,1.875,355,3.305,365,2.017,378,2.412,472,2.258,566,1.682,569,3.571,611,4.705,633,2.332,635,1.498,637,2.319,658,3.809,662,1.445,707,1.875,801,2.502,805,2.853,807,1.875,831,2.853,836,2.853,853,3.747,876,3.489,877,2.502,878,3.489,879,5.106,880,3.489,881,3.809,882,5.569,883,5.106,884,6.385,885,3.489,886,6.039,887,5.106,888,3.489,889,3.489,890,3.489,891,2.718,892,3.489,893,3.015,894,4.412,895,3.489,896,3.489,897,3.015,898,3.489,899,3.489]],["title/advanced/mapFunctions/#expressions-which-take-expression-parameters",[90,1.092,156,1.236,305,1.633]],["text/advanced/mapFunctions/#expressions-which-take-expression-parameters",[4,1.162,12,2.11,39,1.566,50,1.942,73,2.641,82,3.37,89,3.241,118,2.818,135,2.347,145,2.756,146,3.586,148,1.662,163,2.438,202,3.474,209,2.347,214,2.756,241,1.767,243,2.925,315,4.751,334,2.818,423,2.818,566,2.587,569,2.884,577,3.604,591,3.711,638,3.242,663,4.638,664,2.818,877,3.849,882,6.329,900,5.367,901,3.474,902,5.367,903,4.181,904,5.367,905,3.849,906,5.367,907,5.367,908,5.367]],["title/advanced/prng/",[26,0.835,909,4.76]],["text/advanced/prng/",[1,1.364,4,0.953,14,0.568,19,0.852,23,2.032,26,1.084,43,2.969,44,1.786,57,1.457,65,2.426,87,4.512,88,2.977,90,0.77,102,1.864,103,1.427,110,4.43,111,1.403,114,2.294,135,1.588,139,3.318,140,2.349,160,1.504,177,2.482,187,2.51,209,2.299,231,2.139,233,3.3,236,3.04,237,1.618,248,2.855,273,3.611,274,2.824,325,3.137,328,2.603,352,2.603,358,2.969,366,3.921,370,2.653,395,2.482,430,2.155,437,2.426,440,5.47,442,3.921,445,3.512,447,5.837,448,2.969,451,2.603,455,3.769,459,2.047,467,3.039,560,1.75,567,4.847,631,2.51,651,2.603,707,2.824,751,4.095,770,2.969,853,2.047,909,3.63,910,3.348,911,4.059,912,4.059,913,4.059,914,4.059,915,4.059,916,4.059,917,2.51,918,2.828,919,3.63,920,3.63,921,6.178,922,5.338,923,2.603,924,2.708,925,4.059,926,4.059,927,3.137,928,5.256,929,5.256,930,4.095,931,3.63]],["title/advanced/prng/#rng-expressions",[90,1.01,440,3.291]],["text/advanced/prng/#rng-expressions",[4,0.92,14,0.59,23,2.362,57,1.315,87,4.672,88,3.343,110,4.38,114,2.215,139,3.524,140,2.322,160,1.863,177,2.125,209,2.672,231,2.486,233,3.836,236,3.006,237,2.004,248,3.138,273,3.07,274,3.282,325,3.887,328,3.225,358,3.678,366,4.557,370,2.623,395,2.885,440,5.675,442,4.557,445,4.082,447,6.252,448,3.678,451,3.225,459,2.536,467,3.532,707,3.282,751,4.759,921,6.109,922,5.279,927,3.887,928,6.109,929,6.109,930,4.759,931,4.498]],["title/advanced/rowIdFunctions/",[26,0.711,56,1.54,117,0.847]],["text/advanced/rowIdFunctions/",[4,0.972,14,0.489,16,1.084,19,1.438,21,1.159,24,1.629,25,1.597,26,0.729,27,0.809,28,0.578,29,1.232,35,1.579,39,0.57,46,0.854,51,0.961,56,2.199,61,1.305,65,1.305,69,0.904,81,1.457,87,2.035,88,0.941,90,0.881,93,0.674,96,1.801,97,1.801,103,1.633,104,0.904,107,1.129,111,2.073,113,1.597,114,1.847,117,1.582,118,1.702,119,2.87,120,3.738,121,3.207,122,3.767,123,3.236,135,0.854,136,0.887,140,2.199,148,1.898,150,2.65,153,1.192,161,1.026,164,2.483,165,1.457,177,2.284,180,1.887,196,1.664,198,1.924,199,1.783,200,0.941,203,1.049,231,1.319,232,2.65,233,1.226,235,2.608,236,2.044,237,1.444,238,1.801,241,0.643,243,1.253,248,0.824,249,2.801,250,1.801,252,2.535,253,2.535,268,1.597,269,1.801,271,3.367,273,1.629,274,1.049,276,4.385,277,1.741,288,1.401,297,1.457,300,1.074,302,1.801,310,1.049,313,1.305,314,1.159,318,1.226,336,1.305,337,0.982,338,1.688,339,1.801,340,3.954,347,1.264,352,3.467,355,2.098,357,1.305,365,1.129,366,4.964,370,1.784,407,2.525,422,1.264,427,1.801,428,1.801,441,2.418,442,1.457,452,1.522,453,2.65,454,1.801,455,1.401,470,2.525,487,1.801,490,4.178,491,2.525,509,1.457,516,1.741,532,1.597,540,1.801,560,2.33,571,2.418,583,1.595,588,1.264,600,1.688,608,2.776,637,0.887,639,1.074,648,1.35,659,3.236,662,0.809,703,1.457,705,0.982,715,0.87,726,1.597,727,1.401,739,2.241,746,1.801,751,2.525,755,1.401,762,1.597,776,3.59,790,1.35,795,1.35,802,1.264,807,1.049,818,1.401,826,1.801,831,1.597,853,1.101,875,1.597,877,1.401,901,1.264,932,1.801,933,4.645,934,3.241,935,2.801,936,2.184,937,1.597,938,2.184,939,2.184,940,1.688,941,1.801,942,1.226,943,3.624,944,2.035,945,3.624,946,3.624,947,1.597,948,2.184,949,2.184,950,2.184,951,2.184,952,2.184,953,2.184,954,2.324,955,1.597,956,2.776,957,2.184,958,2.184,959,2.184,960,2.184,961,1.597,962,1.522,963,2.184,964,3.241,965,2.184,966,1.688,967,2.65,968,1.688,969,1.522,970,1.953,971,1.953,972,1.953,973,3.241,974,1.597,975,1.953,976,1.953,977,2.801,978,1.401,979,2.801,980,1.953,981,1.953,982,1.522,983,1.264,984,1.953,985,1.522,986,1.305,987,1.953,988,1.953,989,1.953,990,1.953,991,1.953,992,1.953,993,1.953,994,1.953,995,1.953,996,1.953,997,1.953,998,2.689,999,1.953,1000,3.241,1001,3.241,1002,2.035,1003,3.241,1004,3.241,1005,3.241,1006,1.953,1007,3.241,1008,1.688,1009,1.401,1010,3.241,1011,1.953,1012,1.953,1013,4.154,1014,1.953,1015,1.522,1016,1.688]],["title/advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches",[249,2.42,276,2.29,560,1.35,703,2.089,966,2.42,967,2.29]],["text/advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches",[14,0.455,111,2.901,118,3.252,121,2.709,180,2.813,237,3.344,271,3.889,273,3.112,276,5.064,277,3.327,288,4.441,338,5.352,422,4.008,453,5.064,470,4.825,532,5.064,560,2.985,637,2.813,934,6.193,935,5.352,964,6.193,967,5.064,968,5.352,969,4.825,970,6.193,971,6.193,972,6.193]],["title/advanced/rowIdFunctions/#guaranteed-unique-id-how",[117,0.847,119,2.405,120,2.472]],["text/advanced/rowIdFunctions/#guaranteed-unique-id-how",[4,0.679,14,0.445,19,1.736,24,2.572,25,2.862,39,1.021,46,1.531,51,1.722,56,2.692,65,2.339,81,2.611,87,3.213,90,0.742,104,1.621,111,1.978,117,1.265,119,3.038,120,3.691,122,4.713,123,3.987,135,1.531,140,1.945,164,3.418,165,2.611,177,2.417,196,2.628,231,2.083,235,3.213,248,1.476,277,1.88,300,1.925,313,2.339,336,2.339,337,1.759,347,2.265,355,2.265,366,5.961,370,1.503,407,2.727,452,2.727,453,2.862,470,2.727,490,5.751,491,3.987,516,1.88,560,1.687,571,3.818,588,2.265,659,4.713,662,1.45,705,1.759,715,1.56,727,2.51,739,2.42,751,3.987,762,2.862,776,5.227,795,2.42,807,1.88,818,2.51,826,3.227,831,2.862,853,1.973,954,2.51,956,3.42,973,5.117,974,2.862,975,3.5,976,3.5,977,4.422,978,2.51,979,4.422,980,3.5,981,3.5,982,2.727,983,2.265,984,3.5,985,2.727,986,2.339,987,3.5,988,3.5,989,3.5,990,3.5,991,3.5,992,3.5,993,3.5,994,3.5,995,3.5,996,3.5,997,3.5,998,3.915,999,3.5,1000,5.117,1001,5.117,1002,3.213,1003,5.117,1004,5.117,1005,5.117,1006,3.5,1007,5.117,1008,3.024,1009,2.51,1010,5.117,1011,3.5,1012,3.5,1013,6.049,1014,3.5,1015,2.727,1016,3.024]],["title/advanced/ruleEngine/",[1017,4.494]],["text/advanced/ruleEngine/",[1,0.506,4,1.199,6,0.809,10,1.532,11,0.644,12,0.766,13,1.397,14,0.511,15,0.475,16,0.651,17,1.453,19,1.058,21,1.156,22,1.304,24,0.545,26,0.847,27,1.098,28,0.785,29,0.741,31,0.778,33,0.644,35,1.416,39,0.773,44,0.958,45,0.523,46,0.475,47,1.181,50,0.705,51,1.304,54,3.267,55,0.483,56,0.741,57,1.153,65,0.725,76,0.336,80,0.778,85,2.236,88,1.559,90,1.024,92,1.347,93,0.914,101,0.523,103,0.766,104,0.502,107,1.126,111,1.025,114,0.346,117,1.068,118,0.57,121,1.159,130,0.557,134,1.332,135,0.475,136,0.493,139,0.466,140,0.412,145,1,148,1.002,149,3.014,152,1.261,154,0.979,156,1.306,157,1.223,159,0.939,160,1.34,161,1.023,163,0.493,164,0.557,167,0.75,177,0.512,178,0.627,180,0.493,200,0.939,209,0.475,210,1.715,211,2.339,212,0.681,213,1.159,214,0.557,220,2.423,223,0.597,228,0.75,231,0.793,236,1.304,237,0.483,241,0.873,245,1.001,247,0.902,257,0.845,260,0.845,263,1.796,264,1.573,265,2.342,272,0.702,288,1.397,297,0.809,300,2.05,305,0.902,310,0.583,327,0.887,334,0.57,337,1.872,355,1.261,356,0.939,357,1.302,365,1.532,370,1.138,380,1,390,0.725,407,0.845,409,0.702,410,1.347,412,1.001,413,0.938,414,0.845,419,1.715,422,1.261,423,0.57,425,0.887,430,1.156,443,1.347,459,1.823,467,1.126,472,0.702,475,0.778,476,1.397,480,0.75,484,0.778,486,0.885,492,1.453,494,0.778,495,1.001,497,1.001,498,1.771,499,1.302,500,1.453,501,1.771,502,1.302,503,0.809,514,0.75,527,0.725,534,0.778,536,0.809,539,0.809,549,1.771,552,0.852,559,0.887,560,0.523,566,0.939,569,0.583,573,1.347,577,1.023,581,0.778,582,0.702,583,0.958,584,1.072,585,0.725,590,0.725,604,0.845,631,0.75,634,0.57,635,2.073,637,1.692,638,0.512,639,1.072,641,1.518,643,0.75,648,0.75,650,0.681,651,1.397,660,1.156,662,1.34,664,0.57,676,0.662,688,2.236,695,0.845,700,0.938,703,1.453,704,1.593,707,0.583,715,1.181,716,0.778,718,0.778,720,0.681,722,0.75,731,1.664,739,1.347,745,0.702,767,1.532,790,1.832,801,0.778,807,1.047,816,2.542,817,1.085,836,0.887,837,0.887,842,2.215,870,1.92,881,0.809,891,0.845,901,0.702,905,4.495,917,1.347,918,0.845,920,1.085,956,1.302,969,0.845,1009,0.778,1017,0.845,1018,1.397,1019,1.213,1020,1.518,1021,1.453,1022,2.461,1023,2.832,1024,0.887,1025,1.87,1026,2.651,1027,1.518,1028,1.085,1029,1.085,1030,1.085,1031,1.213,1032,2.444,1033,1.213,1034,1.213,1035,0.938,1036,1.397,1037,0.57,1038,3.364,1039,2.167,1040,1.948,1041,2.903,1042,1.683,1043,1.085,1044,1.213,1045,2.412,1046,2.167,1047,1.518,1048,1.213,1049,1.213,1050,1.213,1051,1.948,1052,1.001,1053,1.832,1054,1.518,1055,1.213,1056,1.213,1057,0.887,1058,1.213,1059,1.832,1060,1.948,1061,1.948,1062,0.644,1063,1.948,1064,0.938,1065,1.085,1066,2.412,1067,1.683,1068,0.938,1069,0.938,1070,1.593,1071,1.085,1072,0.887,1073,0.887,1074,1.085,1075,1.085,1076,0.938,1077,0.75,1078,1.085,1079,1.085,1080,0.778,1081,2.644,1082,1.085,1083,1.683,1084,1.085,1085,1.683,1086,0.938,1087,0.845,1088,0.938,1089,0.845,1090,0.938,1091,3.124,1092,1.453,1093,1.302,1094,0.845,1095,2.031,1096,0.75,1097,0.938,1098,1.532,1099,0.938,1100,0.938,1101,0.778,1102,0.938,1103,0.938,1104,0.938,1105,1.085,1106,1.085,1107,1.948,1108,3.219,1109,0.938,1110,1.085,1111,0.887,1112,1.085,1113,1.683,1114,1.664,1115,1.085,1116,1.085,1117,0.725,1118,0.845,1119,1.085,1120,1.085,1121,1.085,1122,1.085,1123,1.085,1124,1.085,1125,0.938,1126,1.085,1127,1.085,1128,0.778,1129,1.085,1130,1.085,1131,1.593,1132,0.778,1133,1.085,1134,0.725,1135,1.085,1136,0.809,1137,0.938,1138,1.518,1139,0.778,1140,0.938,1141,0.938,1142,0.938,1143,0.938,1144,1.715,1145,0.845,1146,0.938,1147,0.845,1148,0.845,1149,1.698,1150,0.938,1151,1.085,1152,0.938,1153,1.085,1154,1.085,1155,0.778,1156,1.085,1157,1.085,1158,1.085,1159,1.085,1160,0.938]],["title/advanced/ruleEngine/#serializing",[1059,3.988]],["text/advanced/ruleEngine/#serializing",[4,1.219,10,1.207,13,1.136,14,0.449,26,1.07,28,1.807,33,2.109,47,1.583,57,1.313,85,3.577,90,1.098,92,3.577,103,1.397,111,1.374,117,1.082,121,1.554,148,1.101,156,1.245,210,3.949,213,1.554,220,2.592,236,1.748,265,2.399,297,2.651,300,1.955,334,1.866,365,2.054,410,2.456,423,1.866,430,2.109,476,2.548,498,3.457,499,2.374,500,2.651,501,3.457,502,2.374,503,2.651,560,1.712,569,1.909,583,1.748,635,1.526,651,2.548,662,1.472,715,1.583,739,2.456,842,2.426,870,3.071,881,2.651,905,6.137,1009,2.548,1025,2.054,1051,3.553,1054,2.768,1059,3.577,1060,5.174,1061,5.174,1062,2.109,1063,5.174,1064,3.07,1065,3.553,1066,5.001,1067,4.471,1068,3.07,1069,3.07,1070,4.231,1071,3.553,1072,2.905,1073,2.905,1074,3.553,1075,3.553,1076,3.07,1077,2.456]],["title/advanced/ruleEngine/#debugging",[1046,4.717]],["text/advanced/ruleEngine/#debugging",[4,1.197,13,1.523,14,0.354,35,1.83,39,1.404,47,2.145,50,1.742,57,1.646,88,3.081,134,2.419,136,2.186,145,2.472,148,1.491,149,4.797,156,1.687,159,3.081,161,2.528,220,1.861,223,2.648,228,3.328,236,2.368,265,1.893,288,3.452,459,3.604,486,2.186,637,2.904,639,3.517,688,3.328,816,2.714,837,3.936,842,1.742,1022,3.795,1023,4.014,1032,4.439,1038,3.591,1039,3.936,1040,4.814,1045,4.769,1046,3.936,1047,3.75,1078,4.814,1079,4.814,1080,3.452,1081,5.228,1082,4.814,1083,5.524]],["title/advanced/ruleEngine/#flattenruleresults",[260,4.494]],["text/advanced/ruleEngine/#flattenruleresults",[4,1.184,16,1.997,26,1.047,154,3.001,220,2.309,236,2.938,241,1.966,257,4.652,300,3.285,410,4.128,573,4.128,635,2.564,676,3.643,715,2.661,767,3.453,790,5.073,1038,4.455,1041,4.652,1042,5.16,1084,5.971,1085,6.341,1086,5.16,1087,4.652,1088,5.16,1089,4.652,1090,5.16]],["title/advanced/ruleEngine/#resolvewith",[1091,3.733]],["text/advanced/ruleEngine/#resolvewith",[4,1.186,10,1.374,13,1.221,14,0.551,19,1.758,24,2.033,26,0.996,44,2.794,46,1.77,54,2.468,57,0.871,76,1.253,80,2.901,90,0.858,114,1.292,130,2.078,134,2.033,152,3.675,160,1.676,163,1.838,164,2.078,200,1.95,211,4.703,212,2.54,213,1.77,214,2.078,220,2.536,247,1.874,264,2.402,337,3.296,357,2.703,380,2.078,390,2.703,419,2.618,422,2.618,467,2.339,475,2.901,484,2.901,486,1.838,549,2.703,581,2.901,582,2.618,583,1.991,590,2.703,635,2.438,638,1.911,641,4.423,643,2.797,660,2.402,662,2.352,688,2.797,722,2.797,745,2.618,767,2.339,842,1.464,901,2.618,917,2.797,1018,2.901,1022,2.402,1038,4.894,1039,3.308,1041,4.423,1081,4.643,1091,4.603,1092,3.018,1093,2.703,1094,3.152,1095,3.565,1096,2.797,1097,3.496,1098,2.339,1099,3.496,1100,3.496,1101,2.901,1102,3.496,1103,3.496,1104,3.496]],["title/advanced/ruleEngine/#why-is-this-needed",[662,2.39]],["text/advanced/ruleEngine/#why-is-this-needed",[10,1.487,12,1.722,13,1.369,14,0.441,15,1.916,17,3.267,19,1.028,21,2.6,22,2.952,45,2.111,51,2.155,54,4.857,56,1.665,93,1.511,104,2.028,107,2.532,148,1.357,154,2.201,160,1.814,167,3.028,200,2.111,231,1.783,272,2.835,300,2.409,310,2.353,337,3.015,356,2.891,357,2.927,365,2.532,370,2.576,407,3.412,413,3.785,419,2.835,467,2.532,480,3.028,527,2.927,536,3.267,549,2.927,552,1.916,566,2.111,577,3.15,584,2.409,635,1.881,637,1.989,703,4.475,704,3.581,715,1.952,718,3.141,807,2.353,816,2.469,842,1.585,891,3.412,956,2.927,969,3.412,1025,2.532,1091,3.882,1098,2.532,1105,4.38,1106,4.38,1107,5.999,1108,6.661,1109,3.785,1110,4.38,1111,3.581,1112,4.38,1113,5.184,1114,4.296,1115,4.38,1116,4.38,1117,2.927,1118,3.412,1119,4.38,1120,4.38,1121,4.38,1122,4.38,1123,4.38,1124,4.38,1125,3.785,1126,4.38,1127,4.38,1128,3.141,1129,4.38,1130,4.38]],["title/advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it",[1021,3.022,1131,3.313,1132,2.905]],["text/advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it",[10,2.297,11,3.114,13,0.976,14,0.602,90,1.113,93,2.333,107,3.033,118,2.755,121,2.295,134,2.637,148,1.625,157,3.294,180,2.383,237,2.338,247,2.43,265,2.063,409,3.395,422,3.395,472,3.395,552,2.295,566,2.529,585,3.506,604,4.087,634,2.755,635,2.904,637,2.383,650,3.294,660,3.114,695,4.087,816,2.958,1045,3.914,1053,3.627,1091,3.395,1092,3.914,1093,3.506,1131,4.29,1133,5.246,1134,3.506,1135,5.246,1136,3.914,1137,4.533,1138,5.27,1139,3.762,1140,4.533,1141,4.533,1142,4.533,1143,4.533,1144,4.845,1145,4.087,1146,4.533,1147,4.087,1148,4.087,1149,2.755]],["title/advanced/ruleEngine/#forcerunnereval",[1150,4.985]],["text/advanced/ruleEngine/#forcerunnereval",[10,1.782,13,0.976,14,0.497,17,3.914,31,3.762,51,3.328,54,3.201,55,2.338,88,3.26,90,1.113,101,2.529,111,2.028,117,1.097,139,2.253,145,2.694,156,1.839,161,2.755,178,3.033,241,2.227,265,2.063,380,2.694,414,4.087,514,3.627,549,3.506,584,2.886,631,3.627,635,2.253,664,2.755,700,4.533,704,4.29,707,2.819,716,3.762,731,4.247,801,3.762,807,2.819,816,3.813,836,4.29,842,2.448,1023,3.294,1025,3.033,1095,4.247,1098,3.033,1149,3.931,1151,5.246,1152,4.533,1153,5.246,1154,5.246,1155,3.762,1156,5.246,1157,5.246,1158,5.246,1159,5.246,1160,4.533]],["title/advanced/ruleEngineWorkflow/",[1161,6.45]],["text/advanced/ruleEngineWorkflow/",[4,0.7,10,1.793,11,2.168,12,1.436,13,1.475,14,0.53,15,1.598,16,1.221,19,0.857,26,0.641,28,2.223,39,1.066,47,1.628,49,1.918,51,1.797,55,1.628,79,2.441,90,1.441,93,1.821,120,2.229,128,3.315,136,2.398,144,2.62,145,1.876,148,1.132,154,1.836,156,1.28,159,2.988,161,1.918,179,3.417,204,2.846,213,1.598,218,2.059,224,1.876,264,2.168,265,3.175,288,2.62,314,2.168,385,1.963,391,2.987,392,2.62,395,1.725,474,2.846,511,4.562,516,3.649,517,2.62,539,3.939,556,2.846,560,1.761,582,2.364,618,3.157,635,2.267,637,1.659,638,1.725,674,2.441,715,2.353,716,2.62,816,4.232,823,2.294,833,3.786,840,2.987,842,1.911,894,3.157,917,2.526,924,2.725,932,3.369,941,3.369,944,2.294,961,2.987,968,3.157,974,4.317,998,2.364,1017,2.846,1021,2.725,1023,4.523,1024,2.987,1025,3.052,1045,2.725,1054,2.846,1087,2.846,1162,3.653,1163,3.653,1164,3.653,1165,5.279,1166,3.653,1167,5.279,1168,2.987,1169,3.653,1170,3.157,1171,4.869,1172,3.653,1173,3.653,1174,2.846,1175,3.653,1176,2.725,1177,2.441,1178,3.653,1179,3.653,1180,3.653,1181,3.653,1182,2.725,1183,3.653]],["title/advanced/ruleEngineWorkflow/#overview-and-terms",[1162,4.76,1163,4.76]],["text/advanced/ruleEngineWorkflow/#overview-and-terms",[10,1.79,13,1.525,14,0.388,16,1.762,47,2.349,49,2.767,51,2.593,79,3.522,90,1.118,120,3.215,145,2.706,159,3.269,161,2.767,213,2.305,264,3.128,265,3.222,288,3.779,314,3.128,385,2.832,395,2.489,511,5.862,674,3.522,715,2.349,716,3.779,816,4.62,840,4.309,917,3.644,941,4.86,961,4.309,1017,4.106,1023,5.146,1025,3.047,1054,4.106,1087,4.106,1164,5.27,1165,6.783,1166,5.27,1167,6.783,1168,4.309,1169,5.27,1170,4.554,1171,4.86]],["title/advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management",[560,1.7,924,2.631,1025,2.039,1172,3.527]],["text/advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management",[10,1.589,11,2.777,12,1.84,13,1.317,14,0.556,15,2.046,19,1.098,26,0.821,28,2.404,39,1.365,55,2.085,90,1.501,93,2.164,128,3.939,136,2.849,144,3.355,148,1.449,154,2.351,156,1.64,159,2.255,179,4.06,204,3.645,218,2.637,224,2.403,265,2.973,391,3.826,392,3.355,474,3.645,516,4.063,517,3.355,539,4.68,556,3.645,582,3.028,618,4.043,635,2.694,637,2.125,638,2.21,715,2.085,816,2.637,823,2.938,833,4.498,842,2.27,894,4.043,932,4.314,944,2.938,968,4.043,974,5.129,998,3.028,1021,3.49,1024,3.826,1045,3.49,1171,4.314,1173,4.678,1174,3.645,1175,4.678,1176,3.49,1177,3.126,1178,4.678,1179,4.678,1180,4.678,1181,4.678,1182,3.49,1183,4.678]],["title/advanced/ruleFolder/",[1184,4.137]],["text/advanced/ruleFolder/",[4,1.202,10,1.752,12,0.716,13,1.159,14,0.578,16,0.609,19,1.393,24,0.916,26,0.812,27,0.755,28,1.528,29,1.503,35,0.693,39,0.532,40,1.26,44,1.505,46,1.729,47,0.812,50,1.107,51,0.896,54,1.112,56,0.693,57,1.11,76,0.564,80,1.306,85,1.26,88,0.878,90,1.094,93,1.055,94,1.26,95,1.537,104,1.416,111,0.704,114,0.582,117,1.079,118,0.957,121,0.797,130,1.571,134,1.537,136,0.828,148,0.947,152,2.558,154,0.916,156,1.385,157,1.92,159,1.905,160,0.755,161,1.606,163,1.795,164,0.936,165,1.359,167,1.26,180,1.389,200,1.474,209,0.797,211,3.239,212,1.144,213,0.797,214,0.936,220,2.587,223,1.002,241,0.6,243,0.704,247,1.416,260,1.419,264,1.815,265,1.82,277,0.979,300,1.682,305,0.844,309,1.866,310,0.979,334,0.957,337,1.986,347,1.179,357,1.217,370,1.313,380,0.936,390,1.217,395,0.861,409,1.179,419,1.179,422,1.979,443,1.26,467,1.053,475,2.193,484,1.306,486,0.828,498,1.217,499,1.217,501,1.217,502,1.217,514,1.26,549,1.217,552,0.797,566,0.878,570,1.082,573,2.114,581,2.193,582,1.179,583,0.896,585,1.217,588,1.179,590,1.217,622,1.574,632,1.306,634,0.957,635,2.398,638,1.445,641,2.383,643,1.26,648,1.26,650,1.144,651,1.306,660,1.082,662,1.637,664,0.957,688,1.26,691,1.359,695,1.419,699,1.68,715,1.363,722,1.26,729,1.306,745,1.979,763,1.574,767,2.983,790,2.733,833,2.834,842,1.867,870,1.082,901,1.179,917,1.26,962,1.419,1018,1.306,1021,1.359,1022,2.748,1023,3.239,1026,3.952,1027,1.419,1028,1.822,1029,1.822,1030,1.822,1032,2.82,1035,1.574,1036,2.193,1037,0.957,1038,4.167,1039,1.49,1041,4.019,1042,2.643,1043,1.822,1045,1.359,1053,1.26,1070,3.785,1077,1.26,1081,3.232,1085,1.574,1086,1.574,1087,1.419,1090,1.574,1091,3.841,1092,1.359,1093,2.044,1094,1.419,1095,1.92,1096,1.26,1097,1.574,1098,1.768,1099,1.574,1100,1.574,1101,1.306,1102,1.574,1103,1.574,1104,1.574,1131,1.49,1138,2.383,1139,1.306,1140,1.574,1141,1.574,1142,1.574,1143,1.574,1144,2.558,1145,1.419,1146,1.574,1147,1.419,1148,1.419,1149,0.957,1185,5.151,1186,3.42,1187,2.82,1188,1.217,1189,2.037,1190,2.037,1191,2.037,1192,2.037,1193,1.359,1194,3.42,1195,2.037,1196,1.68,1197,2.037,1198,2.037,1199,2.037,1200,2.037,1201,3.785,1202,2.037,1203,2.037,1204,3.42,1205,2.037,1206,1.306,1207,1.822,1208,2.037,1209,2.037,1210,1.68,1211,2.037,1212,1.822,1213,1.822,1214,1.822]],["title/advanced/ruleFolder/#flattenfolderresults",[1212,5.769]],["text/advanced/ruleFolder/#flattenfolderresults",[4,1.19,16,2.06,26,1.081,154,3.096,220,2.382,260,4.8,300,3.389,573,4.259,635,2.645,715,2.745,767,3.562,790,5.171,1038,4.596,1041,4.8,1042,5.323,1085,5.323,1086,5.323,1087,4.8,1090,5.323,1213,6.161,1214,6.161]],["title/advanced/ruleFolder/#resolvewith",[1091,3.733]],["text/advanced/ruleFolder/#resolvewith",[4,1.175,10,2.033,13,1.114,14,0.573,19,1.65,24,1.728,26,0.886,44,2.485,46,1.504,54,2.097,57,0.74,76,1.065,80,2.465,90,1.072,93,1.743,94,2.377,114,1.098,118,1.805,121,1.504,130,1.765,134,2.538,148,1.065,152,3.269,157,2.159,160,1.424,163,1.561,164,1.765,180,1.561,200,1.657,211,4.414,212,2.159,213,1.504,214,1.765,220,2.315,247,2.339,264,2.041,337,3.009,357,2.297,380,1.765,390,2.297,409,2.225,419,2.225,422,3.269,467,1.988,475,2.465,484,2.465,486,1.561,549,2.297,552,1.504,566,1.657,570,2.041,581,2.465,582,2.225,583,1.691,585,2.297,590,2.297,634,1.805,635,2.834,638,1.624,641,3.935,643,2.377,650,2.159,660,2.041,662,2.092,688,2.377,695,2.678,722,2.377,745,2.225,763,2.971,767,1.988,842,1.244,901,2.225,917,2.377,1018,2.465,1022,2.041,1038,4.467,1039,2.811,1041,3.935,1045,2.565,1053,2.377,1081,4.13,1091,4.55,1092,2.565,1093,3.375,1094,2.678,1095,3.172,1096,2.377,1097,2.971,1098,1.988,1099,2.971,1100,2.971,1101,2.465,1102,2.971,1103,2.971,1104,2.971,1131,2.811,1138,3.935,1139,2.465,1140,2.971,1141,2.971,1142,2.971,1143,2.971,1144,3.875,1145,2.678,1146,2.971,1147,2.678,1148,2.678,1149,1.805]],["title/advanced/sampleDocsOutput/",[860,5.769]],["text/advanced/sampleDocsOutput/",[1,0.702,4,1.209,13,1.542,14,0.532,19,1.214,26,1.024,28,2.329,90,0.574,93,2.312,95,2.117,117,1.686,156,1.813,197,3.104,224,2.163,229,2.768,243,2,248,2.182,265,2.636,281,2.76,332,3.64,451,1.939,452,2.107,689,3.875,802,3.348,816,2.375,823,4.394,824,3.577,842,0.979,1002,3.248,1023,2.645,1037,1.42,1215,4.365,1216,5,1217,4.836,1218,4.338,1219,3.444,1220,5.639,1221,3.142,1222,2.212,1223,2.212,1224,2.212,1225,2.705,1226,5.385,1227,5.385,1228,4.212,1229,4.47,1230,2.705]],["title/advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings",[117,0.486,224,1.193,248,0.98,281,0.742,689,1.343,842,0.841,1002,2.345]],["text/advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings",[]],["title/advanced/sampleDocsOutput/#ruleset-id-1-1",[117,0.737,281,1.643,1037,1.852]],["text/advanced/sampleDocsOutput/#ruleset-id-1-1",[]],["title/advanced/sampleDocsOutput/#rule-id-2-1-1-warnings",[13,0.521,117,0.586,229,1.225,281,1.382,689,1.619]],["text/advanced/sampleDocsOutput/#rule-id-2-1-1-warnings",[4,1.086,13,1.191,14,0.47,19,1.501,26,1.122,117,1.338,156,2.242,248,2.698,265,2.515,281,2.042,816,3.606,823,4.804,824,4.423,1023,4.017,1215,4.313,1216,5.708,1217,4.275,1218,4.14]],["title/advanced/sampleDocsOutput/#rule-id-6-1-1-warnings",[13,0.521,117,0.586,281,1.382,689,1.619,1218,1.813]],["text/advanced/sampleDocsOutput/#rule-id-6-1-1-warnings",[4,0.908,13,1.274,117,1.432,248,2.888,265,2.692,281,2.186,816,3.86,1023,4.3,1215,3.86,1217,4.576,1219,5.599]],["title/advanced/sampleDocsOutput/#rule-id-4-1-",[13,0.656,117,0.737,281,1.126,802,2.282]],["text/advanced/sampleDocsOutput/#rule-id-4-1-",[4,1.165,14,0.495,28,1.993,93,2.72,1215,3.793,1217,5.268,1220,6.142]],["title/advanced/sampleDocsOutput/#rule-id-5-1-",[13,0.656,117,0.737,281,1.126,1221,2.631]],["text/advanced/sampleDocsOutput/#rule-id-5-1-",[1,1.717,4,1.16,14,0.574,26,1.16,28,1.959,93,2.692,332,6.744,1215,3.729,1217,5.215]],["title/advanced/sampleDocsOutput/#rule-id-16-1-3-errors",[13,0.521,117,0.586,224,1.438,281,0.894,451,2.008,1002,1.759]],["text/advanced/sampleDocsOutput/#rule-id-16-1-3-errors",[4,1.128,1215,3.953,1222,5.734,1223,5.734,1224,5.734]],["title/advanced/sampleDocsOutput/#output-rules",[13,0.886,265,1.872]],["text/advanced/sampleDocsOutput/#output-rules",[]],["title/advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings",[13,0.473,117,0.531,265,0.999,281,1.28,689,1.468,1218,1.644]],["text/advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings",[4,1.111,13,1.26,14,0.498,28,2.004,197,3.134,229,2.96,281,2.161,1215,3.815,1217,4.523,1220,6.163]],["title/advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings",[13,0.473,117,0.531,265,0.999,281,1.28,689,1.468,1219,2.077]],["text/advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings",[4,1.091,13,1.204,14,0.476,19,1.518,26,1.135,156,2.267,197,2.995,229,3.368,281,2.065,823,4.836,824,4.472,1215,4.341,1216,5.745,1217,4.322,1218,4.186]],["title/advanced/sampleDocsOutput/#lambdas",[28,1.708]],["text/advanced/sampleDocsOutput/#lambdas",[]],["title/advanced/sampleDocsOutput/#lambda-test",[28,1.41,93,1.642]],["text/advanced/sampleDocsOutput/#lambda-test",[]],["title/advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1",[13,0.521,117,0.586,281,1.382,689,1.619,1218,1.813]],["text/advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1",[4,0.872,13,1.224,28,2.303,93,2.269,95,3.909,156,2.305,197,3.046,243,2.543,281,2.483,802,4.257,823,4.884,824,4.547,1215,3.708,1221,4.907]],["title/advanced/sampleDocsOutput/#lambda-testcaller2",[28,1.41,1220,3.708]],["text/advanced/sampleDocsOutput/#lambda-testcaller2",[]],["title/advanced/sampleDocsOutput/#rule-id-7-2-",[13,0.656,117,0.737,229,1.542,1225,3.527]],["text/advanced/sampleDocsOutput/#rule-id-7-2-",[4,1.185,13,1.117,14,0.441,19,1.408,26,1.053,28,1.777,90,1.273,197,3.687,243,2.32,265,2.36,281,2.35,802,3.884,1215,3.384,1216,5.492,1218,3.884,1220,4.676,1226,6.789,1227,6.789,1228,7.361,1229,5.186]],["title/advanced/sampleDocsOutput/#lambda-testcaller3",[28,1.41,1229,4.113]],["text/advanced/sampleDocsOutput/#lambda-testcaller3",[]],["title/advanced/sampleDocsOutput/#rule-id-8-1-",[13,0.656,117,0.737,281,1.126,452,2.748]],["text/advanced/sampleDocsOutput/#rule-id-8-1-",[4,1.192,14,0.476,28,2.281,243,2.5,823,4.061,1220,6,1226,7.102,1227,7.102,1229,5.589,1230,6.468]],["title/advanced/sampleDocsValidation/",[847,5.769]],["text/advanced/sampleDocsValidation/",[4,1.187,28,2.217,39,1.424,90,1.722,95,2.453,117,1.718,128,3.659,156,2.417,160,2.994,210,4.678,224,2.507,229,2.822,243,2.795,248,2.059,281,2.553,337,2.453,385,3.131,423,3.06,438,3.37,451,2.354,638,3.414,689,2.823,755,3.501,823,3.659,824,4.029,842,1.767,1206,5.184,1215,4.508,1216,3.642,1217,3.262,1218,2.125,1219,2.685,1222,5.64,1223,5.64,1224,5.64,1231,4.502,1232,5.951,1233,4.502,1234,5.036,1235,4.502,1236,3.642,1237,5.828,1238,3.283,1239,3.283,1240,3.283]],["title/advanced/sampleDocsValidation/#errors-summary",[224,2.444,1231,4.39]],["text/advanced/sampleDocsValidation/#errors-summary",[39,1.93,210,5.373,243,3.21,281,2.651,337,3.324,1222,5.409,1223,5.409,1224,5.409,1232,7.197,1233,6.1]],["title/advanced/sampleDocsValidation/#warnings-summary",[689,2.752,1231,4.39]],["text/advanced/sampleDocsValidation/#warnings-summary",[28,2.311,39,1.93,90,1.656,128,4.153,156,2.735,229,2.893,281,2.112,337,3.324,385,3.554,423,3.473,1215,3.729,1234,5.716,1235,6.1,1236,4.935]],["title/advanced/sampleDocsValidation/#errors-identified-for-rulesuite-id-0-1",[117,0.586,224,1.438,248,1.181,281,0.894,755,2.008,842,1.014]],["text/advanced/sampleDocsValidation/#errors-identified-for-rulesuite-id-0-1",[]],["title/advanced/sampleDocsValidation/#id-16-1",[117,0.847,281,1.294,451,2.905]],["text/advanced/sampleDocsValidation/#id-16-1",[4,1.169,90,1.63,117,1.606,160,3.182,210,4.972,243,2.97,638,3.629,1206,5.509,1215,4.331,1222,6.6,1223,6.6,1224,6.6,1232,6.462,1233,5.114,1237,7.683]],["title/advanced/sampleDocsValidation/#warnings-identified-for-rulesuite-id-0-1",[117,0.586,248,1.181,281,0.894,689,1.619,755,2.008,842,1.014]],["text/advanced/sampleDocsValidation/#warnings-identified-for-rulesuite-id-0-1",[]],["title/advanced/sampleDocsValidation/#id-2-1",[117,0.847,229,1.772,281,1.294]],["text/advanced/sampleDocsValidation/#id-2-1",[4,1.146,28,1.874,90,1.612,117,1.323,128,3.973,156,2.218,160,2.621,385,3.4,423,3.323,438,3.658,638,2.989,823,3.973,824,4.375,1206,4.537,1215,4.285,1216,4.72,1217,4.228,1234,5.468,1238,6.328]],["title/advanced/sampleDocsValidation/#id-1002-1",[117,0.847,281,1.294,1219,3.313]],["text/advanced/sampleDocsValidation/#id-1002-1",[4,1.143,28,1.854,90,1.602,117,1.309,128,3.931,156,2.194,160,2.593,229,3.303,385,3.363,423,3.287,438,3.619,638,2.957,823,3.931,824,4.328,1206,4.489,1215,4.257,1216,4.67,1217,4.183,1234,5.409,1239,6.26]],["title/advanced/sampleDocsValidation/#id-6-1",[117,0.847,281,1.294,1218,2.622]],["text/advanced/sampleDocsValidation/#id-6-1",[4,1.086,28,2.424,90,1.623,95,3.845,117,1.338,156,2.242,160,2.65,438,3.699,638,3.022,823,4.017,824,4.423,1206,4.587,1215,4.313,1235,5.899,1236,4.772,1240,6.397]],["title/advanced/userFunctions/",[26,0.711,34,2.036,102,2.081]],["text/advanced/userFunctions/",[1,0.846,4,1.216,10,0.258,12,0.299,13,0.606,14,0.491,15,0.616,16,1.478,19,0.844,20,1.639,22,0.692,23,0.544,24,1.637,26,1.195,27,1.016,28,2.12,29,0.535,33,0.451,34,0.988,37,1.318,38,1.151,39,1.049,45,0.947,46,0.616,47,1.283,48,2.909,49,2.191,50,1.302,51,0.374,53,0.621,54,0.464,55,1.093,56,0.289,59,0.616,70,0.545,73,0.374,76,0.235,79,0.508,85,0.525,89,0.299,90,1.03,93,0.846,95,2.222,98,0.492,99,0.545,100,1.097,101,0.366,102,1.259,103,0.773,104,0.652,106,1.216,111,0.948,114,0.449,115,0.947,117,1.157,124,3.606,129,3.195,132,2.005,134,0.382,135,0.86,137,1.532,138,0.592,139,0.844,140,0.747,141,0.592,142,0.418,149,0.508,150,1.607,151,4.248,152,0.911,153,0.464,154,0.382,155,2.065,156,1.988,159,0.678,161,0.739,163,1.633,164,0.723,165,0.567,177,0.665,178,0.439,179,0.492,180,1.114,192,2.941,193,1.298,194,1.298,196,0.39,197,1.933,198,0.451,199,0.418,201,0.525,202,0.492,203,0.408,209,1.706,210,0.492,211,0.477,213,0.332,214,1.259,217,0.477,220,2.193,224,0.39,229,2.812,231,0.309,236,1.207,237,1.452,243,1.508,244,1.137,247,0.352,248,1.034,252,1.496,264,0.451,273,0.707,274,0.408,277,0.408,281,0.919,290,0.567,291,0.428,297,1.05,305,0.352,309,0.859,310,0.408,313,0.508,314,0.451,315,0.884,334,0.739,336,0.508,342,0.492,347,1.587,356,1.182,357,0.94,380,0.39,385,0.408,392,1.009,395,0.359,397,0.492,398,0.621,403,1.532,419,0.492,430,0.835,438,1.418,475,0.545,486,0.639,504,0.657,509,2.148,516,0.408,524,0.545,559,0.621,562,0.477,566,0.366,569,1.318,570,2.477,573,0.525,577,0.399,583,1.417,584,0.774,586,0.592,588,0.911,611,2.244,614,0.592,620,0.657,628,0.657,629,0.657,631,0.525,632,0.545,635,0.844,637,1.114,639,1.081,643,0.525,646,0.508,648,0.525,662,1.193,664,0.399,668,0.567,669,1.009,674,0.508,675,0.621,676,1.199,687,1.216,691,0.567,693,1.532,697,0.592,707,1.056,715,0.876,717,0.657,720,0.477,722,0.973,727,0.545,730,0.621,732,0.592,739,0.525,765,4.939,767,1.418,781,2.816,802,0.911,807,1.056,818,0.545,822,0.621,833,1.758,837,0.621,842,0.509,843,1.199,853,1.837,877,0.545,884,2.488,919,0.76,923,1.009,927,1.699,930,0.592,942,1.808,947,0.621,956,0.508,967,0.621,969,0.592,974,0.621,983,0.492,985,1.097,998,0.492,1002,3.278,1008,0.657,1015,0.592,1036,2.579,1053,0.973,1057,0.621,1062,0.835,1076,0.657,1092,1.467,1094,1.097,1095,1.234,1098,0.439,1101,1.009,1111,1.151,1117,0.508,1128,0.545,1136,0.567,1149,2.191,1152,0.657,1188,0.508,1193,1.05,1196,1.813,1201,1.151,1207,0.76,1218,1.272,1221,1.467,1236,0.567,1241,2.88,1242,3.258,1243,2.656,1244,0.85,1245,0.85,1246,2.452,1247,2.452,1248,0.701,1249,0.85,1250,0.85,1251,1.05,1252,0.85,1253,0.85,1254,1.574,1255,0.85,1256,0.85,1257,3.189,1258,0.85,1259,1.216,1260,1.574,1261,0.492,1262,0.85,1263,0.701,1264,0.76,1265,1.407,1266,0.76,1267,1.407,1268,0.657,1269,1.009,1270,0.657,1271,0.657,1272,0.76,1273,0.657,1274,0.76,1275,0.76,1276,0.76,1277,0.76,1278,0.884,1279,4.173,1280,3.782,1281,2.656,1282,3.596,1283,2.452,1284,0.76,1285,1.699,1286,3.258,1287,1.407,1288,0.76,1289,1.966,1290,0.76,1291,0.76,1292,0.76,1293,0.76,1294,0.76,1295,0.76,1296,0.76,1297,0.76,1298,1.298,1299,0.76,1300,0.76,1301,0.76,1302,0.76,1303,0.76,1304,0.76,1305,0.76,1306,0.76,1307,1.407,1308,1.407,1309,0.76,1310,0.76,1311,0.76,1312,0.657,1313,0.76,1314,2.452,1315,1.407,1316,1.966,1317,0.76,1318,1.407,1319,0.76,1320,0.76,1321,1.407,1322,1.407,1323,0.76,1324,0.657,1325,0.657,1326,0.657,1327,0.657,1328,2.452,1329,0.76,1330,0.76,1331,0.76,1332,0.525,1333,0.657,1334,0.545,1335,0.76,1336,1.151,1337,0.76,1338,1.097,1339,0.76,1340,1.298,1341,0.76,1342,0.621,1343,0.701,1344,0.76,1345,0.657,1346,3.258,1347,0.701,1348,1.407,1349,0.76,1350,0.76,1351,0.76,1352,0.76,1353,0.76,1354,1.966,1355,0.76,1356,1.966,1357,0.76,1358,0.76,1359,1.407,1360,0.76,1361,0.76,1362,0.76,1363,0.657,1364,0.76,1365,1.216,1366,0.76,1367,1.699,1368,0.657,1369,0.76,1370,0.76,1371,0.76,1372,0.76,1373,0.76,1374,0.76,1375,0.76,1376,0.76,1377,0.657,1378,0.76,1379,0.76,1380,0.76,1381,0.76,1382,0.545,1383,0.76,1384,0.545,1385,0.545,1386,0.76,1387,0.545,1388,1.407,1389,0.76,1390,0.76]],["title/advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas",[28,0.752,139,1.09,156,1.405,252,2.446,583,1.25]],["text/advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas",[4,1.227,13,1.086,28,1.983,34,2.932,117,1.4,151,4.803,156,2.045,161,2.209,180,1.91,197,1.948,209,2.929,220,2.589,229,3.164,243,2.255,252,3.559,281,1.343,569,3.599,583,2.87,611,5.218,635,1.806,715,2.6,767,3.872,853,2.371,884,5.041,1002,2.641,1036,3.016,1241,7.233,1242,6.698,1243,3.879,1246,6.698,1247,6.698,1257,3.439,1264,4.206,1265,5.834,1266,4.206,1267,5.834]],["title/advanced/userFunctions/#higher-order-functions",[26,0.711,45,1.953,46,1.772]],["text/advanced/userFunctions/#higher-order-functions",[1,0.562,4,1.219,14,0.447,15,0.535,16,1.722,19,1.048,20,2.359,23,0.473,24,2.244,26,1.276,28,1.979,29,0.465,33,0.726,34,0.614,37,1.896,38,1,39,1.178,45,0.589,46,0.535,47,1.799,48,3.842,49,2.849,50,1.056,51,0.602,59,0.535,73,0.602,90,0.259,93,1.007,95,1.466,98,0.791,100,1.688,102,1.113,103,0.852,104,0.566,111,1.128,115,1.406,117,1.231,124,4.689,129,3.89,132,2.886,135,0.948,137,2.273,138,0.952,139,0.525,140,1.109,141,0.952,142,0.673,149,0.817,150,2.386,151,4.484,152,1.402,153,0.746,154,0.614,155,0.877,156,1.902,159,0.589,161,0.642,163,2.195,164,1.113,179,0.791,192,3.952,197,1.003,198,0.726,199,0.673,201,0.845,210,0.791,217,0.768,220,2.35,229,3.067,236,1.436,237,1.3,248,1.488,264,0.726,281,0.692,290,0.912,297,1.616,305,0.566,309,0.746,315,1.361,334,1.138,336,0.817,347,2.284,356,1.701,357,1.448,380,0.628,392,0.877,397,0.791,419,0.791,430,1.286,438,0.707,475,0.877,486,0.555,570,3.221,573,0.845,584,0.673,586,0.952,588,1.402,614,0.952,628,1.056,631,0.845,635,0.93,637,0.984,639,0.673,662,1.673,676,1.322,693,2.273,697,0.952,707,1.568,720,0.768,722,0.845,727,0.877,730,1,732,0.952,739,0.845,765,5.725,781,3.859,802,1.402,818,0.877,822,1,833,2.092,837,1,843,1.78,853,1.99,877,0.877,923,0.877,927,2.521,942,0.768,947,1,956,0.817,983,0.791,985,1.688,998,0.791,1002,3.926,1008,1.056,1015,0.952,1036,2.531,1053,0.845,1057,1,1062,0.726,1076,1.056,1092,2.177,1094,1.688,1117,0.817,1128,0.877,1149,0.642,1193,0.912,1218,1.888,1221,2.177,1243,2.691,1257,3.302,1259,1.056,1268,1.056,1269,0.877,1270,1.056,1271,1.056,1272,1.223,1273,1.056,1274,1.223,1275,1.223,1276,1.223,1277,1.223,1278,0.768,1279,5.426,1280,4.736,1281,3.255,1282,4.833,1283,3.53,1284,1.223,1285,2.521,1286,4.466,1287,2.167,1288,1.223,1289,2.918,1290,1.223,1291,1.223,1292,1.223,1293,1.223,1294,1.223,1295,1.223,1296,1.223,1297,1.223,1298,1.127,1299,1.223,1300,1.223,1301,1.223,1302,1.223,1303,1.223,1304,1.223,1305,1.223,1306,1.223,1307,2.167,1308,2.167,1309,1.223,1310,1.223,1311,1.223,1312,1.056,1313,1.223,1314,3.53,1315,2.167,1316,2.918,1317,1.223,1318,2.167,1319,1.223,1320,1.223,1321,2.167,1322,2.167,1323,1.223,1324,1.056,1325,1.056,1326,1.056,1327,1.056,1328,3.53,1329,1.223,1330,1.223,1331,1.223,1332,0.845,1333,1.056,1334,0.877,1335,1.223,1336,1,1337,1.223,1338,1.688,1339,1.223,1340,1.127,1341,1.223,1342,1,1343,1.127,1344,1.223]],["title/advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations",[1,0.81,38,2.553,1095,1.96,1149,1.639,1345,2.698]],["text/advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations",[1,1.485,4,1.172,14,0.545,15,1.393,19,0.747,22,1.567,23,1.231,26,0.559,27,2.371,28,1.695,50,2.071,55,2.127,70,2.284,76,0.986,79,2.128,85,2.202,89,1.252,90,1.617,95,3.422,101,1.535,106,4.124,111,1.231,114,1.017,117,0.666,134,1.6,139,1.367,151,2.284,155,4.558,165,2.376,180,1.446,197,2.21,202,2.061,209,2.78,214,3.264,237,1.419,243,2.457,244,2.759,273,2.398,291,1.795,314,1.89,385,1.711,392,2.284,395,1.504,398,2.604,403,4.459,438,3.309,509,5.079,516,1.711,559,2.604,632,2.284,639,1.752,648,2.202,668,2.376,674,2.128,676,1.943,691,2.376,722,2.202,807,1.711,853,1.795,942,3.991,967,2.604,969,2.481,1036,2.284,1062,1.89,1095,2.996,1101,2.284,1111,2.604,1136,2.376,1149,3.338,1152,2.752,1236,2.376,1251,2.376,1269,2.284,1281,2.937,1298,2.937,1336,2.604,1340,2.937,1346,7.148,1347,2.937,1348,4.772,1349,3.184,1350,3.184,1351,3.184,1352,3.184,1353,3.184,1354,5.723,1355,3.184,1356,5.723,1357,3.184,1358,3.184,1359,4.772,1360,3.184,1361,3.184,1362,3.184,1363,2.752,1364,3.184,1365,4.124,1366,3.184,1367,4.945,1368,2.752,1369,3.184,1370,3.184,1371,3.184,1372,3.184,1373,3.184,1374,3.184,1375,3.184,1376,3.184,1377,2.752,1378,3.184,1379,3.184]],["title/advanced/userFunctions/#why-do-all-this",[]],["text/advanced/userFunctions/#why-do-all-this",[4,1.133,10,1.798,26,0.929,27,2.193,28,2.226,45,2.552,56,2.013,93,1.826,99,3.796,104,2.452,114,1.69,177,2.501,180,2.405,203,2.844,237,2.359,244,3.061,277,2.844,281,1.69,313,3.538,504,4.575,566,2.552,583,3.347,584,2.912,639,2.912,646,3.538,664,2.78,717,4.575,807,3.655,923,3.796,930,4.125,1111,4.329,1149,3.948,1188,3.538,1196,6.933,1278,3.324,1380,5.294,1381,5.294,1382,3.796,1383,5.294,1384,3.796,1385,3.796,1386,5.294,1387,3.796,1388,6.803,1389,5.294,1390,5.294]],["title/advanced/validation/",[218,3.252]],["text/advanced/validation/",[1,1.381,4,1.184,10,1.575,13,0.687,14,0.532,15,1.615,16,0.766,19,0.537,26,1.197,27,1.921,28,1.374,29,1.404,30,1.127,35,2.023,39,0.668,44,1.127,45,1.104,50,1.336,55,1.021,57,0.998,62,1.979,69,1.061,76,0.709,89,0.901,90,0.486,93,0.79,95,1.151,101,2.564,103,2.452,111,1.793,114,0.731,117,0.772,121,2.029,128,3.341,130,1.176,134,2.331,136,1.04,137,1.785,146,1.531,152,1.482,156,2.392,159,1.104,163,1.04,177,1.744,185,1.324,197,1.71,204,1.785,213,3.296,214,1.176,215,3.1,217,2.913,218,4.078,224,1.896,231,0.932,236,1.127,243,1.427,265,2.092,291,2.081,334,1.203,365,1.324,369,1.531,370,0.984,378,2.553,383,1.785,392,1.642,405,2.135,430,1.36,445,1.531,459,2.999,516,1.984,554,1.438,562,2.318,566,1.104,577,1.939,583,1.817,600,1.979,630,3.1,637,2.107,638,2.756,645,1.642,650,1.438,662,1.529,669,1.642,686,2.112,707,1.231,715,1.021,720,1.438,762,1.873,799,1.979,818,1.642,833,3.326,840,1.873,842,2.374,844,3.405,903,1.785,978,3.326,986,1.531,1022,2.192,1046,1.873,1047,1.785,1053,1.584,1077,2.553,1093,2.467,1117,1.531,1132,1.642,1149,2.436,1176,1.709,1177,3.1,1182,1.709,1206,1.642,1251,1.709,1263,3.405,1269,1.642,1343,2.112,1345,1.979,1347,2.112,1363,3.191,1365,3.191,1391,2.112,1392,2.112,1393,2.112,1394,5.389,1395,4.128,1396,5.32,1397,2.112,1398,2.561,1399,3.692,1400,3.692,1401,2.561,1402,2.561,1403,2.561,1404,2.561,1405,2.561,1406,2.112,1407,2.291,1408,4.639,1409,2.291,1410,3.692,1411,2.291,1412,2.291,1413,3.405,1414,2.291,1415,2.291,1416,2.291,1417,1.642,1418,2.291,1419,2.291,1420,2.291,1421,2.291,1422,2.291,1423,2.291,1424,2.291,1425,2.291,1426,2.291,1427,2.291,1428,1.979,1429,2.291,1430,1.979]],["title/advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs",[10,1.06,93,1.077,134,1.569,842,1.13,1177,2.086]],["text/advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs",[1,0.934,4,1.21,14,0.527,15,1.573,19,0.844,26,1.078,27,1.49,30,1.77,35,2.563,39,1.049,50,1.302,57,1.124,89,1.414,90,0.763,101,2.962,103,2.416,111,2.376,114,1.148,117,0.752,121,1.573,128,3.278,130,1.847,134,1.808,137,2.802,146,2.403,152,2.328,156,2.154,177,2.466,204,2.802,213,3.37,218,3.464,231,1.464,265,2.651,365,2.08,370,1.544,378,3.609,383,2.802,405,2.08,445,2.403,459,3.801,554,2.258,583,1.77,637,2.371,638,1.699,650,2.258,833,3.743,840,2.941,842,2.44,844,4.814,1022,3.099,1046,2.941,1047,2.802,1117,2.403,1132,2.579,1176,2.683,1177,2.403,1345,3.108,1363,4.511,1365,3.108,1394,3.108,1396,6.145,1399,3.597,1400,3.597,1407,3.597,1408,6.145,1409,3.597,1410,5.22,1411,3.597,1412,3.597,1413,3.317,1414,3.597,1415,3.597,1416,3.597,1417,2.579,1418,3.597,1419,3.597,1420,3.597,1421,3.597,1422,3.597,1423,3.597]],["title/advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it",[136,1.418,213,1.366,217,1.96,577,1.639,1177,2.086]],["text/advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it",[14,0.51,62,5.987,76,2.146,156,2.429,163,3.147,213,3.03,217,4.351,577,3.638,1413,6.39]],["title/advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating",[218,2.683,1424,4.76]],["text/advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating",[1,1.792,14,0.398,16,1.811,28,2.044,29,2.059,44,2.665,45,2.611,69,2.509,128,4.335,156,2.663,185,3.132,214,2.782,215,5.078,218,3.892,243,2.094,291,3.892,334,2.844,369,3.62,516,3.709,562,4.335,566,2.611,583,2.665,630,5.078,638,2.559,645,3.884,662,2.244,715,2.414,978,4.951,1077,4.773,1149,3.99,1206,3.884,1263,6.367,1425,5.417,1426,5.417,1427,5.417,1428,4.681,1429,5.417,1430,4.681]],["title/background/about/",[1431,6.45]],["text/background/about/",[1,1.653,4,0.78,6,3.177,10,0.931,12,3.103,13,1.353,14,0.384,15,1.862,16,1.745,18,2.944,19,1.381,20,3.488,21,2.528,22,1.35,26,0.481,30,2.095,40,2.944,41,3.318,46,1.2,51,1.35,54,1.673,55,1.898,56,2.563,57,1.565,58,2.137,59,1.2,61,2.845,69,2.725,73,1.35,76,1.319,84,2.37,89,1.674,90,0.582,101,1.322,102,1.409,103,1.078,107,1.586,111,1.646,114,1.666,121,1.2,127,2.845,139,1.178,142,1.509,148,0.85,160,1.764,164,1.409,166,2.243,176,2.137,178,1.586,180,1.246,185,1.586,189,3.482,196,1.409,197,1.27,199,2.343,203,1.474,213,1.2,231,1.116,241,1.402,243,1.06,265,1.674,294,2.095,310,1.474,354,2.598,380,1.409,395,1.296,405,1.586,419,1.775,430,2.528,480,1.896,534,1.967,555,2.37,556,2.137,560,1.322,562,2.674,566,1.322,584,2.343,589,2.046,634,2.236,637,1.934,651,1.967,653,1.896,659,2.137,662,2.162,664,1.44,705,2.14,718,1.967,729,1.967,731,1.722,750,1.896,755,1.967,770,2.243,807,1.474,843,1.673,870,4.002,901,2.756,917,2.944,937,2.243,942,1.722,977,2.37,983,1.775,1017,2.137,1020,3.318,1025,2.462,1057,2.243,1080,1.967,1114,2.674,1134,2.845,1136,3.177,1137,2.37,1138,2.137,1155,1.967,1160,2.37,1184,1.967,1188,1.833,1236,2.046,1261,1.775,1269,1.967,1270,2.37,1325,2.37,1334,3.053,1384,1.967,1387,1.967,1392,2.529,1432,4.268,1433,2.743,1434,3.927,1435,3.482,1436,3.927,1437,1.896,1438,2.743,1439,2.743,1440,2.743,1441,2.743,1442,2.743,1443,2.243,1444,2.743,1445,2.743,1446,2.743,1447,2.743,1448,2.743,1449,2.243,1450,4.258,1451,2.743,1452,2.137,1453,2.743,1454,2.743,1455,2.743,1456,2.743,1457,2.743,1458,2.743,1459,4.258,1460,2.743,1461,2.243,1462,2.743,1463,2.046,1464,2.243,1465,1.896,1466,2.743,1467,2.046,1468,2.743,1469,2.743,1470,2.743,1471,2.743,1472,2.743,1473,2.743,1474,2.743]],["title/background/about/#why-quality",[1,1.497]],["text/background/about/#why-quality",[1,1.887,12,3.103,13,1.095,16,1.966,19,1.38,56,2.236,61,3.93,121,2.572,176,4.582,199,3.235,294,2.894,395,2.778,405,3.4,534,4.217,562,3.693,566,2.835,634,3.817,705,2.955,755,4.217,901,4.705,1017,4.582,1114,3.693,1134,3.93,1334,4.217,1432,4.809,1433,5.881,1434,5.424,1435,4.809,1436,5.424,1437,4.066,1438,5.881,1439,5.881,1440,5.881,1441,5.881]],["title/background/about/#gaps-in-existing-spark-offerings",[19,0.827,430,2.093,1334,2.529,1434,3.252]],["text/background/about/#gaps-in-existing-spark-offerings",[1,1.054,10,1.379,12,3.057,13,1.326,14,0.299,18,3.935,19,0.953,22,1.998,30,2.8,40,3.935,41,4.434,54,2.477,55,2.536,56,2.708,57,1.614,58,3.163,59,1.776,69,3.043,73,1.998,76,1.763,84,3.508,89,1.596,101,1.957,102,2.085,107,2.347,111,2.2,114,1.296,127,3.803,142,2.233,148,1.257,160,2.358,164,2.085,166,3.32,180,1.844,189,4.654,196,2.085,199,2.233,203,2.181,213,1.776,231,1.652,241,1.337,243,1.57,294,1.998,310,2.181,354,3.473,380,2.085,419,2.627,430,2.41,555,3.508,556,3.163,562,2.549,637,1.844,651,2.911,653,2.807,662,1.682,731,2.549,807,2.181,843,2.477,870,4.452,917,3.935,937,3.32,1020,3.163,1114,2.549,1134,2.713,1137,3.508,1155,2.911,1160,3.508,1269,2.911,1270,3.508,1325,3.508,1384,2.911,1432,4.654,1435,3.32,1442,4.06,1443,3.32,1444,4.06,1445,4.06,1446,4.06,1447,4.06,1448,4.06,1449,3.32,1450,5.691,1451,4.06,1452,3.163,1453,4.06,1454,4.06,1455,4.06,1456,4.06,1457,4.06,1458,4.06,1459,5.691,1460,4.06]],["title/background/about/#resulting-solution-space",[57,0.872,977,3.501,1136,3.022]],["text/background/about/#resulting-solution-space",[1,1.558,12,2.894,14,0.541,15,2.625,16,2.007,19,1.408,21,3.563,26,1.053,46,2.625,51,2.953,56,2.282,57,1.292,69,2.779,89,2.36,90,1.273,241,1.976,584,3.302,589,4.478,659,4.676,664,3.152,705,3.016,729,4.304,750,4.15,1080,4.304,1136,4.478,1188,4.011,1236,4.478,1461,4.908,1462,6.002,1463,4.478,1464,4.908,1465,4.15,1466,6.002]],["title/background/about/#how-did-rules-and-folder-come-about",[13,0.754,1387,2.905,1392,3.736]],["text/background/about/#how-did-rules-and-folder-come-about",[6,5.259,12,2.201,13,1.312,15,2.449,16,1.872,20,5.156,21,3.323,57,1.205,61,3.741,103,2.201,114,2.251,139,2.404,178,3.237,185,3.237,197,2.593,265,2.772,480,3.871,560,2.698,584,3.08,637,2.543,662,2.92,718,4.015,770,4.578,870,3.323,942,3.516,983,3.624,1020,4.362,1025,4.076,1057,4.578,1138,4.362,1184,4.015,1261,3.624,1436,5.163,1467,4.177,1468,5.599,1469,5.599,1470,5.599,1471,5.599,1472,5.599,1473,5.599,1474,5.599]],["title/background/changelog/",[1475,6.45]],["text/background/changelog/",[1,1.599,2,4.8,3,4.8,4,0.992,19,1.445,29,2.843,196,3.164,310,3.31,533,4.596,633,4.117,718,4.418,870,3.657,924,4.596,962,4.8,998,4.84,1144,3.987,1261,3.987,1432,5.038,1435,5.038,1476,6.161,1477,6.161,1478,6.161,1479,6.161,1480,6.161,1481,6.161,1482,6.161,1483,6.161]],["title/background/changelog/#001-snapshot-5th-march-2023",[2,2.432,3,2.432,1476,3.122,1477,3.122,1478,3.122]],["text/background/changelog/#001-snapshot-5th-march-2023",[29,3.07,533,5.231,633,4.686,718,5.028,962,5.463,1144,4.538]],["title/background/changelog/#the-quality-exploration-starts-25th-april-2020",[1,0.727,998,1.813,1479,2.801,1480,2.801,1481,2.801,1482,2.801]],["text/background/changelog/#the-quality-exploration-starts-25th-april-2020",[19,1.616,196,3.537,310,3.701,870,4.089,924,5.138,998,4.458,1261,4.458,1432,5.632,1435,5.632,1483,6.888]],["title/background/evaluation_method/",[51,2.342,897,4.113]],["text/background/evaluation_method/",[1,0.57,4,1.032,10,1.763,11,2.675,12,0.863,13,1.507,14,0.537,15,1.971,19,0.837,21,1.303,22,1.08,24,1.103,26,0.791,27,1.478,31,1.574,35,2.326,39,0.641,44,1.08,49,1.153,51,1.756,55,1.59,56,2.64,57,0.473,59,0.96,67,1.518,70,1.574,73,1.08,76,0.68,79,2.384,89,0.863,90,1.298,93,1.231,98,1.421,101,1.058,102,1.128,104,2.644,107,2.063,114,1.439,127,1.467,139,2.229,145,1.832,146,1.467,160,1.478,163,0.997,177,1.685,181,1.711,200,2.948,214,1.128,229,0.96,235,1.379,244,2.063,248,0.926,265,0.863,274,1.917,277,1.917,291,1.238,300,3.141,305,1.017,310,1.917,318,1.379,336,3.012,337,1.793,354,2.177,369,2.384,370,1.532,371,1.711,380,1.128,405,1.27,410,1.518,414,1.711,465,1.467,467,1.27,472,1.421,486,0.997,491,1.711,513,1.897,525,1.638,560,1.058,563,1.897,566,1.72,577,1.874,584,1.208,588,1.421,635,0.943,637,0.997,638,2.129,639,1.963,653,1.518,660,2.675,664,1.153,676,1.34,691,1.638,705,1.793,707,1.18,715,0.978,719,1.897,720,2.24,723,1.711,731,2.24,738,1.897,745,1.421,750,2.467,756,1.638,767,2.606,802,1.421,807,2.422,842,1.291,867,1.795,870,1.303,875,1.795,923,1.574,935,1.897,942,1.379,954,1.574,955,1.795,956,1.467,979,1.897,983,1.421,1015,1.711,1022,2.118,1027,1.711,1059,1.518,1095,1.379,1108,3.083,1113,3.895,1114,2.24,1118,1.711,1128,1.574,1132,1.574,1134,1.467,1149,3.646,1150,3.083,1155,3.232,1170,1.897,1174,1.711,1182,2.662,1188,1.467,1248,2.025,1251,1.638,1261,1.421,1273,1.897,1278,1.379,1280,2.78,1312,1.897,1326,3.083,1327,1.897,1333,1.897,1336,1.795,1377,1.897,1382,2.559,1384,1.574,1385,3.722,1417,2.559,1463,2.662,1464,3.686,1465,1.518,1484,3.568,1485,2.196,1486,2.196,1487,1.795,1488,3.291,1489,2.196,1490,3.291,1491,2.196,1492,2.196,1493,2.196,1494,1.711,1495,1.638,1496,2.196,1497,2.196,1498,3.291,1499,2.196,1500,2.196,1501,2.196,1502,2.196,1503,5.19,1504,2.196,1505,2.196,1506,2.196,1507,2.196,1508,3.568,1509,2.196,1510,2.196,1511,2.196,1512,2.196,1513,2.196,1514,2.196,1515,2.196,1516,2.196,1517,3.568,1518,3.568,1519,2.196,1520,2.196,1521,2.196,1522,2.196,1523,2.196,1524,2.196,1525,2.196,1526,2.196,1527,2.196,1528,2.196,1529,2.196,1530,2.196,1531,2.196,1532,2.196,1533,2.196,1534,2.196,1535,2.196,1536,2.196,1537,2.196,1538,2.196,1539,2.196]],["title/background/evaluation_method/#how-should-rules-be-evaluated",[13,0.886,51,2.342]],["text/background/evaluation_method/#how-should-rules-be-evaluated",[1,1.154,4,0.59,14,0.588,19,1.422,26,1.21,27,1.842,35,1.691,39,1.297,44,2.188,56,2.304,57,0.957,70,3.189,73,2.188,76,1.377,89,1.748,90,1.286,102,2.284,104,2.059,107,2.571,114,1.42,127,2.971,160,1.842,163,2.02,200,3.569,214,2.284,274,2.389,277,3.256,291,2.507,310,2.389,318,2.792,354,2.713,371,3.464,465,2.971,472,2.878,513,3.842,560,2.143,653,3.074,660,2.64,664,2.335,691,3.317,705,3.046,723,3.464,731,2.792,738,3.842,750,3.074,756,3.317,767,3.987,870,2.64,935,3.842,942,2.792,954,3.189,955,3.636,956,2.971,1015,3.464,1059,3.074,1114,2.792,1170,3.842,1248,4.101,1251,3.317,1261,2.878,1273,3.842,1336,3.636,1377,3.842,1384,3.189,1385,3.189,1463,4.522,1464,4.956,1465,3.074,1484,6.061,1485,4.447,1486,4.447,1487,3.636,1488,4.101,1489,4.447,1490,4.101,1491,4.447,1492,4.447,1493,4.447,1494,3.464,1495,3.317,1496,4.447,1497,4.447,1498,4.101]],["title/background/evaluation_method/#catalyst-expression-performance",[90,0.859,200,1.953,1464,3.313]],["text/background/evaluation_method/#catalyst-expression-performance",[4,1.049,10,2.008,11,3.117,12,1.089,13,1.56,14,0.471,15,2.297,21,1.644,22,1.362,24,1.391,27,1.147,31,1.985,35,2.432,49,1.454,51,1.362,55,1.912,56,2.684,59,1.211,67,1.914,79,2.866,90,1.114,93,1.48,98,1.792,101,1.335,104,2.738,107,1.601,114,1.37,139,2.539,145,2.203,146,1.85,160,1.147,177,2.026,181,2.157,200,1.335,229,1.211,235,1.739,244,2.48,248,1.168,265,1.089,274,1.488,300,3.52,305,1.282,310,1.488,336,3.509,337,2.156,354,1.689,369,2.866,370,1.842,380,1.422,405,1.601,410,1.914,414,2.157,467,1.601,486,1.258,491,2.157,525,2.066,563,2.393,566,2.067,577,2.252,584,1.523,588,1.792,635,1.189,637,1.258,638,2.48,639,2.36,660,2.546,676,1.689,707,1.488,715,1.234,719,2.393,720,2.693,731,1.739,745,1.792,750,1.914,802,1.792,807,2.821,842,1.552,867,2.264,875,2.264,923,1.985,979,2.393,983,1.792,1022,2.546,1027,2.157,1095,1.739,1108,3.707,1113,4.537,1114,1.739,1118,2.157,1128,1.985,1132,1.985,1134,1.85,1149,3.932,1150,3.707,1155,3.765,1174,2.157,1182,3.2,1188,1.85,1278,1.739,1280,3.342,1312,2.393,1326,3.707,1327,2.393,1333,2.393,1382,3.076,1385,3.765,1417,3.076,1488,2.553,1490,2.553,1498,2.553,1499,2.769,1500,2.769,1501,2.769,1502,2.769,1503,5.913,1504,2.769,1505,2.769,1506,2.769,1507,2.769,1508,4.29,1509,2.769,1510,2.769,1511,2.769,1512,2.769,1513,2.769,1514,2.769,1515,2.769,1516,2.769,1517,4.29,1518,4.29,1519,2.769,1520,2.769,1521,2.769,1522,2.769,1523,2.769,1524,2.769,1525,2.769,1526,2.769,1527,2.769,1528,2.769,1529,2.769,1530,2.769,1531,2.769,1532,2.769,1533,2.769,1534,2.769,1535,2.769,1536,2.769,1537,2.769,1538,2.769,1539,2.769]],["title/background/storage_method/",[705,2.392,897,4.113]],["text/background/storage_method/",[1,0.906,4,0.938,11,3.585,13,1.316,14,0.52,16,1.167,19,0.819,23,1.974,27,1.445,30,1.717,35,1.327,56,1.327,57,1.59,72,3.015,76,2.191,90,1.281,121,1.526,134,1.753,148,1.871,154,1.753,179,2.258,198,2.071,199,1.92,200,1.682,223,1.92,237,2.275,241,2.433,274,2.743,277,3.245,294,1.717,309,2.129,310,1.875,348,3.015,354,2.129,364,3.015,370,1.498,408,5.072,459,1.967,463,2.502,467,2.017,527,2.332,568,2.412,630,2.332,634,1.832,642,3.015,643,2.412,650,2.191,660,2.071,664,3.171,666,3.015,668,3.809,693,2.718,705,3.34,707,1.875,715,1.555,720,2.191,726,2.853,801,2.502,842,1.263,853,1.967,877,2.502,923,3.662,930,2.718,940,4.412,954,2.502,955,2.853,956,2.332,982,2.718,986,3.412,1037,1.832,1059,4.89,1114,4.173,1134,3.412,1149,1.832,1155,2.502,1182,2.603,1332,2.412,1334,3.662,1382,2.502,1384,2.502,1385,3.662,1397,3.218,1461,4.175,1463,3.809,1465,4.595,1487,4.175,1494,4.705,1540,5.218,1541,3.489,1542,3.489,1543,3.489,1544,3.015,1545,3.489,1546,3.489,1547,3.489,1548,4.709,1549,3.489,1550,3.015,1551,2.502,1552,3.015,1553,3.489,1554,2.718,1555,3.489,1556,3.489]],["title/background/storage_method/#how-should-rule-results-be-stored-json-vs-structures",[13,0.521,30,1.378,57,0.603,241,0.922,642,2.42,1465,1.936]],["text/background/storage_method/#how-should-rule-results-be-stored-json-vs-structures",[14,0.492,274,3.595,277,3.595,707,3.595,726,5.471,940,5.781,1059,5.767,1465,4.625,1540,5.781,1541,6.69,1542,6.69,1543,6.69,1544,5.781]],["title/background/storage_method/#udf-created-structures",[23,1.566,241,1.334,1463,3.022]],["text/background/storage_method/#udf-created-structures",[11,3.581,13,1.374,27,2.499,56,2.294,57,1.589,72,5.213,76,1.869,179,3.905,200,2.908,223,3.319,237,2.689,310,3.241,408,5.295,459,3.401,650,3.788,660,3.581,664,3.168,666,5.213,705,3.032,801,4.326,940,5.213,982,4.7,1059,4.171,1114,4.637,1134,4.031,1385,4.326,1463,4.501,1487,4.933,1540,5.213,1545,6.033]],["title/background/storage_method/#expression-created-structures",[23,1.566,90,0.859,241,1.334]],["text/background/storage_method/#expression-created-structures",[11,3.736,13,1.171,14,0.463,57,1.355,90,1.607,121,2.753,237,2.805,354,3.84,364,5.438,408,5.433,643,4.351,668,5.652,1059,4.351,1149,3.305,1334,4.513,1382,4.513,1384,4.513,1385,4.513,1487,5.146,1540,5.438,1546,6.293,1547,6.293,1548,5.804]],["title/background/storage_method/#filtering-costs",[76,1.474,1114,2.989]],["text/background/storage_method/#filtering-costs",[14,0.509,16,1.82,19,1.277,35,2.069,76,2.359,148,2.359,154,2.735,198,3.23,199,2.994,241,1.792,274,2.924,277,3.72,294,2.678,370,2.337,408,3.902,463,3.902,467,3.147,568,3.763,630,3.637,634,2.858,664,3.636,693,4.24,705,2.735,715,2.425,853,3.068,877,3.902,923,4.965,930,4.24,954,3.902,955,4.45,956,3.637,1332,3.763,1334,3.902,1397,5.019,1461,4.45,1465,3.763,1494,5.933,1548,5.019,1549,5.442,1550,4.703,1551,3.902,1552,4.703,1553,5.442,1554,4.24,1555,5.442]],["title/background/storage_method/#structure-model-storage-costs",[241,1.161,705,1.772,986,2.357,1114,2.214]],["text/background/storage_method/#structure-model-storage-costs",[1,1.67,11,3.818,13,1.197,14,0.473,57,1.652,134,3.232,241,2.118,309,3.924,348,5.558,527,4.298,705,3.232,720,4.039,842,2.328,986,4.298,1037,3.378,1134,4.298,1155,4.612,1182,4.799,1461,5.26,1465,4.447,1556,6.432]],["title/getting_started/",[101,1.953,552,1.772,566,1.953]],["text/getting_started/",[1,1.089,3,1.542,4,1.042,10,1.656,14,0.507,17,3.129,19,1.513,27,1.358,29,2.885,34,0.995,44,1.613,46,0.866,55,1.461,65,1.323,69,2.258,73,1.613,93,2.378,95,0.995,114,0.632,117,0.414,142,1.803,144,1.42,145,3.311,153,1.208,180,1.489,188,4.598,196,1.683,200,0.954,202,2.121,203,1.064,212,1.243,215,2.19,224,2.154,231,0.806,236,0.974,237,0.882,247,1.942,290,3.129,291,1.116,294,2.399,295,1.711,346,1.281,356,0.954,370,0.85,371,1.542,385,1.064,389,1.542,390,1.323,395,0.935,409,1.281,426,1.711,514,1.369,552,3.014,560,0.954,562,1.243,577,2.202,583,2.064,594,1.711,601,1.711,630,4.469,632,1.42,633,1.323,634,3.237,635,0.85,650,1.243,662,2.02,676,2,723,1.542,732,1.542,750,1.369,752,3.429,756,2.445,822,1.619,891,1.542,901,1.281,918,1.542,922,1.711,944,1.243,947,1.619,962,2.553,998,1.281,1002,1.243,1047,3.267,1053,2.266,1077,1.369,1080,1.42,1093,1.323,1098,1.145,1125,1.711,1128,1.42,1144,1.281,1145,2.553,1148,1.542,1149,1.721,1176,1.477,1201,2.68,1259,1.711,1332,2.266,1342,2.68,1367,4.213,1368,1.711,1428,1.711,1430,1.711,1437,2.9,1443,2.68,1467,2.445,1551,2.35,1557,1.98,1558,1.98,1559,3.022,1560,4.418,1561,1.98,1562,4.194,1563,4.194,1564,4.194,1565,3.277,1566,4.496,1567,4.194,1568,1.98,1569,1.98,1570,3.022,1571,3.277,1572,3.277,1573,3.277,1574,3.277,1575,2.68,1576,3.007,1577,1.98,1578,1.98,1579,1.98,1580,3.007,1581,1.98,1582,1.98,1583,1.98,1584,3.429,1585,1.98,1586,1.98,1587,1.98,1588,3.022,1589,1.98,1590,1.98,1591,1.98,1592,3.987,1593,3.277,1594,1.98,1595,1.98,1596,1.98,1597,1.98,1598,1.98,1599,1.711,1600,1.98,1601,1.98,1602,1.98,1603,3.022,1604,1.98,1605,1.711,1606,5.684,1607,3.868,1608,5.369,1609,1.98,1610,4.982,1611,4.496,1612,1.98,1613,4.496,1614,1.98,1615,6.662,1616,2.68,1617,1.98,1618,1.98,1619,3.267,1620,3.868,1621,3.868,1622,3.429,1623,3.868,1624,3.022,1625,3.022,1626,1.98,1627,4.194,1628,4.194,1629,1.98,1630,1.98,1631,1.98,1632,1.98,1633,1.98,1634,1.98,1635,1.98,1636,1.98,1637,3.868,1638,1.98,1639,1.98,1640,1.98,1641,1.98,1642,1.98,1643,1.98]],["title/getting_started/#building-the-library",[552,2.082,562,2.989]],["text/getting_started/#building-the-library",[14,0.588,142,3.789,215,4.603,552,3.013,1368,5.952,1557,6.888,1558,6.888,1559,6.352,1560,5.632]],["title/getting_started/#building-via-commandline",[27,1.678,552,1.772,1561,4.052]],["text/getting_started/#building-via-commandline",[1,1.08,4,1.087,10,1.413,14,0.306,17,4.968,19,0.976,29,2.877,44,2.047,65,2.781,69,1.927,93,2.484,145,4.21,196,2.137,202,2.693,203,2.236,224,3.42,231,1.694,247,3.084,294,2.047,356,2.006,370,1.787,385,2.236,389,3.242,409,2.693,552,3.149,577,3.497,634,3.041,650,2.613,723,3.242,822,3.403,891,3.242,922,3.596,944,2.613,998,2.693,1047,5.188,1144,2.693,1332,4.003,1437,4.604,1551,4.152,1562,6.659,1563,6.659,1564,6.659,1565,5.79,1566,6.141,1567,6.659,1568,4.161,1569,4.161,1570,3.837,1571,5.79,1572,5.79,1573,5.79,1574,5.79,1575,4.735,1576,2.984,1577,4.161,1578,4.161,1579,4.161,1580,4.152,1581,4.161,1582,4.161,1583,4.161,1584,3.403,1585,4.161,1586,4.161,1587,4.161]],["title/getting_started/#running-the-tests",[10,1.617,93,1.642]],["text/getting_started/#running-the-tests",[4,0.735,10,2.38,14,0.408,19,1.644,34,2.787,46,2.426,93,2.418,117,1.16,153,3.384,188,4.137,196,2.848,200,2.673,212,3.482,290,4.137,346,3.589,395,2.619,514,3.834,594,4.792,662,2.903,676,4.275,1053,4.845,1080,3.977,1342,4.535,1428,4.792,1467,4.137,1559,5.114,1560,4.535,1566,5.114,1570,5.114,1576,3.977,1584,5.73,1588,5.114,1589,5.546,1590,5.546,1591,5.546,1592,4.535,1593,7.008,1594,5.546,1595,5.546,1596,5.546,1597,5.546,1598,5.546,1599,4.792]],["title/getting_started/#build-tool-dependencies",[552,1.772,630,2.707,1443,3.313]],["text/getting_started/#build-tool-dependencies",[1,1.219,14,0.345,19,1.476,27,1.946,29,2.879,55,2.093,73,2.311,95,2.361,114,1.5,180,2.857,188,5.65,202,3.04,215,3.139,290,4.692,294,2.311,295,4.059,552,2.054,583,2.311,630,4.203,632,3.368,634,3.303,752,3.841,756,3.504,918,3.66,947,3.841,1145,4.9,1148,3.66,1149,2.467,1176,3.504,1201,3.841,1342,3.841,1430,4.059,1560,5.143,1576,3.368,1580,3.368,1592,3.841,1600,4.697,1601,4.697,1602,4.697,1603,4.332,1604,4.697,1605,4.059,1606,5.8,1607,4.332,1608,5.8,1609,4.697,1610,4.332,1611,4.332,1612,4.697,1613,4.332,1614,4.697,1615,7.878,1616,5.143,1617,4.697,1618,4.697,1619,4.9,1620,4.332,1621,4.332,1622,5.143,1623,5.8,1624,4.332,1625,4.332]],["title/getting_started/#developing-for-a-databricks-runtime",[294,1.993,634,2.127,1467,3.022]],["text/getting_started/#developing-for-a-databricks-runtime",[1,1.096,3,3.289,4,0.89,14,0.43,19,1.372,29,2.992,44,2.077,55,1.881,69,2.708,93,2.315,144,3.027,188,4.363,236,2.077,237,1.881,294,2.077,371,3.289,390,2.821,426,3.648,552,1.846,560,2.035,583,2.878,601,3.648,630,5.259,633,2.821,634,3.071,635,1.813,662,2.423,750,2.919,752,4.782,756,3.149,901,2.732,962,4.556,1002,2.651,1077,2.919,1093,2.821,1128,3.027,1149,2.217,1259,3.648,1367,6.26,1443,3.452,1560,3.452,1588,3.893,1603,3.893,1606,7.016,1607,5.393,1608,6.681,1610,6.681,1611,6.189,1613,6.189,1615,6.189,1619,3.289,1620,5.393,1621,5.393,1622,3.452,1623,3.893,1624,3.893,1625,3.893,1626,4.221,1627,6.711,1628,6.711,1629,4.221,1630,4.221,1631,4.221,1632,4.221,1633,4.221,1634,4.221,1635,4.221,1636,4.221]],["title/getting_started/#24-support-requires-246-or-janino-3016",[69,1.297,73,1.378,1201,2.29,1592,2.29,1637,2.583,1638,2.801]],["text/getting_started/#24-support-requires-246-or-janino-3016",[14,0.611,19,1.552,142,3.639,291,3.729,732,5.153,1098,3.824,1125,5.716,1592,5.409,1637,7.197,1639,6.615,1640,6.615,1641,6.615,1642,6.615,1643,6.615]],["title/getting_started/a_first_rulesuite/",[4,0.414,10,1.06,34,1.569,164,1.603,842,1.13]],["text/getting_started/a_first_rulesuite/",[1,1.133,4,1.231,10,1.167,13,1.45,14,0.253,16,1.149,19,0.492,22,1.032,26,1.109,28,0.621,29,0.797,30,1.691,34,1.727,35,1.92,44,1.032,47,0.935,49,1.805,54,1.279,55,1.532,56,0.797,57,1.288,59,0.917,76,1.564,90,0.926,92,1.45,111,0.811,117,1.506,118,1.805,129,1.245,142,1.154,151,2.464,160,0.869,163,1.561,164,1.077,197,0.971,200,1.011,209,1.503,213,1.503,218,1.182,220,1.688,223,1.891,229,1.91,236,1.032,241,0.69,243,0.811,248,0.884,257,1.634,265,0.825,273,1.727,281,1.097,291,1.182,328,1.504,337,1.054,347,1.357,377,1.564,380,1.077,385,1.127,388,2.376,434,1.357,438,1.212,441,1.564,445,1.401,463,2.464,464,3.258,465,1.401,474,1.634,486,2.294,492,2.564,568,1.45,570,2.592,577,1.101,590,1.401,637,0.952,645,1.504,705,1.054,715,0.935,765,3.402,767,1.987,793,1.357,794,1.357,795,3.019,842,1.58,843,1.279,870,1.245,910,1.934,942,2.742,944,1.317,982,1.634,1002,2.158,1024,1.715,1035,4.816,1036,3.996,1037,2.293,1062,3.308,1077,1.45,1089,1.634,1098,1.212,1109,3.773,1118,1.634,1210,1.934,1221,2.564,1278,1.317,1280,1.634,1324,1.812,1387,1.504,1417,2.464,1449,2.81,1495,1.564,1551,1.504,1554,1.634,1644,2.097,1645,5.173,1646,2.097,1647,4.367,1648,1.812,1649,2.097,1650,2.097,1651,2.097,1652,2.097,1653,2.097,1654,2.097,1655,2.097,1656,2.097,1657,4.657,1658,2.097,1659,2.097,1660,2.097,1661,2.097,1662,2.097,1663,2.97,1664,2.097,1665,3.437,1666,2.097,1667,2.097,1668,1.812,1669,2.097,1670,1.634,1671,2.097,1672,2.097,1673,2.097,1674,2.097]],["title/getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite",[10,1.06,34,1.569,164,1.603,842,1.13,1675,3.122]],["text/getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite",[1,1.436,4,1.235,13,1.428,14,0.222,16,1.53,22,1.482,26,1.084,28,0.892,34,1.514,54,1.838,55,1.342,90,1.174,92,2.082,117,1.636,118,1.582,129,1.788,151,3.281,213,1.317,218,1.698,220,1.769,229,2.42,248,1.27,265,1.184,281,1.461,328,2.16,337,1.514,377,2.247,438,1.741,441,2.247,464,2.247,486,1.368,568,2.082,570,1.788,577,1.582,645,2.16,765,4.311,767,1.741,793,1.949,794,1.949,795,2.082,842,1.09,843,1.838,910,2.778,982,2.347,1002,2.873,1035,5.743,1036,4.765,1037,2.905,1062,1.788,1109,4.781,1118,2.347,1221,3.413,1278,1.891,1280,2.347,1387,2.16,1417,3.281,1551,2.16,1644,3.012,1645,6.047,1646,3.012,1647,5.533,1648,2.603,1649,3.012,1650,3.012,1651,3.012,1652,3.012,1653,3.012,1654,3.012,1655,3.012,1656,3.012,1657,4.22,1658,3.012,1659,3.012,1660,3.012]],["title/getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns",[35,1.341,486,1.602,767,2.039,1449,2.884]],["text/getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns",[4,1.197,13,1.469,14,0.345,19,1.102,26,1.103,30,3.095,35,2.696,44,2.311,49,3.303,55,2.093,57,1.354,111,1.816,142,2.584,160,1.946,197,2.175,200,2.264,213,2.054,243,1.816,291,2.648,385,2.524,388,4.349,463,4.51,464,4.692,465,3.139,474,3.66,486,2.857,570,3.734,590,3.139,715,2.093,795,4.349,842,1.7,942,4.453,944,2.949,1024,3.841,1062,4.496,1098,2.716,1210,4.332,1324,4.059,1495,3.504,1554,3.66,1661,4.697,1662,4.697,1663,5.435,1664,4.697,1665,6.29,1666,4.697,1667,4.697,1668,4.059]],["title/getting_started/a_first_rulesuite/#filtering-the-results",[57,1.024,76,1.474]],["text/getting_started/a_first_rulesuite/#filtering-the-results",[4,1.206,10,1.758,13,1.248,26,0.908,29,1.968,47,2.307,56,1.968,57,1.601,59,2.264,76,2.304,117,1.082,118,2.718,163,3.046,209,2.933,220,2.001,223,3.689,236,2.547,241,1.704,257,4.033,273,3.37,347,3.35,380,2.658,434,3.35,445,3.459,492,5.002,637,2.351,705,2.601,870,3.073,1077,3.579,1089,4.033,1449,4.233,1657,6.184,1669,5.177,1670,4.033,1671,5.177,1672,5.177,1673,5.177,1674,5.177]],["title/getting_started/flavours/",[1,1.052,1176,3.022,1393,3.736]],["text/getting_started/flavours/",[1,1.832,4,0.987,6,2.967,12,3.037,13,1.385,14,0.413,16,2.489,19,0.933,21,2.361,26,0.698,30,3.473,35,1.512,46,2.453,57,1.399,59,1.739,90,1.19,103,2.555,107,2.299,114,1.27,121,3.087,135,1.739,136,1.806,139,1.708,153,2.426,159,3.132,160,1.647,163,1.806,177,1.878,211,2.497,218,3.162,264,2.361,265,2.775,342,3.63,353,2.749,356,3.132,365,2.299,383,3.098,400,3.098,486,1.806,589,4.185,637,1.806,653,3.878,667,4.37,674,2.657,675,3.252,706,5.063,731,2.497,739,3.878,816,2.242,944,2.497,1020,3.098,1022,2.361,1023,4.081,1025,4.081,1080,2.852,1184,4.022,1185,3.667,1187,3.667,1188,3.748,1193,2.967,1261,2.574,1278,2.497,1387,2.852,1393,5.173,1417,2.852,1544,3.436,1676,4.446,1677,4.446,1678,4.446,1679,4.446,1680,4.446,1681,3.977,1682,3.977,1683,5.173,1684,3.977,1685,3.977,1686,3.977]],["title/getting_started/flavours/#quality-qualitydata-rulerunner",[1,0.915,4,0.468,1417,2.529,1681,3.527]],["text/getting_started/flavours/#quality-qualitydata-rulerunner",[12,3.234,13,1.204,16,2.163,30,3.789,57,1.658,107,3.74,121,2.829,218,4.341,356,3.117,383,5.039,589,4.825,706,5.039,944,4.061,1188,4.322,1682,6.468,1683,5.965]],["title/getting_started/flavours/#qualityrules-ruleenginerunner",[1022,2.826,1025,2.752]],["text/getting_started/flavours/#qualityrules-ruleenginerunner",[1,1.558,6,4.478,12,2.36,13,1.482,16,2.461,21,3.563,30,2.953,46,2.625,59,2.625,103,2.36,114,1.916,121,3.22,159,2.893,265,2.894,342,3.884,356,2.893,637,2.726,653,4.15,667,4.676,674,4.011,706,4.676,731,3.769,816,3.384,1020,4.676,1023,3.769,1025,3.47,1193,4.478,1261,3.884,1544,5.186,1684,6.002]],["title/getting_started/flavours/#qualityfolder-rulefolderrunner",[1184,3.413,1185,4.39]],["text/getting_started/flavours/#qualityfolder-rulefolderrunner",[12,2.78,13,1.047,14,0.52,16,1.881,30,2.768,46,2.461,57,1.211,90,1.5,103,2.212,121,2.461,135,2.461,136,2.555,139,2.416,153,3.432,159,3.408,160,2.33,163,2.555,177,2.657,211,3.533,264,3.34,265,2.78,342,3.641,353,3.889,356,2.712,365,3.253,400,4.383,589,4.197,653,3.889,667,4.383,675,4.6,706,4.383,1023,4.44,1025,4.088,1080,4.034,1184,4.034,1187,5.188,1188,3.759,1387,4.034,1683,5.188,1685,5.626,1686,5.626]],["title/getting_started/key_functions/",[13,0.581,14,0.23,16,1.044,26,0.548,591,2.159]],["text/getting_started/key_functions/",[4,1.03,13,1.526,14,0.448,16,1.498,26,0.786,27,1.856,45,2.937,47,3.654,50,2.505,57,1.311,90,1.648,93,1.546,117,0.937,135,3.249,140,1.703,156,1.57,159,2.16,185,2.591,203,2.407,227,3.213,241,1.475,244,2.591,247,3.598,305,2.075,315,2.814,318,2.814,345,3.872,395,2.116,421,3.872,437,2.994,460,3.491,465,2.994,481,4.347,483,3.491,494,3.213,581,3.213,591,3.098,633,2.994,646,2.994,662,1.856,689,2.591,716,3.213,720,4.665,727,3.213,745,4.48,761,3.872,806,3.872,816,2.526,835,3.664,842,1.622,1009,3.213,1177,2.994,1338,3.491,1452,3.491,1494,3.491,1554,3.491,1670,3.491,1687,4.481,1688,4.481,1689,4.481,1690,4.481,1691,4.481]],["title/getting_started/key_functions/#key-sql-functions-to-use-in-your-rules",[13,0.581,14,0.23,16,1.044,26,0.548,591,2.159]],["text/getting_started/key_functions/#key-sql-functions-to-use-in-your-rules",[]],["title/getting_started/key_functions/#expressions-with-constants",[90,1.01,806,4.113]],["text/getting_started/key_functions/#expressions-with-constants",[13,1.576,47,3.398,135,3.703,227,4.562,244,3.678,247,3.782,437,4.251,481,3.995,716,4.562,720,5.316,745,4.117,1687,6.362]],["title/getting_started/key_functions/#expressions-which-take-expression-parameters",[90,1.092,156,1.236,305,1.633]],["text/getting_started/key_functions/#expressions-which-take-expression-parameters",[4,0.897,13,1.259,14,0.386,27,2.173,45,3.26,47,3.647,50,2.709,57,1.456,90,1.435,93,1.81,117,1.097,140,1.995,159,2.529,185,3.033,203,2.819,241,1.727,247,3.132,315,3.294,318,3.294,345,4.533,395,2.478,421,4.533,460,4.087,465,3.506,481,4.247,483,4.087,494,3.762,581,3.762,633,3.506,646,3.506,662,2.173,689,3.033,727,3.762,745,4.377,761,4.533,816,2.958,835,4.29,842,1.899,1009,3.762,1177,3.506,1338,4.087,1452,4.087,1494,4.087,1554,4.087,1670,4.087,1688,5.246,1689,5.246,1690,5.246,1691,5.246]],["title/getting_started/running_on_databricks/",[1,1.052,10,1.376,294,1.993]],["text/getting_started/running_on_databricks/",[1,1.576,2,1.932,4,1.129,10,2.457,14,0.582,19,0.582,26,0.435,27,2.026,29,2.308,37,1.333,39,0.724,43,2.028,55,1.105,57,0.847,73,2.987,88,1.195,93,2.095,101,1.195,103,0.975,111,0.959,115,1.195,118,1.302,136,2.222,155,3.507,157,1.557,158,1.513,167,1.715,200,1.897,212,1.557,214,1.274,215,1.657,220,0.959,243,1.891,247,1.149,248,1.659,291,2.218,294,3.179,356,1.195,380,1.274,384,2.143,385,1.333,388,1.715,394,2.936,397,1.605,409,3.166,423,2.066,425,2.028,437,1.657,458,4,459,1.398,467,1.434,484,1.779,486,1.787,514,1.715,516,1.333,552,3.242,566,1.195,582,1.605,584,1.365,586,1.932,631,1.715,634,2.568,639,1.365,660,1.472,662,1.63,789,2.287,793,2.547,794,2.547,807,2.114,834,2.287,843,3.397,893,2.143,903,3.066,966,2.143,978,1.779,983,2.547,1021,1.85,1083,2.143,1089,1.932,1091,3.166,1093,1.657,1096,3.849,1098,1.434,1144,3.93,1147,4.338,1168,2.028,1261,1.605,1268,2.143,1269,2.822,1278,1.557,1332,2.721,1437,3.849,1452,1.932,1551,1.779,1552,2.143,1575,4,1576,3.993,1580,3.993,1584,2.028,1616,3.218,1619,3.066,1622,2.028,1692,2.773,1693,4.965,1694,3.629,1695,2.48,1696,2.48,1697,3.629,1698,3.935,1699,3.935,1700,2.48,1701,3.935,1702,2.48,1703,2.48,1704,2.48,1705,3.629,1706,2.143,1707,2.48,1708,2.48,1709,2.48,1710,4.511,1711,2.48,1712,2.48,1713,3.629,1714,2.48,1715,2.48,1716,2.48,1717,2.48,1718,2.48,1719,2.48,1720,4.227,1721,2.48,1722,2.48,1723,2.48,1724,2.48,1725,2.48,1726,2.48,1727,2.48,1728,2.48,1729,2.48,1730,3.935,1731,2.48,1732,4.891,1733,3.935,1734,2.48,1735,2.48,1736,2.48,1737,4.891,1738,3.935,1739,2.48,1740,2.48,1741,2.48,1742,3.935,1743,2.48,1744,2.48,1745,2.48,1746,2.48]],["title/getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts",[10,0.862,294,1.25,552,1.111,634,1.334,1616,2.077,1693,2.077,1694,2.342]],["text/getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts",[1,1.26,4,0.644,14,0.587,29,2.74,55,2.163,118,2.549,136,2.204,155,5.169,157,3.048,212,3.048,215,3.243,243,1.876,247,2.248,291,2.736,294,2.388,385,2.608,388,3.356,394,3.621,397,3.141,423,2.549,458,5.257,552,3.153,586,3.781,660,2.881,662,2.011,893,4.194,903,3.781,966,4.194,1091,4.16,1096,4.444,1144,4.665,1147,5.978,1261,3.141,1268,4.194,1269,4.61,1437,3.356,1575,5.257,1576,4.61,1580,3.48,1584,3.969,1616,3.969,1694,4.476,1695,4.854,1696,4.854,1697,4.476,1698,6.428,1699,6.428,1700,4.854,1701,6.428,1702,4.854,1703,4.854,1704,4.854,1705,4.476,1706,4.194,1707,4.854,1708,4.854,1709,4.854]],["title/getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104",[10,0.951,294,1.378,552,1.225,634,1.471,1619,2.182,1710,2.583]],["text/getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104",[1,1.433,2,4.3,4,0.732,10,1.874,14,0.514,26,0.968,29,2.098,73,3.438,88,2.66,111,2.134,136,2.507,200,3.367,214,2.834,243,2.134,394,4.118,423,2.898,458,4.513,467,3.191,552,2.414,584,3.036,631,3.816,903,4.3,983,3.572,1089,4.3,1091,3.572,1093,3.688,1096,4.83,1144,4.522,1332,3.816,1437,3.816,1552,4.769,1576,3.958,1580,3.958,1619,4.3,1693,4.513,1697,5.09,1710,6.443,1711,5.519,1712,5.519,1713,5.09,1714,5.519,1715,5.519,1716,5.519,1717,5.519,1718,5.519,1719,5.519]],["title/getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts",[10,0.862,294,1.25,552,1.111,634,1.334,1622,2.077,1693,2.077,1720,2.194]],["text/getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts",[4,0.796,10,2.038,14,0.541,19,1.408,27,2.486,37,3.225,39,1.751,43,4.908,57,1.292,73,2.953,115,2.893,136,2.726,158,3.662,243,2.32,291,3.384,486,3.343,552,2.625,582,3.884,834,5.535,983,3.884,1021,4.478,1098,3.47,1437,4.15,1576,4.304,1580,4.304,1693,4.908,1713,5.535,1720,5.186,1721,6.002,1722,6.002,1723,6.002,1724,6.002,1725,6.002]],["title/getting_started/running_on_databricks/#testing-out-quality-via-notebooks",[1,0.81,27,1.293,93,1.077,380,1.603,409,2.021]],["text/getting_started/running_on_databricks/#testing-out-quality-via-notebooks",[1,1.561,4,1.181,10,2.503,14,0.568,27,1.821,57,0.946,93,2.543,101,2.119,103,1.729,167,3.039,220,1.7,248,2.536,294,2.959,356,2.119,384,3.799,409,3.892,425,3.595,437,2.938,459,2.478,484,3.153,514,3.039,516,2.362,552,2.63,566,2.119,639,2.419,793,3.892,794,3.892,807,3.231,843,4.497,978,3.153,1083,3.799,1278,2.761,1332,3.039,1437,3.039,1452,3.425,1551,3.153,1575,3.595,1580,3.153,1705,4.054,1720,3.799,1726,4.396,1727,4.396,1728,4.396,1729,4.396,1730,6.014,1731,4.396,1732,6.855,1733,6.014,1734,4.396,1735,4.396,1736,4.396,1737,6.855,1738,6.014,1739,4.396,1740,4.396,1741,4.396,1742,6.014,1743,4.396,1744,4.396,1745,4.396,1746,4.396]],["title/getting_started/serializing/",[4,0.468,22,1.735,842,1.276,1062,2.093]],["text/getting_started/serializing/",[1,0.434,4,1.211,10,0.568,13,1.388,14,0.441,15,1.245,16,0.559,19,0.393,22,1.827,23,1.1,24,0.841,26,0.862,28,1.582,29,2.601,30,0.823,33,0.993,35,0.636,45,0.806,53,1.368,56,2.167,58,2.217,59,0.732,90,0.355,101,0.806,102,0.859,103,0.658,117,0.595,129,1.689,136,1.293,139,0.718,144,1.2,145,2.743,148,0.518,153,1.021,164,0.859,196,1.461,202,1.083,203,0.899,213,0.732,217,1.051,220,2.505,229,3.338,231,1.158,237,0.746,243,1.899,244,0.967,247,1.318,281,2.768,300,0.92,305,1.318,313,2.481,334,0.879,342,1.083,346,1.083,353,1.967,355,1.083,356,0.806,370,1.222,397,1.842,423,0.879,430,2.204,443,1.157,476,1.2,486,0.76,498,4.181,499,3.282,500,3.664,501,4.181,502,3.282,503,3.664,509,1.248,516,0.899,534,1.2,554,1.051,560,0.806,562,1.051,569,0.899,583,0.823,604,1.303,608,1.902,645,1.2,662,1.538,674,1.118,715,0.746,729,1.2,793,1.083,794,1.083,818,1.2,835,2.327,842,2.172,843,1.736,853,2.769,881,2.123,905,5.015,918,1.303,924,1.248,944,1.787,961,1.368,1009,1.2,1025,0.967,1037,2.579,1054,1.303,1062,2.204,1064,1.446,1066,4.252,1067,1.446,1068,1.446,1069,1.446,1070,4.016,1072,2.327,1073,2.327,1088,1.446,1096,1.157,1101,1.2,1117,2.481,1132,1.2,1139,1.2,1168,1.368,1174,1.303,1177,1.118,1184,1.2,1338,1.303,1382,1.2,1391,1.543,1406,1.543,1605,1.446,1645,2.459,1648,2.459,1706,1.446,1747,1.673,1748,1.673,1749,1.673,1750,4.04,1751,1.673,1752,4.04,1753,1.673,1754,1.673,1755,1.673,1756,1.673,1757,4.04,1758,3.425,1759,1.673,1760,1.673,1761,1.673,1762,1.673,1763,1.673,1764,1.673,1765,1.673,1766,2.846,1767,5.342,1768,1.673,1769,1.673,1770,1.673,1771,1.673,1772,1.673,1773,2.846,1774,1.673,1775,2.846,1776,1.673,1777,1.673,1778,1.673,1779,1.673,1780,2.846,1781,1.673,1782,1.673,1783,1.673,1784,1.673,1785,1.673,1786,1.673,1787,1.673,1788,1.673,1789,1.673]],["title/getting_started/serializing/#reading-writing-rulesuites",[22,1.735,842,1.276,1062,2.093,1675,3.527]],["text/getting_started/serializing/#reading-writing-rulesuites",[4,1.227,13,1.298,14,0.405,15,1.693,22,2.708,26,0.679,28,1.146,30,1.905,35,1.472,53,3.166,58,4.288,139,1.662,144,2.776,148,1.199,196,1.988,203,2.08,220,2.848,243,2.476,334,2.033,397,2.505,443,2.676,498,3.678,499,2.587,500,2.888,501,3.678,502,2.587,503,2.888,604,3.016,818,2.776,842,1.992,881,2.888,905,6.136,918,3.016,944,2.431,1009,2.776,1062,3.267,1064,3.345,1066,4.106,1072,3.166,1073,3.166,1139,2.776,1406,3.57,1747,3.871,1748,3.871,1749,3.871,1750,5.905,1751,3.871,1752,5.905,1753,3.871,1754,3.871,1755,3.871,1756,3.871,1757,5.075,1758,5.075,1759,3.871,1760,3.871,1761,3.871]],["title/getting_started/serializing/#versioned-rule-datasets",[13,0.754,29,1.54,554,2.544]],["text/getting_started/serializing/#versioned-rule-datasets",[1,0.554,4,1.191,10,0.725,13,1.375,14,0.444,15,0.934,16,0.714,19,0.501,23,1.348,24,1.073,26,0.895,28,1.666,29,2.753,33,1.268,45,1.029,56,2.422,59,0.934,90,0.453,101,1.029,102,1.097,103,0.84,117,0.729,129,2.071,136,1.584,145,3.101,153,1.303,164,1.097,196,1.097,202,1.382,213,0.934,217,1.341,220,2.175,229,3.521,231,1.42,237,0.952,243,1.348,244,1.235,247,1.615,281,2.834,300,1.175,305,1.615,313,2.955,342,1.382,346,1.382,353,2.412,355,1.382,356,1.029,370,1.498,397,1.382,423,1.121,430,2.625,476,1.531,486,0.97,498,4.257,499,3.411,500,3.808,501,4.257,502,3.411,503,3.808,509,1.593,516,1.147,534,1.531,560,1.029,562,1.341,569,1.147,583,1.051,608,2.331,645,1.531,662,1.832,674,1.427,715,0.952,729,1.531,793,1.382,794,1.382,835,2.852,842,2.036,843,2.128,853,3.172,881,1.593,924,1.593,944,1.341,961,1.746,1025,1.235,1037,2.955,1054,1.664,1066,4.198,1067,1.845,1068,1.845,1069,1.845,1070,4.601,1072,1.746,1073,1.746,1088,1.845,1096,1.476,1101,1.531,1117,2.955,1132,1.531,1168,1.746,1174,1.664,1177,1.427,1184,1.531,1338,1.664,1382,1.531,1391,1.969,1605,1.845,1645,3.014,1648,3.014,1706,1.845,1750,1.969,1752,1.969,1757,3.217,1758,1.969,1762,2.135,1763,2.135,1764,2.135,1765,2.135,1766,3.488,1767,6.038,1768,2.135,1769,2.135,1770,2.135,1771,2.135,1772,2.135,1773,3.488,1774,2.135,1775,3.488,1776,2.135,1777,2.135,1778,2.135,1779,2.135,1780,3.488,1781,2.135,1782,2.135,1783,2.135,1784,2.135,1785,2.135,1786,2.135,1787,2.135,1788,2.135,1789,2.135]],["title/model/",[13,0.886,986,3.181]],["text/model/",[4,0.848,12,1.893,13,1.482,14,0.585,23,1.861,26,0.844,28,1.425,29,2.729,31,3.452,35,1.83,47,2.145,50,1.742,57,1.713,90,1.523,103,1.893,104,2.229,120,2.937,136,2.186,183,4.159,185,2.783,197,2.229,198,2.857,199,2.648,227,3.452,237,2.849,244,2.783,247,2.961,265,2.514,277,2.586,408,3.452,481,3.022,483,3.75,517,3.452,561,4.159,707,2.586,842,2.768,853,4.047,937,3.936,1022,3.795,1027,3.75,1037,3.769,1098,3.696,1117,3.217,1271,4.159,1790,4.814,1791,4.814,1792,4.814,1793,4.814,1794,4.814,1795,4.814,1796,4.814,1797,4.814,1798,4.814,1799,4.814]],["title/model/#rules",[13,1.074]],["text/model/#rules",[13,1.357,14,0.582,28,1.75,29,3.007,31,4.239,90,1.547,103,2.324,120,3.606,136,2.685,183,5.108,198,3.509,199,3.252,237,3.25,265,2.867,277,3.176,483,4.605,517,4.239,561,5.108,707,3.176,842,2.139,853,4.458,1022,3.509,1027,4.605,1037,3.104,1271,5.108,1790,5.911,1791,5.911,1792,5.911]],["title/model/#rule-results",[13,0.886,57,1.024]],["text/model/#rule-results",[12,2.301,13,1.089,14,0.533,23,2.262,26,1.026,35,2.225,47,2.608,50,2.118,57,1.771,90,1.241,104,2.71,185,3.383,197,2.71,227,4.196,244,3.383,247,3.356,408,4.196,481,3.674,842,2.849,937,4.785,1022,3.474,1037,3.805,1098,4.19,1117,3.91,1793,5.852,1794,5.852,1795,5.852,1796,5.852,1797,5.852,1798,5.852,1799,5.852]],["title/model/meta/",[1037,2.499,1800,4.113]],["text/model/meta/",[1,0.845,4,1.209,13,1.428,14,0.426,16,1.089,20,3.242,24,1.636,28,1.437,34,1.636,35,3.034,39,0.95,46,2.122,49,2.548,50,1.178,51,1.602,59,2.122,61,2.175,63,1.672,69,1.508,70,2.334,71,2.536,76,1.991,89,1.28,90,0.691,101,2.338,103,1.28,111,1.876,113,2.662,114,2.194,119,1.933,120,1.986,127,2.175,130,1.672,131,2.813,148,1.008,149,2.175,153,1.986,180,1.479,213,2.536,220,2.657,243,1.259,347,2.107,354,1.986,356,1.569,365,1.882,369,3.242,370,2.951,405,1.882,422,2.107,459,1.835,498,3.242,499,2.175,501,2.175,502,2.175,516,1.749,539,2.429,554,2.044,560,1.569,570,1.933,588,2.107,608,2.175,635,1.398,639,1.791,646,2.175,688,2.251,697,2.536,715,1.451,795,2.251,858,3.002,905,5.168,942,2.044,978,2.334,1037,3.045,1062,1.933,1066,2.429,1139,2.334,1257,2.662,1278,2.044,1394,2.813,1599,2.813,1663,2.813,1800,5.939,1801,3.256,1802,4.851,1803,3.256,1804,3.256,1805,3.256,1806,3.256,1807,4.851,1808,3.256,1809,5.799,1810,4.851,1811,3.256,1812,4.851,1813,3.256]],["title/model/meta/#meta-rulesets",[1037,2.499,1800,4.113]],["text/model/meta/#meta-rulesets",[1,0.852,4,1.209,13,1.431,14,0.429,16,1.098,20,3.262,24,1.65,28,1.446,34,1.65,35,3.041,39,0.958,46,2.135,49,2.563,50,1.188,51,1.615,59,2.135,61,2.194,63,1.686,69,1.52,70,2.354,71,2.558,76,1.999,89,1.291,90,0.696,101,2.353,103,1.291,111,1.887,113,2.685,114,2.202,119,1.949,120,2.003,127,2.194,130,1.686,131,2.837,148,1.017,149,2.194,153,2.003,180,1.491,213,2.549,220,2.666,243,1.269,347,2.125,354,2.003,356,1.582,365,1.898,369,3.262,370,2.962,405,1.898,422,2.125,459,1.851,498,3.262,499,2.194,501,2.194,502,2.194,516,1.764,539,2.449,554,2.061,560,1.582,570,1.949,588,2.125,608,2.194,635,1.41,639,1.806,646,2.194,688,2.27,697,2.558,715,1.463,795,2.27,858,3.028,905,5.184,942,2.061,978,2.354,1037,2.563,1062,1.949,1066,2.449,1139,2.354,1257,2.685,1278,2.061,1394,2.837,1599,2.837,1663,2.837,1800,5.576,1801,3.283,1802,4.882,1803,3.283,1804,3.283,1805,3.283,1806,3.283,1807,4.882,1808,3.283,1809,5.828,1810,4.882,1811,3.283,1812,4.882,1813,3.283]],["title/model/storage/",[705,2.392,986,3.181]],["text/model/storage/",[1,1.16,4,1.225,12,1.758,14,0.399,16,0.977,19,0.685,23,1.129,35,1.7,39,1.584,46,1.278,47,1.302,56,1.111,57,1.309,59,1.278,76,1.682,89,2.392,102,2.296,117,0.935,129,2.654,134,1.468,142,1.607,148,0.905,163,2.03,198,1.734,199,1.607,209,1.278,220,1.728,223,3.346,229,1.955,231,1.189,244,1.689,247,1.353,248,1.885,281,1.427,314,1.734,353,2.02,378,2.02,397,1.891,434,4.657,443,4.533,460,2.276,463,4.362,464,3.335,465,1.952,481,1.834,494,2.095,536,2.179,569,2.402,580,2.524,617,2.524,646,1.952,662,1.21,664,2.347,705,2.247,790,2.02,793,1.891,794,1.891,843,3.313,867,2.389,954,2.095,985,2.276,986,1.952,1016,2.524,1018,4.701,1037,1.534,1052,4.123,1095,1.834,1193,2.179,1251,2.179,1285,3.863,1467,3.335,1495,4.051,1550,2.524,1668,2.524,1670,4.739,1814,2.921,1815,2.921,1816,2.921,1817,2.921,1818,6.636,1819,4.47,1820,4.123,1821,2.921,1822,2.921,1823,2.921,1824,2.921,1825,2.921,1826,2.921,1827,2.921,1828,2.921,1829,2.921,1830,2.921,1831,2.921,1832,2.921,1833,2.921,1834,4.47,1835,2.921,1836,2.921,1837,2.921,1838,2.921,1839,2.921]],["title/model/storage/#storage-model",[705,2.392,986,3.181]],["text/model/storage/#storage-model",[4,1.227,14,0.325,16,1.476,19,1.035,23,1.706,35,2.292,39,1.288,57,0.95,76,2.127,89,2.903,117,1.261,134,2.218,163,2.004,198,2.62,199,2.428,209,1.93,223,4.061,248,1.861,314,2.62,434,5.164,463,5.293,569,2.371,580,3.813,617,3.813,664,3.166,867,3.609,954,3.164,985,3.438,1016,3.813,1018,4.324,1037,2.317,1495,3.292,1668,3.813,1814,4.413,1815,4.413,1816,4.413,1817,4.413,1818,7.358,1819,6.03]],["title/model/storage/#where-have-all-the-versionids-and-ruleresults-gone",[1018,2.905,1820,3.736,1821,4.052]],["text/model/storage/#where-have-all-the-versionids-and-ruleresults-gone",[1,1.477,4,1.209,12,2.238,14,0.419,39,1.661,46,1.776,47,1.809,56,1.543,57,1.414,59,1.776,102,2.923,129,3.378,142,2.233,148,1.257,163,1.844,220,2.2,229,2.489,231,1.652,244,2.347,247,1.88,248,1.712,281,1.817,353,2.807,378,2.807,397,2.627,434,2.627,443,5.185,460,3.163,464,4.246,465,2.713,481,2.549,494,2.911,536,3.029,569,2.181,646,2.713,662,1.682,705,2.04,790,2.807,793,2.627,794,2.627,843,4.01,1018,4.081,1052,5.249,1095,2.549,1193,3.029,1251,3.029,1285,4.918,1467,4.246,1495,4.246,1550,3.508,1670,5.549,1818,3.744,1820,3.744,1822,4.06,1823,4.06,1824,4.06,1825,4.06,1826,4.06,1827,4.06,1828,4.06,1829,4.06,1830,4.06,1831,4.06,1832,4.06,1833,4.06,1834,5.691,1835,4.06,1836,4.06,1837,4.06,1838,4.06,1839,4.06]]],"fields":["title","text"],"invertedIndex":[["",{"_index":4,"text":{"":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/changelog/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/#running-the-tests":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#callfun":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#disabledrule":{},"sqlfunctions/#idequal":{},"sqlfunctions/#inc":{},"sqlfunctions/#longpairequal":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{},"sqlfunctions/#probability":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#returnsum":{},"sqlfunctions/#softfail":{},"sqlfunctions/#softfailed":{},"sqlfunctions/#sumwith":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{}},"title":{"getting_started/a_first_rulesuite/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/serializing/":{}}}],["0",{"_index":248,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsValidation/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#failed":{},"sqlfunctions/#probability":{}},"title":{"advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings":{},"advanced/sampleDocsValidation/#errors-identified-for-rulesuite-id-0-1":{},"advanced/sampleDocsValidation/#warnings-identified-for-rulesuite-id-0-1":{}}}],["0.0",{"_index":421,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["0.0.1",{"_index":2,"text":{"":{},"background/changelog/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{"#quality-001-snapshot":{},"background/changelog/#001-snapshot-5th-march-2023":{}}}],["0.001",{"_index":83,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["0.0025m",{"_index":1515,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["0.01",{"_index":182,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#probability":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["0.011m",{"_index":1523,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["0.08m",{"_index":1511,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["0.23",{"_index":1504,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["0.3",{"_index":1817,"text":{"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["0.5.0",{"_index":1703,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["0.7.0",{"_index":1603,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["0.7.1",{"_index":614,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}}}],["0.99",{"_index":786,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["01",{"_index":1000,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["1",{"_index":281,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#warnings-summary":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/userFunctions/#why-do-all-this":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#inc":{},"sqlfunctions/#softfailed":{}},"title":{"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{},"advanced/sampleDocsOutput/#ruleset-id-1-1":{},"advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings":{},"advanced/sampleDocsValidation/#errors-identified-for-rulesuite-id-0-1":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/sampleDocsValidation/#warnings-identified-for-rulesuite-id-0-1":{}}}],["1.0",{"_index":761,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["1.2",{"_index":741,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["1.5b",{"_index":736,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["10",{"_index":1551,"text":{"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["10.0",{"_index":578,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["10.2",{"_index":1719,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["10.2.dbr",{"_index":1146,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["10.2.dbr_",{"_index":1618,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["10.4",{"_index":1710,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}}}],["10.4.dbr",{"_index":1711,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["10.4.dbr_",{"_index":1621,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["100",{"_index":1645,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["1000",{"_index":413,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"sqlfunctions/":{},"sqlfunctions/#probability":{}},"title":{}}],["10000",{"_index":349,"text":{"sqlfunctions/":{},"sqlfunctions/#passed":{},"sqlfunctions/#probability":{}},"title":{}}],["100000",{"_index":1827,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["1002",{"_index":1219,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsValidation/":{}},"title":{"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsValidation/#id-1002-1":{}}}],["100k",{"_index":1518,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["10k",{"_index":1383,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["11",{"_index":298,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["11.0.dbr_",{"_index":1625,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["11.2",{"_index":1724,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["11.3",{"_index":1720,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}}}],["11.3.dbr",{"_index":1721,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["110",{"_index":579,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["128",{"_index":234,"text":{"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{}},"title":{}}],["128bit",{"_index":352,"text":{"advanced/prng/":{},"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rnguuid":{},"sqlfunctions/#zahashlongswith":{}},"title":{}}],["131",{"_index":1656,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["134",{"_index":1653,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["14,052",{"_index":1512,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["15,847m",{"_index":1520,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["15.0",{"_index":293,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["150",{"_index":1517,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["15m",{"_index":1522,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["16",{"_index":451,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsValidation/":{},"sqlfunctions/":{},"sqlfunctions/#rngbytes":{}},"title":{"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsValidation/#id-16-1":{}}}],["16.0.1",{"_index":296,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["160bit",{"_index":340,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#rngid":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["174,583m",{"_index":1521,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["19",{"_index":774,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["1k",{"_index":1108,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["1l",{"_index":1320,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["1m",{"_index":1113,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["1m30",{"_index":1126,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["2",{"_index":229,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#warnings-summary":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#disabledrule":{}},"title":{"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsValidation/#id-2-1":{}}}],["2.11",{"_index":1614,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["2.12",{"_index":1615,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["2.4",{"_index":1201,"text":{"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{"getting_started/#24-support-requires-246-or-janino-3016":{}}}],["2.4.5",{"_index":1640,"text":{"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{}},"title":{}}],["2.4.6",{"_index":1592,"text":{"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{},"getting_started/#build-tool-dependencies":{},"getting_started/#running-the-tests":{}},"title":{"getting_started/#24-support-requires-246-or-janino-3016":{}}}],["20",{"_index":568,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["200",{"_index":1652,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["201",{"_index":1655,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["2010",{"_index":1590,"text":{"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["2020",{"_index":1482,"text":{"background/changelog/":{}},"title":{"background/changelog/#the-quality-exploration-starts-25th-april-2020":{}}}],["2021",{"_index":999,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["2023",{"_index":1478,"text":{"background/changelog/":{}},"title":{"background/changelog/#001-snapshot-5th-march-2023":{}}}],["208,518m",{"_index":1538,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["21",{"_index":1291,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["210",{"_index":1742,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["230m",{"_index":1502,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["24d",{"_index":1004,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["24g",{"_index":1508,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["256",{"_index":282,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["25th",{"_index":1480,"text":{"background/changelog/":{}},"title":{"background/changelog/#the-quality-exploration-starts-25th-april-2020":{}}}],["27",{"_index":1503,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["27m",{"_index":1514,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["2gb",{"_index":86,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["2l",{"_index":1321,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["3",{"_index":1002,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/sampleDocsOutput/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings":{}}}],["3.0",{"_index":1342,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#running-the-tests":{}},"title":{}}],["3.0.16",{"_index":1638,"text":{"getting_started/":{}},"title":{"getting_started/#24-support-requires-246-or-janino-3016":{}}}],["3.0.3",{"_index":295,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["3.0.9",{"_index":1641,"text":{"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{}},"title":{}}],["3.1",{"_index":1616,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}}}],["3.1.2",{"_index":290,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#running-the-tests":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["3.2",{"_index":188,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/#running-the-tests":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["3.2'",{"_index":1700,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["3.2.0",{"_index":1145,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["3.2.1",{"_index":1619,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}}}],["3.2.1.oss_",{"_index":1620,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["3.3",{"_index":1623,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["3.3.0",{"_index":1622,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/running_on_databricks/":{}},"title":{"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}}}],["3.3.0.oss_",{"_index":1624,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["3.x",{"_index":1643,"text":{"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{}},"title":{}}],["30",{"_index":1118,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["31d",{"_index":1012,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["32bit",{"_index":1014,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["32d",{"_index":1006,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["33d",{"_index":1011,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["34",{"_index":1539,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["39316",{"_index":1723,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["3l",{"_index":1322,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["4",{"_index":802,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{"advanced/sampleDocsOutput/#rule-id-4-1-":{}}}],["4.dbr",{"_index":1572,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["40",{"_index":1380,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["5",{"_index":1221,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{"advanced/sampleDocsOutput/#rule-id-5-1-":{}}}],["50",{"_index":1109,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["50k",{"_index":1528,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["512",{"_index":283,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["5th",{"_index":1476,"text":{"background/changelog/":{}},"title":{"background/changelog/#001-snapshot-5th-march-2023":{}}}],["6",{"_index":1218,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsValidation/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsValidation/#id-6-1":{}}}],["60",{"_index":1648,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["64",{"_index":540,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["64bit",{"_index":521,"text":{"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{}},"title":{}}],["66,510m",{"_index":1513,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["682.626",{"_index":1740,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["682626m",{"_index":1744,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["6l",{"_index":1318,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["6m15",{"_index":1122,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["7",{"_index":1225,"text":{"advanced/sampleDocsOutput/":{}},"title":{"advanced/sampleDocsOutput/#rule-id-7-2-":{}}}],["76.04",{"_index":9,"text":{"":{},"#quality-001-snapshot":{}},"title":{}}],["8",{"_index":452,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/sampleDocsOutput/":{},"sqlfunctions/":{},"sqlfunctions/#rngbytes":{}},"title":{"advanced/sampleDocsOutput/#rule-id-8-1-":{}}}],["80",{"_index":1794,"text":{"model/":{},"model/#rule-results":{}},"title":{}}],["80,562m",{"_index":1510,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["84",{"_index":1505,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["86.30",{"_index":7,"text":{"":{},"#quality-001-snapshot":{}},"title":{}}],["8d",{"_index":1001,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["8m",{"_index":804,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["9",{"_index":1649,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["9.1",{"_index":1694,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}}}],["9.1.dbr",{"_index":1147,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["9.1.dbr_",{"_index":1617,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["90",{"_index":1639,"text":{"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{}},"title":{}}],["96",{"_index":960,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["96bit",{"_index":522,"text":{"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{}},"title":{}}],["99",{"_index":184,"text":{"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["_",{"_index":129,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#printcode":{}},"title":{"sqlfunctions/#_":{}}}],["_('int",{"_index":1289,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["_10.4.dbr",{"_index":1712,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["_11.3.dbr",{"_index":1722,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["_3",{"_index":1419,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["_9.1.dbr",{"_index":1695,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["_base",{"_index":254,"text":{"sqlfunctions/":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#providedid":{},"sqlfunctions/#rngid":{},"sqlfunctions/#uniqueid":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["_i0",{"_index":255,"text":{"sqlfunctions/":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#providedid":{},"sqlfunctions/#rngid":{},"sqlfunctions/#uniqueid":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["_i1",{"_index":343,"text":{"sqlfunctions/":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#rngid":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["_in",{"_index":256,"text":{"sqlfunctions/":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#providedid":{},"sqlfunctions/#rngid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["_lambda\\_",{"_index":393,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["_lambda_",{"_index":138,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#_lambda_":{}},"title":{"sqlfunctions/#_lambda_":{}}}],["_lambda_(func",{"_index":1284,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["_lambda_(plus(_('int",{"_index":1288,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["_lambda_(plus3(_('int",{"_index":1292,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["_suffix",{"_index":1199,"text":{"advanced/ruleFolder/":{}},"title":{}}],["_version.dbr",{"_index":1729,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["abil",{"_index":653,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["abov",{"_index":1117,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{}},"title":{}}],["abstractmethoderror'",{"_index":1704,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["acc",{"_index":1287,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["accept",{"_index":1300,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["access",{"_index":1682,"text":{"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{}},"title":{}}],["account",{"_index":1032,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleFolder/":{}},"title":{}}],["account_row('to",{"_index":1033,"text":{"advanced/ruleEngine/":{}},"title":{}}],["accross",{"_index":553,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["accumul",{"_index":1301,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["aco",{"_index":1228,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{}},"title":{}}],["act",{"_index":712,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["action",{"_index":54,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["activ",{"_index":762,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/validation/":{}},"title":{}}],["actual",{"_index":134,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}}}],["ad",{"_index":608,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/rowIdFunctions/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["add",{"_index":486,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#sumwith":{}},"title":{"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}}}],["adddataqualityf",{"_index":1664,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["addfield",{"_index":518,"text":{"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["addit",{"_index":651,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/prng/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["addition",{"_index":1454,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["addoverallresultsanddetail",{"_index":1668,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["addoverallresultsanddetailsf",{"_index":1554,"text":{"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["address",{"_index":123,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["adl",{"_index":808,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["adler32",{"_index":284,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["advanc",{"_index":661,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{}},"title":{}}],["advis",{"_index":1605,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["affect",{"_index":1715,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["afterward",{"_index":1323,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["again",{"_index":1312,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["against",{"_index":638,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["agg",{"_index":1309,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["aggexpr",{"_index":37,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#printcode":{},"sqlfunctions/#sumwith":{}},"title":{"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"sqlfunctions/#aggexpr":{}}}],["aggexpr'",{"_index":162,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{}},"title":{}}],["aggexpr('map<str",{"_index":602,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["aggexpr(filt",{"_index":565,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["aggexpr(id",{"_index":575,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["aggreg",{"_index":115,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#printcode":{},"sqlfunctions/#resultswith":{}},"title":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{}}}],["aggregate(array(1",{"_index":1283,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["aggregatestest.scala",{"_index":640,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["aggrow",{"_index":777,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["aim",{"_index":1168,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"getting_started/running_on_databricks/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["albeit",{"_index":1507,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["algorithm",{"_index":455,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#rngid":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["algorithm'",{"_index":456,"text":{"sqlfunctions/":{},"sqlfunctions/#rngid":{}},"title":{}}],["alloc",{"_index":525,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["allow",{"_index":111,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#callfun":{},"sqlfunctions/#updatefield":{}},"title":{}}],["alongsid",{"_index":1839,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["alreadi",{"_index":1111,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["altern",{"_index":314,"text":{"advanced/rowIdFunctions/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#inc":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{},"sqlfunctions/#sumwith":{}},"title":{}}],["although",{"_index":983,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["alway",{"_index":539,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["always1",{"_index":1775,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["amp",{"_index":1675,"text":{},"title":{"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/#reading-writing-rulesuites":{}}}],["analysi",{"_index":1248,"text":{"advanced/userFunctions/":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["anoth",{"_index":204,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{}}],["anyway",{"_index":771,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{}},"title":{}}],["apart",{"_index":1049,"text":{"advanced/ruleEngine/":{}},"title":{}}],["appli",{"_index":49,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/expressionDocs/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{}}],["applic",{"_index":20,"text":{"":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}}}],["approach",{"_index":560,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/expressionDocs/":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}}}],["appropri",{"_index":425,"text":{"advanced/ruleEngine/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["april",{"_index":1481,"text":{"background/changelog/":{}},"title":{"background/changelog/#the-quality-exploration-starts-25th-april-2020":{}}}],["arbitrari",{"_index":1456,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["architect",{"_index":1471,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["area",{"_index":690,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["aren't",{"_index":392,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["arg",{"_index":1806,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["arguement",{"_index":401,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["argument",{"_index":1257,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["ariti",{"_index":137,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["around",{"_index":1259,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["array",{"_index":88,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleFolder/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#flattenresults":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#providedid":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["array(account_row('from",{"_index":1031,"text":{"advanced/ruleEngine/":{}},"title":{}}],["array<struct<`transfer_typ",{"_index":1040,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{}},"title":{}}],["array[byt",{"_index":775,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["array_transform",{"_index":1378,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["artefact",{"_index":1580,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-via-commandline":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["artifactid",{"_index":1608,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["ask",{"_index":1436,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/about/#why-quality":{}},"title":{}}],["assert",{"_index":1286,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["assess",{"_index":1398,"text":{"advanced/validation/":{}},"title":{}}],["associ",{"_index":466,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"sqlfunctions/":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["assum",{"_index":144,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["assumpt",{"_index":1788,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["atomicrefer",{"_index":1348,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["atotru",{"_index":1773,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["attempt",{"_index":722,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["attribut",{"_index":211,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{}}],["audit",{"_index":1020,"text":{"advanced/ruleEngine/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#how-did-rules-and-folder-come-about":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["autom",{"_index":1599,"text":{"getting_started/":{},"getting_started/#running-the-tests":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["automat",{"_index":898,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["avail",{"_index":534,"text":{"advanced/ruleEngine/":{},"background/about/":{},"background/about/#why-quality":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["averag",{"_index":1725,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["avoid",{"_index":691,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["away",{"_index":1353,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["axisformat",{"_index":992,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["azur",{"_index":1123,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["b",{"_index":765,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["b4m",{"_index":1124,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["back",{"_index":903,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/validation/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["backend",{"_index":972,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{}},"title":{}}],["backport",{"_index":1713,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["backward",{"_index":621,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}},"title":{}}],["bad",{"_index":1449,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}},"title":{"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}}}],["balanc",{"_index":1534,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["bank",{"_index":1687,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-with-constants":{}},"title":{}}],["base",{"_index":121,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/expressionDocs/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#why-quality":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#probability":{}},"title":{}}],["baselin",{"_index":1488,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["basic",{"_index":817,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngine/":{}},"title":{}}],["batch",{"_index":17,"text":{"":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#why-is-this-needed":{},"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}}}],["be",{"_index":419,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["becom",{"_index":1130,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["befor",{"_index":217,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{}}}],["behav",{"_index":1086,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{}},"title":{}}],["behaviour",{"_index":1331,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["below",{"_index":756,"text":{"advanced/blooms/":{},"advanced/blooms/#what-are-bloom-maps":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["benefit",{"_index":923,"text":{"advanced/prng/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["better",{"_index":750,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"background/about/":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["between",{"_index":633,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"background/changelog/":{},"background/changelog/#001-snapshot-5th-march-2023":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["beyond",{"_index":636,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["bf",{"_index":784,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["big",{"_index":744,"text":{"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["bigbloom",{"_index":168,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#what-are-bloom-maps":{},"sqlfunctions/":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{}},"title":{"sqlfunctions/#bigbloom":{}}}],["bigbloom(buildfrom",{"_index":169,"text":{"sqlfunctions/":{},"sqlfunctions/#bigbloom":{}},"title":{}}],["bigint",{"_index":141,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["billion",{"_index":81,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["bin",{"_index":1596,"text":{"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["binari",{"_index":458,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"sqlfunctions/":{},"sqlfunctions/#rnguuid":{}},"title":{}}],["bind",{"_index":106,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["bit",{"_index":235,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["bitset",{"_index":702,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["bizarr",{"_index":1262,"text":{"advanced/userFunctions/":{}},"title":{}}],["blazingli",{"_index":1127,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["block",{"_index":701,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["bloom",{"_index":75,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#saferlongpair":{},"sqlfunctions/#smallbloom":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zahashwithstruct":{}},"title":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#what-are-bloom-maps":{}}}],["bloom_id",{"_index":172,"text":{"sqlfunctions/":{},"sqlfunctions/#bigbloom":{}},"title":{}}],["bloomfilt",{"_index":420,"text":{"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{},"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["bloomfiltermap",{"_index":759,"text":{"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{}},"title":{}}],["bloomfilternam",{"_index":814,"text":{"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{}},"title":{}}],["bloomfrom",{"_index":800,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["bloomid",{"_index":418,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"sqlfunctions/":{},"sqlfunctions/#probabilityin":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["bloomlookup",{"_index":785,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["bloomon",{"_index":792,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["blue",{"_index":1487,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#udf-created-structures":{}},"title":{}}],["bookkeep",{"_index":1468,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["boolean",{"_index":1412,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["both",{"_index":395,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/expressionDocs/":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/about/":{},"background/about/#why-quality":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#resultswith":{}},"title":{}}],["bottom",{"_index":1526,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["bound",{"_index":1683,"text":{"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}},"title":{}}],["boundari",{"_index":711,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["bracket",{"_index":1258,"text":{"advanced/userFunctions/":{}},"title":{}}],["branch",{"_index":8,"text":{"":{},"#quality-001-snapshot":{}},"title":{}}],["break",{"_index":716,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-with-constants":{}},"title":{}}],["breaker",{"_index":1166,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{}},"title":{}}],["breez",{"_index":754,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["bring",{"_index":1125,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{}},"title":{}}],["broadcast",{"_index":94,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["bucket",{"_index":735,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["bucketedfil",{"_index":796,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["build",{"_index":552,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-the-library":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{"advanced/mapFunctions/#building-the-lookup-maps":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-the-library":{},"getting_started/#building-via-commandline":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}}}],["buildfrom",{"_index":173,"text":{"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["built",{"_index":157,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{}},"title":{}}],["bullet",{"_index":830,"text":{"advanced/expressionDocs/":{}},"title":{}}],["bump",{"_index":246,"text":{"sqlfunctions/":{},"sqlfunctions/#disabledrule":{}},"title":{}}],["byte",{"_index":87,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"sqlfunctions/":{},"sqlfunctions/#rngbytes":{}},"title":{}}],["bytearray",{"_index":479,"text":{"sqlfunctions/":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["bytecount",{"_index":450,"text":{"sqlfunctions/":{},"sqlfunctions/#rngbytes":{}},"title":{}}],["c",{"_index":1280,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["cach",{"_index":871,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{}},"title":{}}],["calcul",{"_index":589,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"background/about/":{},"background/about/#resulting-solution-space":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}},"title":{}}],["call",{"_index":197,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/validation/":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/":{},"model/#rule-results":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#printcode":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["callfun",{"_index":192,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{"sqlfunctions/#callfun":{}}}],["callfun(callfun(func",{"_index":1317,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["callfun(func",{"_index":1311,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["callfun(retlambda(1l",{"_index":1330,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["came",{"_index":1473,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["can't",{"_index":732,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{}},"title":{}}],["canonicalis",{"_index":1714,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["capabl",{"_index":1459,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["captur",{"_index":383,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["care",{"_index":581,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["carri",{"_index":865,"text":{"advanced/expressionDocs/":{}},"title":{}}],["case",{"_index":637,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["cast",{"_index":186,"text":{"advanced/aggregations/":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#smallbloom":{}},"title":{"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}}}],["catalyst",{"_index":1464,"text":{"background/about/":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{"background/evaluation_method/#catalyst-expression-performance":{}}}],["caus",{"_index":1098,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"model/":{},"model/#rule-results":{}},"title":{}}],["cci",{"_index":884,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["ccyrat",{"_index":611,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["cell",{"_index":1736,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["chain",{"_index":1666,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["chang",{"_index":136,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/validation/":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rules":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{"advanced/blooms/#how-does-quality-change-this":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{}}}],["changelog",{"_index":1475,"text":{},"title":{"background/changelog/":{}}}],["check",{"_index":369,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["choic",{"_index":1559,"text":{"getting_started/":{},"getting_started/#building-the-library":{},"getting_started/#running-the-tests":{}},"title":{}}],["choos",{"_index":920,"text":{"advanced/prng/":{},"advanced/ruleEngine/":{}},"title":{}}],["chose",{"_index":961,"text":{"advanced/rowIdFunctions/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["chosen",{"_index":288,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["circ",{"_index":1541,"text":{"background/storage_method/":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{}},"title":{}}],["circumst",{"_index":1474,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["citizen",{"_index":1270,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["city_1_1",{"_index":543,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["class",{"_index":1269,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["classload",{"_index":386,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["classnam",{"_index":1372,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["classpath",{"_index":1425,"text":{"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{}},"title":{}}],["clean",{"_index":1571,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["cleanupoth",{"_index":798,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["clear",{"_index":1384,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{}},"title":{}}],["clock",{"_index":1121,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["close",{"_index":1548,"text":{"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["cluster",{"_index":65,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["coalesceifattributesmiss",{"_index":205,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#coalesceifattributesmissing":{}}}],["coalesceifattributesmissing(expr",{"_index":206,"text":{"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{}},"title":{}}],["coalesceifattributesmissingdis",{"_index":225,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#coalesceifattributesmissingdisable":{}}}],["coalesceifattributesmissingdisable(expr",{"_index":226,"text":{"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{}}],["code",{"_index":214,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/mapFunctions/#map-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#printcode":{}},"title":{}}],["codegen",{"_index":1152,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["col",{"_index":905,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["col1",{"_index":1255,"text":{"advanced/userFunctions/":{}},"title":{}}],["col2",{"_index":1256,"text":{"advanced/userFunctions/":{}},"title":{}}],["collect",{"_index":125,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["collis",{"_index":528,"text":{"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["column",{"_index":35,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleFolder/":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"model/":{},"model/#rule-results":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}}}],["column'",{"_index":764,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{}},"title":{}}],["columnfilt",{"_index":1805,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["com",{"_index":793,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/expressionDocs/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["com.sparkutil",{"_index":1607,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["com.sparkutils.quality.tests.testsuit",{"_index":1745,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["com.sparkutils.qualitytests.sparktestutil",{"_index":1746,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["combin",{"_index":1077,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}},"title":{}}],["come",{"_index":1392,"text":{"advanced/validation/":{},"background/about/":{}},"title":{"background/about/#how-did-rules-and-folder-come-about":{}}}],["command",{"_index":1569,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["commandlin",{"_index":1561,"text":{"getting_started/":{}},"title":{"getting_started/#building-via-commandline":{}}}],["comment",{"_index":838,"text":{"advanced/expressionDocs/":{}},"title":{}}],["common",{"_index":445,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"sqlfunctions/":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{}},"title":{}}],["commonli",{"_index":1175,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["comparison",{"_index":940,"text":{"advanced/rowIdFunctions/":{},"background/storage_method/":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"background/storage_method/#udf-created-structures":{}},"title":{}}],["compat",{"_index":390,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["compil",{"_index":1149,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}}}],["compileev",{"_index":1537,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["complet",{"_index":1762,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["complex",{"_index":11,"text":{"":{},"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#structure-model-storage-costs":{},"background/storage_method/#udf-created-structures":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}}}],["compress",{"_index":348,"text":{"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"sqlfunctions/":{},"sqlfunctions/#packints":{}},"title":{}}],["concat",{"_index":1216,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{}},"title":{}}],["concat(thecurrent.account",{"_index":1198,"text":{"advanced/ruleFolder/":{}},"title":{}}],["concept",{"_index":1271,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"model/":{},"model/#rules":{}},"title":{}}],["conceptu",{"_index":1684,"text":{"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["conceptualis",{"_index":1792,"text":{"model/":{},"model/#rules":{}},"title":{}}],["conf",{"_index":1701,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["configur",{"_index":918,"text":{"advanced/prng/":{},"advanced/ruleEngine/":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["consid",{"_index":968,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["constant",{"_index":806,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"getting_started/key_functions/":{}},"title":{"getting_started/key_functions/#expressions-with-constants":{}}}],["consum",{"_index":1450,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["contain",{"_index":92,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{}}],["contend",{"_index":1352,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["content",{"_index":813,"text":{"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{}},"title":{}}],["contigu",{"_index":488,"text":{"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["contrast",{"_index":699,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleFolder/":{}},"title":{}}],["control",{"_index":38,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}}}],["conveni",{"_index":32,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}},"title":{}}],["convent",{"_index":1754,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["convers",{"_index":1498,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["convert",{"_index":327,"text":{"advanced/ruleEngine/":{},"sqlfunctions/":{},"sqlfunctions/#longpairfromuuid":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#rnguuid":{}},"title":{}}],["copi",{"_index":858,"text":{"advanced/expressionDocs/":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["core",{"_index":563,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["correct",{"_index":153,"text":{"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{}},"title":{}}],["cost",{"_index":1114,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#why-quality":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{}},"title":{"background/storage_method/#filtering-costs":{},"background/storage_method/#structure-model-storage-costs":{}}}],["count",{"_index":337,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#warnings-summary":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"sqlfunctions/":{},"sqlfunctions/#meanf":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#returnsum":{}},"title":{}}],["counterpart",{"_index":931,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{}},"title":{}}],["countri",{"_index":882,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{}},"title":{}}],["country).cci",{"_index":907,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{}},"title":{}}],["countrycod",{"_index":879,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["countrycodecci",{"_index":880,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["counttyp",{"_index":433,"text":{"sqlfunctions/":{},"sqlfunctions/#resultswith":{}},"title":{}}],["coupl",{"_index":839,"text":{"advanced/expressionDocs/":{}},"title":{}}],["cours",{"_index":1128,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["cover",{"_index":788,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["coverag",{"_index":5,"text":{"":{},"#quality-001-snapshot":{}},"title":{}}],["crc32",{"_index":285,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["creat",{"_index":23,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"background/storage_method/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#longpair":{},"sqlfunctions/#providedid":{},"sqlfunctions/#smallbloom":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{"background/storage_method/#expression-created-structures":{},"background/storage_method/#udf-created-structures":{}}}],["createerrorandwarningmarkdown",{"_index":857,"text":{"advanced/expressionDocs/":{}},"title":{}}],["createmarkdown",{"_index":849,"text":{"advanced/expressionDocs/":{}},"title":{}}],["creation",{"_index":801,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{}},"title":{}}],["cross",{"_index":1148,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["crucial",{"_index":1442,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["cryptograph",{"_index":950,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["currenc",{"_index":904,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{}},"title":{}}],["current",{"_index":309,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"sqlfunctions/":{},"sqlfunctions/#idequal":{},"sqlfunctions/#inc":{}},"title":{}}],["custom",{"_index":668,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{}},"title":{}}],["customis",{"_index":559,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/ruleEngine/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["d",{"_index":1646,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["data",{"_index":12,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/mapFunctions/#map-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/about/#resulting-solution-space":{},"background/about/#why-quality":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"model/":{},"model/#rule-results":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#flattenresults":{},"sqlfunctions/#flattenruleresults":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}}}],["databas",{"_index":1406,"text":{"advanced/validation/":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["databrick",{"_index":294,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#why-quality":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}}}],["datafram",{"_index":213,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/validation/":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{}}}],["dataqu",{"_index":464,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["dataquality.overallresult",{"_index":1671,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}},"title":{}}],["dataqualityresult",{"_index":1665,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["dataset",{"_index":554,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/serializing/":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{"getting_started/serializing/#versioned-rule-datasets":{}}}],["dataset/datafram",{"_index":1680,"text":{"getting_started/flavours/":{}},"title":{}}],["datatyp",{"_index":688,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["datavault",{"_index":934,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{}},"title":{}}],["date",{"_index":895,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["dateformat",{"_index":988,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["dbf",{"_index":747,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["dbfs/databricks/quality_test",{"_index":1738,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["dbr",{"_index":1332,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["dd",{"_index":991,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["ddeployatend",{"_index":1564,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["ddl",{"_index":130,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#returnsum":{},"sqlfunctions/#sumwith":{}},"title":{"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}}}],["ddl'",{"_index":652,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["ddl_type",{"_index":439,"text":{"sqlfunctions/":{},"sqlfunctions/#returnsum":{}},"title":{}}],["debug",{"_index":1046,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{"advanced/ruleEngine/#debugging":{}}}],["debugmod",{"_index":1081,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["debugrul",{"_index":1090,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{}},"title":{}}],["dec",{"_index":1306,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["decid",{"_index":1451,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["decim",{"_index":42,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}},"title":{}}],["decimal(38,18",{"_index":1305,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["declar",{"_index":1429,"text":{"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{}},"title":{}}],["deem",{"_index":1796,"text":{"model/":{},"model/#rule-results":{}},"title":{}}],["deep",{"_index":693,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["deepli",{"_index":663,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{}},"title":{}}],["deequ",{"_index":555,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["def",{"_index":1365,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["default",{"_index":139,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#sumwith":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{}},"title":{"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}}}],["defaultadd",{"_index":684,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["defaultparsetyp",{"_index":672,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{}},"title":{}}],["defaultzero",{"_index":681,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["defin",{"_index":34,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/expressionDocs/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{}},"title":{"advanced/userFunctions/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}}}],["definit",{"_index":422,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["degrad",{"_index":721,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["degre",{"_index":1440,"text":{"background/about/":{},"background/about/#why-quality":{}},"title":{}}],["delay",{"_index":1112,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["deleg",{"_index":1422,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["delet",{"_index":1767,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["delta",{"_index":1748,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["depend",{"_index":630,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{"getting_started/#build-tool-dependencies":{}}}],["deprec",{"_index":469,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"sqlfunctions/":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["deriv",{"_index":1193,"text":{"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["desc",{"_index":824,"text":{"advanced/expressionDocs/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{}},"title":{}}],["describ",{"_index":1044,"text":{"advanced/ruleEngine/":{}},"title":{}}],["descript",{"_index":823,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{}},"title":{}}],["deseri",{"_index":797,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["design",{"_index":1391,"text":{"advanced/validation/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["desir",{"_index":1756,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["detail",{"_index":1495,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["determinist",{"_index":1169,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{}},"title":{}}],["dev",{"_index":1558,"text":{"getting_started/":{},"getting_started/#building-the-library":{}},"title":{}}],["develop",{"_index":1467,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"getting_started/":{},"getting_started/#running-the-tests":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{"getting_started/#developing-for-a-databricks-runtime":{}}}],["df",{"_index":569,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["diagram",{"_index":1499,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["dictionari",{"_index":1395,"text":{"advanced/validation/":{}},"title":{}}],["didn't",{"_index":1789,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["differ",{"_index":583,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}}}],["digest",{"_index":238,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{}},"title":{}}],["digestimpl",{"_index":251,"text":{"sqlfunctions/":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["digesttolong",{"_index":190,"text":{"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#probabilityin":{},"sqlfunctions/#smallbloom":{}},"title":{"sqlfunctions/#digesttolongs":{}}}],["digesttolongs('digestimpl",{"_index":230,"text":{"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{}},"title":{}}],["digesttolongsstruct",{"_index":239,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#digesttolongsstruct":{}}}],["digesttolongsstruct('digestimpl",{"_index":240,"text":{"sqlfunctions/":{},"sqlfunctions/#digesttolongsstruct":{}},"title":{}}],["dinstallatend",{"_index":1563,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["directli",{"_index":142,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{},"getting_started/#building-the-library":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["directori",{"_index":1584,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/#running-the-tests":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["disabl",{"_index":244,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#why-do-all-this":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-with-constants":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#disabledrule":{}},"title":{}}],["disabledint",{"_index":1825,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["disabledrul",{"_index":227,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-with-constants":{},"model/":{},"model/#rule-results":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#disabledrule":{}},"title":{"sqlfunctions/#disabledrule":{}}}],["discourag",{"_index":1497,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["disk",{"_index":1058,"text":{"advanced/ruleEngine/":{}},"title":{}}],["display",{"_index":1401,"text":{"advanced/validation/":{}},"title":{}}],["distinct",{"_index":600,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/rowIdFunctions/":{},"advanced/validation/":{}},"title":{}}],["distribut",{"_index":64,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["divid",{"_index":574,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["dll",{"_index":1594,"text":{"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["dmaven.test.skip",{"_index":1579,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["doc",{"_index":841,"text":{"advanced/expressionDocs/":{}},"title":{}}],["docmarkdowntest",{"_index":869,"text":{"advanced/expressionDocs/":{}},"title":{}}],["docs/advanced/sampledocsoutput.md",{"_index":855,"text":{"advanced/expressionDocs/":{}},"title":{}}],["docs/advanced/sampledocsvalidation.md",{"_index":861,"text":{"advanced/expressionDocs/":{}},"title":{}}],["document",{"_index":128,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#warnings-summary":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{}},"title":{"advanced/expressionDocs/":{},"sqlfunctions/":{}}}],["doens't",{"_index":1542,"text":{"background/storage_method/":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{}},"title":{}}],["doesn't",{"_index":745,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/key_functions/#expressions-with-constants":{}},"title":{}}],["domin",{"_index":1529,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["don't",{"_index":833,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["done",{"_index":727,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["doubl",{"_index":187,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/prng/":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#probability":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#smallbloom":{},"sqlfunctions/#sumwith":{}},"title":{}}],["down",{"_index":956,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["downgrad",{"_index":292,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["download",{"_index":1593,"text":{"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["dq",{"_index":870,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}},"title":{}}],["dq/trigger",{"_index":1658,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["dquality.lambdahandlers=org.apache.spark.sql.catalyst.expressions.transformvalues=org.mine.superfasttransformvalu",{"_index":1379,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["dquality.lambdahandlers=org.apache.spark.sql.qualityfunctions.funn=org.apache.spark.sql.qualityfunctions.docodegenfallbackhandl",{"_index":1375,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["dragon",{"_index":695,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["drastic",{"_index":1116,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["driven",{"_index":189,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["driver",{"_index":407,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"sqlfunctions/":{},"sqlfunctions/#printexpr":{}},"title":{}}],["drop",{"_index":297,"text":{"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["ds",{"_index":1835,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["dskiptest",{"_index":1565,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["due",{"_index":291,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#printcode":{}},"title":{}}],["duplic",{"_index":618,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["durat",{"_index":1154,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{}},"title":{}}],["dure",{"_index":53,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/userFunctions/":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["e",{"_index":1647,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["e.g",{"_index":180,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/userFunctions/#why-do-all-this":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#probability":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#softfail":{},"sqlfunctions/#sumwith":{}},"title":{}}],["each",{"_index":370,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/expressionDocs/":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#sumwith":{}},"title":{}}],["easi",{"_index":944,"text":{"advanced/rowIdFunctions/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["easier",{"_index":517,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"model/":{},"model/#rules":{},"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["easili",{"_index":726,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/rowIdFunctions/":{},"background/storage_method/":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{}},"title":{}}],["echo",{"_index":1492,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["edit",{"_index":1749,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["effect",{"_index":1261,"text":{"advanced/userFunctions/":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["effici",{"_index":1461,"text":{"background/about/":{},"background/about/#resulting-solution-space":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#structure-model-storage-costs":{}},"title":{}}],["effort",{"_index":1105,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["element",{"_index":599,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["elsewher",{"_index":1310,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["embed",{"_index":606,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["emd",{"_index":856,"text":{"advanced/expressionDocs/":{}},"title":{}}],["empti",{"_index":1363,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["enabl",{"_index":1080,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"background/about/":{},"background/about/#resulting-solution-space":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}},"title":{}}],["enc",{"_index":1832,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["encod",{"_index":443,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{}},"title":{}}],["encount",{"_index":1358,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["end",{"_index":1437,"text":{"background/about/":{},"background/about/#why-quality":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["endmac",{"_index":1005,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["endtimestamp",{"_index":1010,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["engin",{"_index":1017,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"background/about/":{},"background/about/#why-quality":{}},"title":{"advanced/ruleEngine/":{}}}],["enhanc",{"_index":62,"text":{"":{},"advanced/validation/":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{}},"title":{"#enhanced-spark-functionality":{}}}],["enough",{"_index":1135,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{}},"title":{}}],["ensur",{"_index":1053,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["entir",{"_index":1333,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["entri",{"_index":476,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["env",{"_index":1728,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["environ",{"_index":1368,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"getting_started/":{},"getting_started/#building-the-library":{}},"title":{}}],["epoch",{"_index":984,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["equal",{"_index":1324,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["equival",{"_index":601,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["error",{"_index":224,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/expressionDocs/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsValidation/":{},"advanced/userFunctions/":{},"advanced/validation/":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#hashwith":{}},"title":{"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings":{},"advanced/sampleDocsValidation/#errors-identified-for-rulesuite-id-0-1":{},"advanced/sampleDocsValidation/#errors-summary":{}}}],["errors/warn",{"_index":868,"text":{"advanced/expressionDocs/":{}},"title":{}}],["errortext",{"_index":1402,"text":{"advanced/validation/":{}},"title":{}}],["etc",{"_index":365,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["eval",{"_index":364,"text":{"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["evalcodegen",{"_index":1142,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["evalcodegensnoresolv",{"_index":1143,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["evalu",{"_index":51,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}}}],["evalutaion",{"_index":1110,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["even",{"_index":1182,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/validation/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{}},"title":{}}],["evidenc",{"_index":1764,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["ex",{"_index":594,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["exact",{"_index":91,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["exampl",{"_index":356,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{}},"title":{}}],["exce",{"_index":717,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["exceed",{"_index":959,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["except",{"_index":622,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/ruleFolder/":{}},"title":{}}],["excess",{"_index":1662,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["execut",{"_index":1188,"text":{"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/about/":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}},"title":{}}],["executor",{"_index":367,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["exist",{"_index":430,"text":{"advanced/expressionDocs/":{},"advanced/prng/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#providedid":{}},"title":{"background/about/#gaps-in-existing-spark-offerings":{}}}],["existinglong",{"_index":429,"text":{"sqlfunctions/":{},"sqlfunctions/#providedid":{}},"title":{}}],["exp1",{"_index":945,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["exp2",{"_index":946,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["expand",{"_index":116,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"sqlfunctions/":{},"sqlfunctions/#flattenresults":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#returnsum":{}},"title":{}}],["expect",{"_index":154,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#callfun":{},"sqlfunctions/#meanf":{},"sqlfunctions/#printcode":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["expectedfpp",{"_index":171,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["expecteds",{"_index":170,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["expens",{"_index":72,"text":{"":{},"#enhanced-spark-functionality":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{}},"title":{}}],["experiment",{"_index":1092,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["expl",{"_index":1085,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{}},"title":{}}],["expl.result",{"_index":1214,"text":{"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{}},"title":{}}],["explicit",{"_index":1692,"text":{"getting_started/running_on_databricks/":{}},"title":{}}],["explicitli",{"_index":1344,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["explod",{"_index":1089,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["explode(flattenfolderresults(togeth",{"_index":1213,"text":{"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{}},"title":{}}],["explode(flattenresults(dataqu",{"_index":1673,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}},"title":{}}],["explode(flattenruleresults(togeth",{"_index":1084,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{}},"title":{}}],["explor",{"_index":1479,"text":{"background/changelog/":{}},"title":{"background/changelog/#the-quality-exploration-starts-25th-april-2020":{}}}],["expos",{"_index":109,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["expr",{"_index":209,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{},"sqlfunctions/#probabilityin":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["express",{"_index":90,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/sampleDocsValidation/#warnings-summary":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"model/#rules":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#inc":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{},"sqlfunctions/#sumwith":{}},"title":{"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/prng/#rng-expressions":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/#expression-created-structures":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/key_functions/#expressions-with-constants":{}}}],["expressionlookup",{"_index":1416,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["expressionrul",{"_index":1035,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["exprid",{"_index":1354,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["extend",{"_index":667,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["extens",{"_index":61,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/rowIdFunctions/":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/about/#why-quality":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["extra",{"_index":1097,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["extract",{"_index":150,"text":{"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{}},"title":{}}],["extradocparamet",{"_index":1235,"text":{"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/sampleDocsValidation/#warnings-summary":{}},"title":{}}],["f",{"_index":1577,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["facilit",{"_index":1189,"text":{"advanced/ruleFolder/":{}},"title":{}}],["fail",{"_index":247,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/key_functions/#expressions-with-constants":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#failed":{},"sqlfunctions/#softfail":{}},"title":{"sqlfunctions/#failed":{}}}],["failedint",{"_index":1823,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["failur",{"_index":484,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#softfail":{}},"title":{}}],["fake",{"_index":1706,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["fall",{"_index":724,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["fallback",{"_index":1389,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["fals",{"_index":146,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["famili",{"_index":963,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["far",{"_index":703,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{}}}],["farmna",{"_index":544,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["farmou",{"_index":545,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["fast",{"_index":107,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#why-is-this-needed":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{}},"title":{}}],["faster",{"_index":277,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"model/":{},"model/#rules":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["fastest",{"_index":1543,"text":{"background/storage_method/":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{}},"title":{}}],["fed",{"_index":1192,"text":{"advanced/ruleFolder/":{}},"title":{}}],["few",{"_index":911,"text":{"advanced/prng/":{}},"title":{}}],["field",{"_index":148,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#idequal":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#providedid":{},"sqlfunctions/#rngid":{},"sqlfunctions/#rulesuiteresultdetails":{},"sqlfunctions/#smallbloom":{},"sqlfunctions/#uniqueid":{},"sqlfunctions/#updatefield":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zahashwithstruct":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["field.subfield",{"_index":506,"text":{"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["fielda",{"_index":1215,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/sampleDocsValidation/#warnings-summary":{}},"title":{}}],["fieldb",{"_index":1217,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{}},"title":{}}],["fieldbasedid",{"_index":249,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{}},"title":{"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"sqlfunctions/#fieldbasedid":{}}}],["fieldbasedid('prefix",{"_index":250,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#fieldbasedid":{}},"title":{}}],["fieldn",{"_index":507,"text":{"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["file",{"_index":388,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["fileloc",{"_index":1737,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["fileoutputstream",{"_index":854,"text":{"advanced/expressionDocs/":{}},"title":{}}],["filesystem",{"_index":175,"text":{"sqlfunctions/":{},"sqlfunctions/#bigbloom":{}},"title":{}}],["fill",{"_index":927,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["filter",{"_index":76,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#udf-created-structures":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#disabledrule":{},"sqlfunctions/#failed":{},"sqlfunctions/#passed":{},"sqlfunctions/#printcode":{},"sqlfunctions/#probability":{},"sqlfunctions/#smallbloom":{},"sqlfunctions/#softfailed":{}},"title":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"background/storage_method/#filtering-costs":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}}}],["filter(map_values(dataquality.rulesetresult",{"_index":1814,"text":{"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["filteredrulesuit",{"_index":1807,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["final",{"_index":586,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["find",{"_index":371,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["finish",{"_index":1743,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["first",{"_index":164,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/a_first_rulesuite/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{}},"title":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}}}],["fit",{"_index":84,"text":{"":{},"#enhanced-spark-functionality":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["fix",{"_index":631,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/prng/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["flag",{"_index":835,"text":{"advanced/expressionDocs/":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["flat",{"_index":259,"text":{"sqlfunctions/":{},"sqlfunctions/#flattenresults":{}},"title":{}}],["flatten",{"_index":1674,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}},"title":{}}],["flattenedresult",{"_index":262,"text":{"sqlfunctions/":{},"sqlfunctions/#flattenruleresults":{}},"title":{}}],["flattenfolderresult",{"_index":1212,"text":{"advanced/ruleFolder/":{}},"title":{"advanced/ruleFolder/#flattenfolderresults":{}}}],["flattenresult",{"_index":257,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#flattenresults":{}}}],["flattenresults(dataqualityexpr",{"_index":258,"text":{"sqlfunctions/":{},"sqlfunctions/#flattenresults":{}},"title":{}}],["flattenruleresult",{"_index":260,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"sqlfunctions/":{}},"title":{"advanced/ruleEngine/#flattenruleresults":{},"sqlfunctions/#flattenruleresults":{}}}],["flattenruleresults(dataqualityexpr",{"_index":261,"text":{"sqlfunctions/":{},"sqlfunctions/#flattenruleresults":{}},"title":{}}],["flavour",{"_index":1393,"text":{"advanced/validation/":{},"getting_started/flavours/":{}},"title":{"getting_started/flavours/":{}}}],["flexibl",{"_index":773,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["flip",{"_index":713,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["focu",{"_index":1448,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["fold",{"_index":1187,"text":{"advanced/ruleFolder/":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}},"title":{}}],["folder",{"_index":1387,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/about/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}},"title":{"background/about/#how-did-rules-and-folder-come-about":{}}}],["follow",{"_index":818,"text":{"advanced/expressionDocs/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["forc",{"_index":836,"text":{"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{}},"title":{}}],["forcerunnerev",{"_index":1150,"text":{"advanced/ruleEngine/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{"advanced/ruleEngine/#forcerunnereval":{}}}],["fork",{"_index":1557,"text":{"getting_started/":{},"getting_started/#building-the-library":{}},"title":{}}],["form",{"_index":564,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["format",{"_index":632,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/expressionDocs/":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["forward",{"_index":363,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["foul",{"_index":725,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["found",{"_index":1236,"text":{"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/sampleDocsValidation/#warnings-summary":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/about/":{},"background/about/#resulting-solution-space":{}},"title":{}}],["fpp",{"_index":78,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#probabilityin":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["frame",{"_index":1244,"text":{"advanced/userFunctions/":{}},"title":{}}],["frameless",{"_index":1052,"text":{"advanced/ruleEngine/":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["framework",{"_index":1544,"text":{"background/storage_method/":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["free",{"_index":1101,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["freeli",{"_index":1264,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["fromddl",{"_index":1039,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["front",{"_index":1119,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["full",{"_index":202,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-via-commandline":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{}}],["fulli",{"_index":1298,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["fun",{"_index":609,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["func",{"_index":1282,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["function",{"_index":26,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/key_functions/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#callfun":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{},"sqlfunctions/#probabilityin":{},"sqlfunctions/#saferlongpair":{},"sqlfunctions/#smallbloom":{},"sqlfunctions/#updatefield":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{}},"title":{"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/key_functions/":{},"getting_started/key_functions/#key-sql-functions-to-use-in-your-rules":{},"sqlfunctions/":{}}}],["functionid",{"_index":1072,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["functionregistri",{"_index":1404,"text":{"advanced/validation/":{}},"title":{}}],["functionvers",{"_index":1073,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["fundement",{"_index":733,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["funn",{"_index":1356,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["funnycheck",{"_index":883,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["further",{"_index":357,"text":{"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{}},"title":{}}],["futur",{"_index":772,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["gantt",{"_index":987,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["gap",{"_index":1334,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#why-quality":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#filtering-costs":{}},"title":{"background/about/#gaps-in-existing-spark-offerings":{}}}],["gb",{"_index":810,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["gener",{"_index":114,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/expressionDocs/":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#printcode":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{},"sqlfunctions/#uniqueid":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["get",{"_index":1672,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}},"title":{}}],["geta",{"_index":783,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["gitlab",{"_index":1585,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["give",{"_index":1490,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["given",{"_index":231,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#sumwith":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["global",{"_index":974,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/userFunctions/":{}},"title":{}}],["go",{"_index":1051,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{}},"title":{}}],["goe",{"_index":675,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"advanced/userFunctions/":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}},"title":{}}],["gone",{"_index":1821,"text":{"model/storage/":{}},"title":{"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}}}],["good",{"_index":1076,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["gradl",{"_index":1634,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["great",{"_index":98,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["greaterthan",{"_index":1254,"text":{"advanced/userFunctions/":{}},"title":{}}],["green",{"_index":1485,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["group",{"_index":598,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["groupid",{"_index":1606,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["guarante",{"_index":119,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}}}],["guava",{"_index":268,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["hackeri",{"_index":1636,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["hadoop_hom",{"_index":1595,"text":{"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["hand",{"_index":899,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["handi",{"_index":126,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["handl",{"_index":41,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["handler",{"_index":1390,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["hash",{"_index":271,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["hasher",{"_index":269,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#hashfieldbasedid":{}},"title":{}}],["hashfieldbasedid",{"_index":266,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#hashfieldbasedid":{}}}],["hashfieldbasedid('prefix",{"_index":267,"text":{"sqlfunctions/":{},"sqlfunctions/#hashfieldbasedid":{}},"title":{}}],["hashwith",{"_index":191,"text":{"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#probabilityin":{},"sqlfunctions/#smallbloom":{}},"title":{"sqlfunctions/#hashwith":{}}}],["hashwith('hash",{"_index":270,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#hashwithstruct":{}},"title":{}}],["hashwithstruct",{"_index":299,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#hashwithstruct":{}}}],["have",{"_index":1347,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{}},"title":{}}],["head",{"_index":781,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["header",{"_index":523,"text":{"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{}},"title":{}}],["heap",{"_index":1509,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["heavili",{"_index":1532,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["held",{"_index":66,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["help",{"_index":840,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["here",{"_index":676,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["hidden",{"_index":1103,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["high",{"_index":176,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"background/about/":{},"background/about/#why-quality":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{}},"title":{}}],["higher",{"_index":45,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#longpair":{},"sqlfunctions/#longpairfromuuid":{},"sqlfunctions/#packints":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#rng":{},"sqlfunctions/#rnguuid":{},"sqlfunctions/#saferlongpair":{},"sqlfunctions/#uniqueid":{}},"title":{"advanced/userFunctions/#higher-order-functions":{}}}],["higherorderfunct",{"_index":155,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#printcode":{}},"title":{}}],["highli",{"_index":1438,"text":{"background/about/":{},"background/about/#why-quality":{}},"title":{}}],["hint",{"_index":1493,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["histori",{"_index":1431,"text":{},"title":{"background/about/":{}}}],["hit",{"_index":1015,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["hof",{"_index":1281,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["hof'd",{"_index":1293,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["hof(plus(_('int",{"_index":1294,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["home",{"_index":0,"text":{},"title":{"":{}}}],["hood",{"_index":97,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/rowIdFunctions/":{}},"title":{}}],["hopefulli",{"_index":809,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["horribl",{"_index":1120,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["horrif",{"_index":1631,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["host",{"_index":374,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["hotspot",{"_index":1376,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["href",{"_index":864,"text":{"advanced/expressionDocs/":{}},"title":{}}],["huge",{"_index":1535,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["hundr",{"_index":708,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["hygien",{"_index":1252,"text":{"advanced/userFunctions/":{}},"title":{}}],["i'",{"_index":311,"text":{"sqlfunctions/":{},"sqlfunctions/#idequal":{}},"title":{}}],["i.",{"_index":79,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["i0",{"_index":242,"text":{"sqlfunctions/":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#idequal":{}},"title":{}}],["i1",{"_index":308,"text":{"sqlfunctions/":{},"sqlfunctions/#idequal":{}},"title":{}}],["id",{"_index":117,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#providedid":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{},"sqlfunctions/#saferlongpair":{},"sqlfunctions/#uniqueid":{},"sqlfunctions/#unpack":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwithstruct":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{},"advanced/sampleDocsOutput/#ruleset-id-1-1":{},"advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings":{},"advanced/sampleDocsValidation/#errors-identified-for-rulesuite-id-0-1":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/sampleDocsValidation/#warnings-identified-for-rulesuite-id-0-1":{}}}],["id'",{"_index":355,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{}},"title":{}}],["id(1002,1",{"_index":1239,"text":{"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{}},"title":{}}],["id(16,1",{"_index":1237,"text":{"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-16-1":{}},"title":{}}],["id(2,1",{"_index":1238,"text":{"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-2-1":{}},"title":{}}],["id(6,1",{"_index":1240,"text":{"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-6-1":{}},"title":{}}],["idea",{"_index":1536,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["ideal",{"_index":1452,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["ident",{"_index":1414,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["identifi",{"_index":755,"text":{"advanced/blooms/":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/rowIdFunctions/":{},"advanced/sampleDocsValidation/":{},"background/about/":{},"background/about/#why-quality":{}},"title":{"advanced/sampleDocsValidation/#errors-identified-for-rulesuite-id-0-1":{},"advanced/sampleDocsValidation/#warnings-identified-for-rulesuite-id-0-1":{}}}],["idequ",{"_index":302,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#idequal":{}}}],["idequal('left_prefix",{"_index":952,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["idequal(leftprefix",{"_index":303,"text":{"sqlfunctions/":{},"sqlfunctions/#idequal":{}},"title":{}}],["if'",{"_index":607,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["if(ccy='chf",{"_index":610,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["ignor",{"_index":437,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/prng/":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-with-constants":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#returnsum":{}},"title":{}}],["illustr",{"_index":1326,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["immut",{"_index":1763,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["impact",{"_index":1770,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["impl",{"_index":233,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["implement",{"_index":273,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["impli",{"_index":183,"text":{"model/":{},"model/#rules":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{}},"title":{}}],["implicit",{"_index":1285,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["import",{"_index":843,"text":{"advanced/expressionDocs/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["importantli",{"_index":1455,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["improv",{"_index":467,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"sqlfunctions/":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["inactiv",{"_index":1768,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["inbuilt",{"_index":1377,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["inc",{"_index":312,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"sqlfunctions/":{},"sqlfunctions/#inc":{}},"title":{"sqlfunctions/#inc":{}}}],["inc('ddl",{"_index":654,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["inc(id",{"_index":595,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["includ",{"_index":118,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{}},"title":{}}],["inclus",{"_index":415,"text":{"sqlfunctions/":{},"sqlfunctions/#probability":{}},"title":{}}],["incompat",{"_index":394,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["incompatibl",{"_index":627,"text":{"advanced/aggregations/":{}},"title":{"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}}}],["incorrect",{"_index":834,"text":{"advanced/expressionDocs/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["increas",{"_index":1382,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["increment",{"_index":313,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#inc":{}},"title":{}}],["inde",{"_index":645,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["index",{"_index":1153,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{}},"title":{}}],["indic",{"_index":1079,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{}},"title":{}}],["individu",{"_index":700,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{}},"title":{}}],["industri",{"_index":872,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{}},"title":{}}],["infer",{"_index":593,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["inform",{"_index":166,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#printcode":{}},"title":{}}],["ingredi",{"_index":1678,"text":{"getting_started/flavours/":{}},"title":{}}],["initi",{"_index":718,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/changelog/":{},"background/changelog/#001-snapshot-5th-march-2023":{}},"title":{}}],["inject",{"_index":628,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["input",{"_index":342,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/expressionDocs/":{},"advanced/userFunctions/":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#murmur3id":{}},"title":{}}],["instal",{"_index":1566,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/#running-the-tests":{}},"title":{}}],["instanc",{"_index":387,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["instead",{"_index":650,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["int",{"_index":347,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#packints":{}},"title":{}}],["int'",{"_index":1689,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["integ",{"_index":228,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#disabledrule":{},"sqlfunctions/#failed":{},"sqlfunctions/#passed":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#softfailed":{}},"title":{}}],["integertyp",{"_index":1818,"text":{"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["integr",{"_index":127,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["integratelambda",{"_index":1761,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["integratemetaruleset",{"_index":1812,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["integrateoutputexpress",{"_index":1075,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{}},"title":{}}],["integratevers",{"_index":1787,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["integrateversionedlambda",{"_index":1781,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["integrateversionedoutputexpress",{"_index":1784,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["intellij",{"_index":1570,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/#running-the-tests":{}},"title":{}}],["intereg",{"_index":1838,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["interim",{"_index":789,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"getting_started/running_on_databricks/":{}},"title":{}}],["intern",{"_index":533,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"background/changelog/":{},"background/changelog/#001-snapshot-5th-march-2023":{},"sqlfunctions/":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["internalrow",{"_index":738,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["interpret",{"_index":414,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"sqlfunctions/":{},"sqlfunctions/#probability":{}},"title":{}}],["interv",{"_index":926,"text":{"advanced/prng/":{}},"title":{}}],["introduc",{"_index":70,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["introduct",{"_index":1351,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["invalid",{"_index":287,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["investig",{"_index":1483,"text":{"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{}},"title":{}}],["ioutil",{"_index":852,"text":{"advanced/expressionDocs/":{}},"title":{}}],["ip",{"_index":976,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["isgreaterthan",{"_index":1654,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["isjump",{"_index":921,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{}},"title":{}}],["isn't",{"_index":1276,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["isnul",{"_index":362,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["isnull(param",{"_index":1651,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["isreallynul",{"_index":1650,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["issu",{"_index":44,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/prng/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#printcode":{}},"title":{}}],["it'",{"_index":237,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#udf-created-structures":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rules":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{}},"title":{}}],["item",{"_index":82,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#mapcontains":{},"sqlfunctions/#updatefield":{}},"title":{}}],["itself",{"_index":585,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["ix",{"_index":301,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwithstruct":{}},"title":{}}],["j",{"_index":993,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["jackson",{"_index":1540,"text":{"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"background/storage_method/#udf-created-structures":{}},"title":{}}],["janino",{"_index":1637,"text":{"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{}},"title":{"getting_started/#24-support-requires-246-or-janino-3016":{}}}],["jar",{"_index":1575,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["jar'",{"_index":1587,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["java",{"_index":710,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["java.lang.abstractmethoderror",{"_index":1424,"text":{"advanced/validation/":{}},"title":{"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{}}}],["javadoc",{"_index":819,"text":{"advanced/expressionDocs/":{}},"title":{}}],["jit",{"_index":1158,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{}},"title":{}}],["job",{"_index":891,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["join",{"_index":71,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["joinvalidationtest",{"_index":1141,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["json",{"_index":1465,"text":{"background/about/":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"background/storage_method/#structure-model-storage-costs":{}},"title":{"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{}}}],["jump",{"_index":922,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["jumpabl",{"_index":915,"text":{"advanced/prng/":{}},"title":{}}],["keep",{"_index":179,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["key",{"_index":591,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"getting_started/key_functions/":{}},"title":{"getting_started/key_functions/":{},"getting_started/key_functions/#key-sql-functions-to-use-in-your-rules":{}}}],["keyexpr",{"_index":597,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["kick",{"_index":1159,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{}},"title":{}}],["know",{"_index":1296,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["knowledg",{"_index":694,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["known",{"_index":1093,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/validation/":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["labori",{"_index":1801,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["lambada",{"_index":1056,"text":{"advanced/ruleEngine/":{}},"title":{}}],["lambda",{"_index":28,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/expressionDocs/":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/sampleDocsValidation/#warnings-summary":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rules":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#callfun":{},"sqlfunctions/#resultswith":{}},"title":{"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/sampleDocsOutput/#lambda-test":{},"advanced/sampleDocsOutput/#lambda-testcaller2":{},"advanced/sampleDocsOutput/#lambda-testcaller3":{},"advanced/sampleDocsOutput/#lambdas":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}}}],["lambda'",{"_index":1268,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["lambdacompilationhandl",{"_index":1362,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["lambdadf",{"_index":1750,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["lambdafunct",{"_index":151,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{}},"title":{}}],["lambdarowperftest",{"_index":1381,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["larg",{"_index":731,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["larger",{"_index":875,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/rowIdFunctions/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["last",{"_index":588,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["late",{"_index":105,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["later",{"_index":1338,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["latest",{"_index":1771,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["latter",{"_index":1489,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["law",{"_index":734,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["layout",{"_index":995,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["lazi",{"_index":889,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["lazili",{"_index":52,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}},"title":{}}],["lead",{"_index":643,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{}},"title":{}}],["leav",{"_index":985,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["left",{"_index":687,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/expressionDocs/":{},"advanced/userFunctions/":{}},"title":{}}],["left_high",{"_index":1837,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["leftprefix_bas",{"_index":306,"text":{"sqlfunctions/":{},"sqlfunctions/#idequal":{}},"title":{}}],["leftprefix_high",{"_index":323,"text":{"sqlfunctions/":{},"sqlfunctions/#longpairequal":{}},"title":{}}],["leftprefix_low",{"_index":321,"text":{"sqlfunctions/":{},"sqlfunctions/#longpairequal":{}},"title":{}}],["len",{"_index":512,"text":{"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["length",{"_index":252,"text":{"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"sqlfunctions/":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zahashwithstruct":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}}}],["less",{"_index":527,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{}},"title":{}}],["let",{"_index":580,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["level",{"_index":199,"text":{"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#why-quality":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"model/":{},"model/#rules":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["leverag",{"_index":567,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/prng/":{}},"title":{}}],["librari",{"_index":562,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/userFunctions/":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#why-quality":{},"getting_started/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{"getting_started/#building-the-library":{}}}],["limit",{"_index":770,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/prng/":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["line",{"_index":822,"text":{"advanced/expressionDocs/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["link",{"_index":863,"text":{"advanced/expressionDocs/":{}},"title":{}}],["list",{"_index":947,"text":{"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["load",{"_index":805,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{}},"title":{}}],["local",{"_index":1588,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/#running-the-tests":{}},"title":{}}],["locat",{"_index":389,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["lock",{"_index":973,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["logic",{"_index":674,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["long",{"_index":140,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#inc":{},"sqlfunctions/#longpair":{},"sqlfunctions/#longpairfromuuid":{},"sqlfunctions/#meanf":{},"sqlfunctions/#packints":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#providedid":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{},"sqlfunctions/#rnguuid":{},"sqlfunctions/#saferlongpair":{},"sqlfunctions/#unpack":{},"sqlfunctions/#unpackidtriple":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["longarraybasedexpress",{"_index":948,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["longer",{"_index":719,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["longpair",{"_index":316,"text":{"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{}},"title":{"sqlfunctions/#longpair":{}}}],["longpair(low",{"_index":317,"text":{"sqlfunctions/":{},"sqlfunctions/#longpair":{}},"title":{}}],["longpairequ",{"_index":319,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#longpairequal":{}}}],["longpairequal(leftprefix",{"_index":320,"text":{"sqlfunctions/":{},"sqlfunctions/#longpairequal":{}},"title":{}}],["longpairfromuuid",{"_index":325,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#longpairfromuuid":{}}}],["longpairfromuuid(expr",{"_index":326,"text":{"sqlfunctions/":{},"sqlfunctions/#longpairfromuuid":{}},"title":{}}],["longtyp",{"_index":434,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#sumwith":{}},"title":{}}],["look",{"_index":901,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/about/":{},"background/about/#why-quality":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["lookup",{"_index":63,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#maplookup":{}},"title":{"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{},"advanced/mapFunctions/#building-the-lookup-maps":{}}}],["loos",{"_index":1547,"text":{"background/storage_method/":{},"background/storage_method/#expression-created-structures":{}},"title":{}}],["lot",{"_index":1050,"text":{"advanced/ruleEngine/":{}},"title":{}}],["low",{"_index":1134,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#why-quality":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"background/storage_method/#udf-created-structures":{}},"title":{}}],["lower",{"_index":318,"text":{"advanced/rowIdFunctions/":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"sqlfunctions/":{},"sqlfunctions/#longpair":{},"sqlfunctions/#longpairfromuuid":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#rng":{},"sqlfunctions/#rnguuid":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["lowest",{"_index":1054,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["lt",{"_index":1693,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}}}],["mac",{"_index":122,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["machin",{"_index":979,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["made",{"_index":932,"text":{"advanced/rowIdFunctions/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["main",{"_index":1676,"text":{"getting_started/flavours/":{}},"title":{}}],["maintain",{"_index":743,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["make",{"_index":516,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["manag",{"_index":924,"text":{"advanced/prng/":{},"advanced/ruleEngineWorkflow/":{},"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}}}],["mani",{"_index":962,"text":{"advanced/rowIdFunctions/":{},"advanced/ruleFolder/":{},"background/changelog/":{},"background/changelog/#001-snapshot-5th-march-2023":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["manipul",{"_index":1349,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["manual",{"_index":1428,"text":{"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["map",{"_index":89,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/mapFunctions/#map-functions":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#mapcontains":{},"sqlfunctions/#maplookup":{}},"title":{"advanced/blooms/#what-are-bloom-maps":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{}}}],["map<str",{"_index":435,"text":{"sqlfunctions/":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#sumwith":{}},"title":{}}],["mapcontain",{"_index":329,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#mapcontains":{}}}],["mapcontains('map",{"_index":908,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{}},"title":{}}],["mapcontains(expr",{"_index":330,"text":{"sqlfunctions/":{},"sqlfunctions/#mapcontains":{}},"title":{}}],["mapcountexpr",{"_index":605,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["mapcreat",{"_index":876,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["mapid",{"_index":331,"text":{"sqlfunctions/":{},"sqlfunctions/#mapcontains":{},"sqlfunctions/#maplookup":{}},"title":{}}],["maplookup",{"_index":332,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#maplookup":{}}}],["maplookup('countrycod",{"_index":906,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{}},"title":{}}],["maplookup('map",{"_index":900,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{}},"title":{}}],["maplookup(expr",{"_index":333,"text":{"sqlfunctions/":{},"sqlfunctions/#maplookup":{}},"title":{}}],["maplookupsfromdf",{"_index":878,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["mapmerg",{"_index":679,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["mapsumexpr",{"_index":612,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["maptransform",{"_index":680,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["mapwith",{"_index":596,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}},"title":{}}],["mapwith(d",{"_index":603,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["march",{"_index":1477,"text":{"background/changelog/":{}},"title":{"background/changelog/#001-snapshot-5th-march-2023":{}}}],["markdown",{"_index":828,"text":{"advanced/expressionDocs/":{}},"title":{}}],["marshal",{"_index":1822,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["mass",{"_index":1462,"text":{"background/about/":{},"background/about/#resulting-solution-space":{}},"title":{}}],["massiv",{"_index":74,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["match",{"_index":159,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#idequal":{},"sqlfunctions/#longpairequal":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["match/trigg",{"_index":1164,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{}},"title":{}}],["maven",{"_index":1560,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-the-library":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/#running-the-tests":{}},"title":{}}],["max",{"_index":742,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["maximum",{"_index":737,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["md",{"_index":848,"text":{"advanced/expressionDocs/":{}},"title":{}}],["md5",{"_index":276,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{}}}],["mean",{"_index":336,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"sqlfunctions/":{},"sqlfunctions/#meanf":{}},"title":{}}],["meanf",{"_index":335,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"sqlfunctions/":{},"sqlfunctions/#meanf":{}},"title":{"sqlfunctions/#meanf":{}}}],["measur",{"_index":1501,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["memori",{"_index":67,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["mention",{"_index":626,"text":{"advanced/aggregations/":{}},"title":{"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}}}],["merg",{"_index":658,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{}},"title":{"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{}}}],["mesh",{"_index":1432,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#why-quality":{},"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{}},"title":{}}],["messag",{"_index":406,"text":{"sqlfunctions/":{},"sqlfunctions/#printexpr":{}},"title":{}}],["messagedigest",{"_index":232,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#fieldbasedid":{}},"title":{}}],["meta",{"_index":1800,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{"model/meta/":{},"model/meta/#meta-rulesets":{}}}],["metaruledf",{"_index":1804,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["metaruleset",{"_index":1802,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["method",{"_index":897,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{"background/evaluation_method/":{},"background/storage_method/":{}}}],["metro",{"_index":546,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["mightcontain",{"_index":698,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["mike",{"_index":866,"text":{"advanced/expressionDocs/":{}},"title":{}}],["million",{"_index":181,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{}},"title":{}}],["minim",{"_index":1533,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["minut",{"_index":1739,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["miss",{"_index":210,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#hashwith":{}},"title":{}}],["missingattributesarereplacedr",{"_index":221,"text":{"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{}}],["missingoutputexpress",{"_index":1783,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["mistak",{"_index":1179,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["mix",{"_index":1272,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["mm",{"_index":990,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["mode",{"_index":1047,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["model",{"_index":986,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/validation/":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"model/storage/":{}},"title":{"background/storage_method/#structure-model-storage-costs":{},"model/":{},"model/storage/":{},"model/storage/#storage-model":{}}}],["modifi",{"_index":1786,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["monoid",{"_index":657,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{}}}],["more",{"_index":310,"text":{"advanced/expressionDocs/":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"sqlfunctions/":{},"sqlfunctions/#idequal":{},"sqlfunctions/#rngid":{}},"title":{}}],["move",{"_index":617,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["ms",{"_index":491,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["msg",{"_index":360,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["much",{"_index":1137,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["multi",{"_index":531,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["multipl",{"_index":161,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#probabilityin":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["multvalcci",{"_index":1241,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["multvalccy(thevalu",{"_index":1266,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["multvalccy(valu",{"_index":1247,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["murmer3",{"_index":341,"text":{"sqlfunctions/":{},"sqlfunctions/#murmur3id":{}},"title":{}}],["murmur3",{"_index":949,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["murmur3_128",{"_index":279,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwithstruct":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["murmur3_32",{"_index":278,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["murmur3_64",{"_index":542,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["murmur3id",{"_index":338,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#murmur3id":{}}}],["murmur3id('prefix",{"_index":339,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#murmur3id":{}},"title":{}}],["mvn",{"_index":1562,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["myidfield",{"_index":943,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["myinc",{"_index":1307,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["myretsum",{"_index":1308,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["naiv",{"_index":1556,"text":{"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{}},"title":{}}],["name",{"_index":243,"text":{"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/rowIdFunctions/":{},"advanced/ruleFolder/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#updatefield":{}},"title":{}}],["named_struct('left_low",{"_index":1836,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["namedlambdavari",{"_index":1346,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["namedlambdavariablecodegen",{"_index":1359,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["namedstruct",{"_index":1709,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["natur",{"_index":1336,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["nb",{"_index":958,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["ndf",{"_index":1245,"text":{"advanced/userFunctions/":{}},"title":{}}],["necessari",{"_index":1094,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["necessarili",{"_index":1253,"text":{"advanced/userFunctions/":{}},"title":{}}],["need",{"_index":662,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#how-did-rules-and-folder-come-about":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/#running-the-tests":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{"advanced/ruleEngine/#why-is-this-needed":{}}}],["nest",{"_index":664,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/about/":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#udf-created-structures":{},"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["network",{"_index":980,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["new",{"_index":853,"text":{"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rules":{}},"title":{}}],["newcalc",{"_index":1246,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["newlin",{"_index":827,"text":{"advanced/expressionDocs/":{}},"title":{}}],["newrulesuitemap",{"_index":1811,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["next",{"_index":729,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/ruleFolder/":{},"background/about/":{},"background/about/#resulting-solution-space":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["no_rewrit",{"_index":649,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["node",{"_index":372,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["nodepattern",{"_index":1699,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["non",{"_index":385,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#warnings-summary":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#probability":{}},"title":{}}],["nondeterminist",{"_index":1659,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["none",{"_index":1409,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["nonexistentfielda",{"_index":1223,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#id-16-1":{}},"title":{}}],["nonexistentfieldb",{"_index":1224,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#id-16-1":{}},"title":{}}],["nonexistentfunct",{"_index":1222,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#id-16-1":{}},"title":{}}],["nonlambdadocparamet",{"_index":1234,"text":{"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#warnings-summary":{}},"title":{}}],["normal",{"_index":85,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["note",{"_index":274,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["notebook",{"_index":409,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#printexpr":{}},"title":{"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}}}],["notic",{"_index":1386,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["notion",{"_index":1458,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["now",{"_index":1088,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["npe",{"_index":1204,"text":{"advanced/ruleFolder/":{}},"title":{}}],["null",{"_index":149,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#maplookup":{}},"title":{}}],["nullabl",{"_index":131,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["number",{"_index":177,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#resultswith":{}},"title":{}}],["numer",{"_index":685,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["numrow",{"_index":780,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["object",{"_index":378,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["obvious",{"_index":1524,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["occur",{"_index":1206,"text":{"advanced/ruleFolder/":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{}},"title":{}}],["odd",{"_index":572,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{}},"title":{}}],["offer",{"_index":1434,"text":{"background/about/":{},"background/about/#why-quality":{}},"title":{"background/about/#gaps-in-existing-spark-offerings":{}}}],["offici",{"_index":1772,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["ok",{"_index":1741,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["old",{"_index":893,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["on",{"_index":264,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"sqlfunctions/":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["onc",{"_index":40,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/ruleFolder/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["oop",{"_index":1774,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["opaqu",{"_index":936,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["open",{"_index":289,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["opensourc",{"_index":1702,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["oper",{"_index":590,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["optimis",{"_index":1095,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}}}],["optims",{"_index":1441,"text":{"background/about/":{},"background/about/#why-quality":{}},"title":{}}],["option",{"_index":405,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/expressionDocs/":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#why-quality":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#printexpr":{}},"title":{}}],["option[datatyp",{"_index":677,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{}},"title":{}}],["or'd",{"_index":714,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["orang",{"_index":1385,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#udf-created-structures":{}},"title":{}}],["order",{"_index":46,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#resulting-solution-space":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{"advanced/userFunctions/#higher-order-functions":{}}}],["orels",{"_index":673,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{}},"title":{}}],["org.apache.spark.sql.qualityfunctions.docodegenfallbackhandl",{"_index":1374,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["organis",{"_index":1791,"text":{"model/":{},"model/#rules":{}},"title":{}}],["orig",{"_index":778,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["origin",{"_index":424,"text":{"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["origingalresulttyp",{"_index":1082,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{}},"title":{}}],["oss",{"_index":1144,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/changelog/":{},"background/changelog/#001-snapshot-5th-march-2023":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["other",{"_index":556,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["other_account1",{"_index":1034,"text":{"advanced/ruleEngine/":{}},"title":{}}],["othernam",{"_index":825,"text":{"advanced/expressionDocs/":{}},"title":{}}],["othersourcedf",{"_index":766,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{}},"title":{}}],["otherwis",{"_index":1364,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["out",{"_index":380,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/running_on_databricks/":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}}}],["outdf",{"_index":1042,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{}},"title":{}}],["outervariable1",{"_index":1226,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{}},"title":{}}],["output",{"_index":265,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"model/":{},"model/#rules":{},"sqlfunctions/":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rules":{}}}],["outputdf",{"_index":1779,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["outputexpress",{"_index":1070,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["outputid",{"_index":1028,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{}},"title":{}}],["outputvers",{"_index":1029,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{}},"title":{}}],["over",{"_index":104,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"model/":{},"model/#rule-results":{},"sqlfunctions/":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["overal",{"_index":465,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["overalap",{"_index":925,"text":{"advanced/prng/":{}},"title":{}}],["overallresult",{"_index":463,"text":{"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["overflow",{"_index":489,"text":{"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["overhead",{"_index":1155,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{}},"title":{}}],["overload",{"_index":1420,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["overrid",{"_index":1797,"text":{"model/":{},"model/#rule-results":{}},"title":{}}],["overview",{"_index":1162,"text":{"advanced/ruleEngineWorkflow/":{}},"title":{"advanced/ruleEngineWorkflow/#overview-and-terms":{}}}],["overwrit",{"_index":375,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["overwritten",{"_index":682,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["owldq",{"_index":1444,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["p",{"_index":1567,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["pack",{"_index":494,"text":{"advanced/ruleEngine/":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#unpack":{},"sqlfunctions/#unpackidtriple":{}},"title":{}}],["packag",{"_index":346,"text":{"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-spark-stats-package":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#packints":{}},"title":{"advanced/blooms/#using-the-spark-stats-package":{}}}],["packint",{"_index":344,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#packints":{}}}],["packints(low",{"_index":345,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"sqlfunctions/":{},"sqlfunctions/#packints":{}},"title":{}}],["pair",{"_index":353,"text":{"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#rng":{}},"title":{}}],["papplyt",{"_index":1316,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["papplyt(plus(_",{"_index":1319,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["param",{"_index":438,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/expressionDocs/":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"sqlfunctions/":{},"sqlfunctions/#returnsum":{}},"title":{}}],["param'",{"_index":832,"text":{"advanced/expressionDocs/":{}},"title":{}}],["param1",{"_index":193,"text":{"advanced/userFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{}}],["param2",{"_index":194,"text":{"advanced/userFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{}}],["paramat",{"_index":1813,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["paramet",{"_index":156,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/sampleDocsValidation/#warnings-summary":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/validation/":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/key_functions/":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#aggexpr":{}},"title":{"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}}}],["paramn",{"_index":195,"text":{"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{}}],["parit",{"_index":913,"text":{"advanced/prng/":{}},"title":{}}],["parquet",{"_index":795,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["parquet'",{"_index":748,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["pars",{"_index":666,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{}},"title":{}}],["parser",{"_index":1263,"text":{"advanced/userFunctions/":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{}},"title":{}}],["parsetyp",{"_index":670,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{}},"title":{}}],["part",{"_index":1251,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["partial",{"_index":48,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#callfun":{}},"title":{}}],["particularli",{"_index":815,"text":{"advanced/expressionDocs/":{}},"title":{}}],["partit",{"_index":366,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["pass",{"_index":47,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/key_functions/#expressions-with-constants":{},"model/":{},"model/#rule-results":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#passed":{}},"title":{"sqlfunctions/#passed":{}}}],["passedint",{"_index":1826,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["passedint).toint",{"_index":1830,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["path",{"_index":514,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleFolder/":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["path_where_test_files_should_be_gener",{"_index":1734,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["pattern",{"_index":1343,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{}},"title":{}}],["payload",{"_index":933,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["peform",{"_index":1439,"text":{"background/about/":{},"background/about/#why-quality":{}},"title":{}}],["per",{"_index":300,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#printcode":{}},"title":{}}],["percent",{"_index":1795,"text":{"model/":{},"model/#rule-results":{}},"title":{}}],["percentag",{"_index":1829,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["perform",{"_index":200,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{"background/evaluation_method/#catalyst-expression-performance":{}}}],["perhap",{"_index":1325,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["persist",{"_index":1019,"text":{"advanced/ruleEngine/":{}},"title":{}}],["perspect",{"_index":941,"text":{"advanced/rowIdFunctions/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{}},"title":{}}],["phase",{"_index":1249,"text":{"advanced/userFunctions/":{}},"title":{}}],["philisoph",{"_index":557,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["piec",{"_index":1274,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["pipelin",{"_index":1586,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["place",{"_index":133,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/expressionDocs/":{},"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["placehold",{"_index":132,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#printcode":{}},"title":{}}],["plan",{"_index":641,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["platform",{"_index":1435,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#why-quality":{},"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{}},"title":{}}],["play",{"_index":1290,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["pleas",{"_index":1427,"text":{"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{}},"title":{}}],["plu",{"_index":124,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["plug",{"_index":928,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{}},"title":{}}],["plugabl",{"_index":112,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["plus(a",{"_index":1329,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["plus(plus(a",{"_index":1315,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["plus2",{"_index":1314,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["plus3",{"_index":1279,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["point",{"_index":831,"text":{"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["pom",{"_index":1430,"text":{"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["port",{"_index":1697,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["posit",{"_index":697,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["possibl",{"_index":707,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"model/":{},"model/#rules":{}},"title":{}}],["pre",{"_index":613,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}}}],["precis",{"_index":43,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/prng/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["predic",{"_index":954,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["predicat",{"_index":60,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}},"title":{}}],["prefer",{"_index":472,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"sqlfunctions/":{},"sqlfunctions/#saferlongpair":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["prefix",{"_index":253,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#idequal":{},"sqlfunctions/#longpairequal":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#providedid":{},"sqlfunctions/#rngid":{},"sqlfunctions/#uniqueid":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["prefixedtolongpair",{"_index":350,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#prefixedtolongpair":{}}}],["prefixedtolongpair('prefix",{"_index":351,"text":{"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{}},"title":{}}],["prepar",{"_index":1106,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["present",{"_index":423,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#warnings-summary":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["previou",{"_index":647,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["primit",{"_index":551,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["print",{"_index":361,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["printcod",{"_index":359,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{"sqlfunctions/#printcode":{}}}],["printexpr",{"_index":402,"text":{"sqlfunctions/":{},"sqlfunctions/#printexpr":{}},"title":{"sqlfunctions/#printexpr":{}}}],["prior",{"_index":615,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}},"title":{}}],["prng",{"_index":909,"text":{"advanced/prng/":{}},"title":{"advanced/prng/":{}}}],["prng'",{"_index":108,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["probabalist",{"_index":696,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["probability(expr",{"_index":411,"text":{"sqlfunctions/":{},"sqlfunctions/#probability":{}},"title":{}}],["probability(percentag",{"_index":1828,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["probability(result",{"_index":1816,"text":{"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["probability(x",{"_index":1688,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["probabilityin",{"_index":416,"text":{"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#what-are-bloom-maps":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#probabilityin":{}}}],["probabilityin(a",{"_index":769,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{}},"title":{}}],["probabilityin(expr",{"_index":417,"text":{"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["probabilityinid",{"_index":768,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{}},"title":{}}],["probabl",{"_index":185,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"model/":{},"model/#rule-results":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#probability":{},"sqlfunctions/#probabilityin":{}},"title":{"sqlfunctions/#probability":{}}}],["problem",{"_index":1203,"text":{"advanced/ruleFolder/":{}},"title":{}}],["process",{"_index":160,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-1002-1":{},"advanced/sampleDocsValidation/#id-16-1":{},"advanced/sampleDocsValidation/#id-2-1":{},"advanced/sampleDocsValidation/#id-6-1":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#sumwith":{},"sqlfunctions/#updatefield":{}},"title":{}}],["processifattributemiss",{"_index":216,"text":{"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{}}],["produc",{"_index":917,"text":{"advanced/prng/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["product",{"_index":604,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["profil",{"_index":1576,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-via-commandline":{},"getting_started/#running-the-tests":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["program",{"_index":513,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["project",{"_index":1210,"text":{"advanced/ruleFolder/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["prone",{"_index":619,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}},"title":{}}],["properli",{"_index":381,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["properti",{"_index":752,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["provid",{"_index":103,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rules":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#prefixedtolongpair":{}},"title":{}}],["providedid",{"_index":427,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#providedid":{}}}],["providedid('prefix",{"_index":428,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#providedid":{}},"title":{}}],["prune",{"_index":957,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["psuedorandom",{"_index":916,"text":{"advanced/prng/":{}},"title":{}}],["pull",{"_index":1048,"text":{"advanced/ruleEngine/":{}},"title":{}}],["push",{"_index":955,"text":{"advanced/rowIdFunctions/":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["pushdown",{"_index":1016,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["put",{"_index":837,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["puzzl",{"_index":1275,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["qualifi",{"_index":1373,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["qualiti",{"_index":1,"text":{"":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/prng/":{},"advanced/ruleEngine/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#resulting-solution-space":{},"background/about/#why-quality":{},"background/changelog/":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#flattenresults":{},"sqlfunctions/#flattenruleresults":{}},"title":{"#quality-001-snapshot":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/about/#why-quality":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}}}],["quality'",{"_index":873,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{}},"title":{}}],["quality.lambdahandl",{"_index":1371,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["quality_",{"_index":1582,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["quality_${qualitydatabricksprefix}${sparkshortversion}_${scalacompatvers",{"_index":1630,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["quality_${qualityruntime}${sparkshortversion}_${scalacompatvers",{"_index":1609,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["quality_${qualitytestprefix}${sparkshortversion}_${scalacompatvers",{"_index":1629,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["quality_3.3.0.oss_3.3_2.12",{"_index":1602,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["quality_runtime_sparkcompatversion_scalacompatvers",{"_index":1600,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["quality_testshad",{"_index":1705,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["quality_testshade_",{"_index":1581,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["qualitycas",{"_index":1472,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["qualitydata",{"_index":1681,"text":{"getting_started/flavours/":{}},"title":{"getting_started/flavours/#quality-qualitydata-rulerunner":{}}}],["qualitydatabricksprefix",{"_index":1628,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["qualityfold",{"_index":1184,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{"advanced/ruleFolder/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}}}],["qualitynam",{"_index":1410,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["qualityrul",{"_index":1025,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}}}],["qualityruntim",{"_index":1612,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["qualitytest",{"_index":1731,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["qualitytestprefix",{"_index":1627,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["qualityurlgoesher",{"_index":850,"text":{"advanced/expressionDocs/":{}},"title":{}}],["qualityvers",{"_index":1610,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["queri",{"_index":1494,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["quickli",{"_index":723,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["quit",{"_index":1337,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["rais",{"_index":1469,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["ram",{"_index":1519,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["ran",{"_index":1470,"text":{"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["rand",{"_index":910,"text":{"advanced/prng/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["random",{"_index":441,"text":{"advanced/rowIdFunctions/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"sqlfunctions/":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{}},"title":{}}],["randomsourc",{"_index":110,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"sqlfunctions/":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{}},"title":{}}],["rang",{"_index":571,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["rate",{"_index":886,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["re",{"_index":24,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["read",{"_index":1062,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}}}],["readlambdasfromdf",{"_index":1759,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["readmetarulesetsfromdf",{"_index":1803,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["readoutputexpressionsfromdf",{"_index":1071,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{}},"title":{}}],["readrulesfromdf",{"_index":1064,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["readvers",{"_index":1785,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["readversionedlambdasfromdf",{"_index":1777,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["readversionedoutputexpressionsfromdf",{"_index":1778,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["readversionedrulesfromdf",{"_index":1776,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["realli",{"_index":1133,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{}},"title":{}}],["reason",{"_index":1021,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{}}}],["recent",{"_index":1207,"text":{"advanced/ruleFolder/":{},"advanced/userFunctions/":{}},"title":{}}],["recod",{"_index":1457,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["recommend",{"_index":1553,"text":{"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["recurs",{"_index":686,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/validation/":{}},"title":{}}],["recursivelambdassoeisok",{"_index":1411,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["red",{"_index":1549,"text":{"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["redirect",{"_index":382,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["reduc",{"_index":549,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"sqlfunctions/":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["refer",{"_index":100,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["regist",{"_index":669,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/userFunctions/":{},"advanced/validation/":{}},"title":{}}],["registerbloommapandfunct",{"_index":758,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{}},"title":{}}],["registerfunct",{"_index":683,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["registerlambdafunct",{"_index":1243,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["registermap",{"_index":890,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["registermaplookupsandfunct",{"_index":887,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["registerqualityfunct",{"_index":377,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["rel",{"_index":846,"text":{"advanced/expressionDocs/":{}},"title":{}}],["relat",{"_index":1138,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["relativepath",{"_index":859,"text":{"advanced/expressionDocs/":{}},"title":{}}],["relativewarningsanderror",{"_index":845,"text":{"advanced/expressionDocs/":{}},"title":{}}],["releas",{"_index":1552,"text":{"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["relev",{"_index":536,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["reli",{"_index":665,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{}},"title":{}}],["remedi",{"_index":1426,"text":{"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{}},"title":{}}],["remov",{"_index":1096,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["renam",{"_index":1755,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["render",{"_index":829,"text":{"advanced/expressionDocs/":{}},"title":{}}],["repeat",{"_index":894,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["repeatedli",{"_index":474,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"sqlfunctions/":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["replac",{"_index":509,"text":{"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["replacewith",{"_index":207,"text":{"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#updatefield":{}},"title":{}}],["replacewithn",{"_index":508,"text":{"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["report",{"_index":1669,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}},"title":{}}],["repres",{"_index":720,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleEngine/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-with-constants":{}},"title":{}}],["reproduc",{"_index":874,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{}},"title":{}}],["requir",{"_index":69,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{},"advanced/rowIdFunctions/":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#resulting-solution-space":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{"getting_started/#24-support-requires-246-or-janino-3016":{}}}],["rer",{"_index":1038,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["reread",{"_index":1782,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["rereadlambda",{"_index":1758,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["rereadrulesuit",{"_index":1760,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["rereadwithlambda",{"_index":1780,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["rereadwithoutlambda",{"_index":1757,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["reseed",{"_index":912,"text":{"advanced/prng/":{}},"title":{}}],["reserv",{"_index":997,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["reset",{"_index":1013,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["resolut",{"_index":1403,"text":{"advanced/validation/":{}},"title":{}}],["resolv",{"_index":152,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#hashwith":{}},"title":{}}],["resolvealtertablecommand",{"_index":1717,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["resolvecreatenamedstruct",{"_index":1708,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["resolvehigherorderfunct",{"_index":1718,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["resolvet",{"_index":1716,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["resolvetablevaluedfunct",{"_index":1707,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["resolvewith",{"_index":1091,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/#resolvewith":{}}}],["respons",{"_index":1055,"text":{"advanced/ruleEngine/":{}},"title":{}}],["rest",{"_index":1009,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["restart",{"_index":1597,"text":{"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["result",{"_index":57,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#structure-model-storage-costs":{},"background/storage_method/#udf-created-structures":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"model/":{},"model/#rule-results":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#disabledrule":{},"sqlfunctions/#failed":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#flattenresults":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#meanf":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#packints":{},"sqlfunctions/#probability":{},"sqlfunctions/#providedid":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#rngid":{},"sqlfunctions/#rulesuiteresultdetails":{},"sqlfunctions/#softfailed":{},"sqlfunctions/#uniqueid":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{"background/about/#resulting-solution-space":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"model/#rule-results":{}}}],["resultswith",{"_index":431,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"sqlfunctions/":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#returnsum":{}},"title":{"sqlfunctions/#resultswith":{}}}],["retain",{"_index":77,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["retlambda",{"_index":1328,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["retriev",{"_index":1831,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["return",{"_index":50,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"model/":{},"model/#rule-results":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{},"sqlfunctions/#disabledrule":{},"sqlfunctions/#failed":{},"sqlfunctions/#mapcontains":{},"sqlfunctions/#maplookup":{},"sqlfunctions/#passed":{},"sqlfunctions/#probability":{},"sqlfunctions/#probabilityin":{},"sqlfunctions/#returnsum":{},"sqlfunctions/#saferlongpair":{},"sqlfunctions/#softfail":{},"sqlfunctions/#softfailed":{}},"title":{}}],["returnsum",{"_index":436,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"sqlfunctions/":{},"sqlfunctions/#returnsum":{}},"title":{"sqlfunctions/#returnsum":{}}}],["returnwith",{"_index":616,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}},"title":{}}],["revert",{"_index":1357,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["review",{"_index":1491,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["right",{"_index":629,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/userFunctions/":{}},"title":{}}],["right_prefix",{"_index":953,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["rightprefix",{"_index":304,"text":{"sqlfunctions/":{},"sqlfunctions/#idequal":{},"sqlfunctions/#longpairequal":{}},"title":{}}],["rightprefix_bas",{"_index":307,"text":{"sqlfunctions/":{},"sqlfunctions/#idequal":{}},"title":{}}],["rightprefix_high",{"_index":324,"text":{"sqlfunctions/":{},"sqlfunctions/#longpairequal":{}},"title":{}}],["rightprefix_low",{"_index":322,"text":{"sqlfunctions/":{},"sqlfunctions/#longpairequal":{}},"title":{}}],["rng",{"_index":440,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"sqlfunctions/":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{},"sqlfunctions/#saferlongpair":{}},"title":{"advanced/prng/#rng-expressions":{},"sqlfunctions/#rng":{}}}],["rng'",{"_index":929,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{}},"title":{}}],["rng('algorithm",{"_index":444,"text":{"sqlfunctions/":{},"sqlfunctions/#rng":{}},"title":{}}],["rngbyte",{"_index":448,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"sqlfunctions/":{},"sqlfunctions/#rngbytes":{}},"title":{"sqlfunctions/#rngbytes":{}}}],["rngbytes('algorithm",{"_index":449,"text":{"sqlfunctions/":{},"sqlfunctions/#rngbytes":{}},"title":{}}],["rngid",{"_index":453,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#rngid":{}}}],["rngid('prefix",{"_index":454,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#rngid":{}},"title":{}}],["rnguuid",{"_index":358,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{}},"title":{"sqlfunctions/#rnguuid":{}}}],["rnguuid(expr",{"_index":457,"text":{"sqlfunctions/":{},"sqlfunctions/#rnguuid":{}},"title":{}}],["root",{"_index":812,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["routabl",{"_index":975,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["row",{"_index":56,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#resulting-solution-space":{},"background/about/#why-quality":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#sumwith":{}},"title":{"advanced/rowIdFunctions/":{}}}],["rowid",{"_index":776,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["rs",{"_index":222,"text":{"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{}}],["rsid",{"_index":1644,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["rule",{"_index":13,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/validation/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/about/#why-quality":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#structure-model-storage-costs":{},"background/storage_method/#udf-created-structures":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/key_functions/#expressions-with-constants":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"model/#rules":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#disabledrule":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#probability":{},"sqlfunctions/#softfail":{},"sqlfunctions/#unpack":{},"sqlfunctions/#unpackidtriple":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rules":{},"advanced/sampleDocsOutput/#rule-id-16-1-3-errors":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"getting_started/key_functions/":{},"getting_started/key_functions/#key-sql-functions-to-use-in-your-rules":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"model/#rules":{}}}],["rule1",{"_index":1265,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["rule2",{"_index":1267,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["ruledf",{"_index":1752,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["ruleengin",{"_index":1061,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{}},"title":{}}],["ruleengineid",{"_index":1068,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["ruleenginerunn",{"_index":1022,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/flavours/":{},"model/":{},"model/#rule-results":{},"model/#rules":{}},"title":{"getting_started/flavours/#qualityrules-ruleenginerunner":{}}}],["ruleenginerunner/rulerunn",{"_index":219,"text":{"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{}}],["ruleenginesali",{"_index":1067,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["ruleenginevers",{"_index":1069,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["ruleerror",{"_index":1400,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["ruleexpr",{"_index":1066,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["rulefolderresult",{"_index":1186,"text":{"advanced/ruleFolder/":{}},"title":{}}],["rulefolderrunn",{"_index":1185,"text":{"advanced/ruleFolder/":{},"getting_started/flavours/":{}},"title":{"getting_started/flavours/#qualityfolder-rulefolderrunner":{}}}],["rulefolderrunner(rulesuit",{"_index":1209,"text":{"advanced/ruleFolder/":{}},"title":{}}],["ruleid",{"_index":500,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#unpackidtriple":{}},"title":{}}],["rulelogicutil",{"_index":1030,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{}},"title":{}}],["rulemap",{"_index":1074,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{}},"title":{}}],["rulenameerror",{"_index":1232,"text":{"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#id-16-1":{}},"title":{}}],["ruleresult",{"_index":1018,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}}}],["ruleresult'",{"_index":1078,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{}},"title":{}}],["ruleresultprocessor",{"_index":1026,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{}},"title":{}}],["ruleresultwithprocessor",{"_index":1799,"text":{"model/":{},"model/#rule-results":{}},"title":{}}],["rulerunn",{"_index":1417,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/flavours/":{}},"title":{"getting_started/flavours/#quality-qualitydata-rulerunner":{}}}],["rulesdf",{"_index":1065,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{}},"title":{}}],["ruleset",{"_index":1037,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"advanced/sampleDocsOutput/":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"model/#rules":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#storage-model":{}},"title":{"advanced/sampleDocsOutput/#ruleset-id-1-1":{},"model/meta/":{},"model/meta/#meta-rulesets":{}}}],["rulesetid",{"_index":499,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#unpackidtriple":{}},"title":{}}],["rulesetresult",{"_index":1819,"text":{"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["rulesetvers",{"_index":502,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#unpackidtriple":{}},"title":{}}],["rulesuit",{"_index":842,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsValidation/":{},"advanced/userFunctions/":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"model/#rules":{}},"title":{"advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings":{},"advanced/sampleDocsValidation/#errors-identified-for-rulesuite-id-0-1":{},"advanced/sampleDocsValidation/#warnings-identified-for-rulesuite-id-0-1":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}}}],["rulesuite.withprobablepass",{"_index":1798,"text":{"model/":{},"model/#rule-results":{}},"title":{}}],["rulesuitedoc",{"_index":844,"text":{"advanced/expressionDocs/":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["rulesuiteid",{"_index":498,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#unpackidtriple":{}},"title":{}}],["rulesuitemap",{"_index":1808,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["rulesuiteresult",{"_index":1670,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["rulesuiteresult.overallresult",{"_index":1691,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["rulesuiteresultdetail",{"_index":460,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#rulesuiteresultdetails":{}}}],["rulesuiteresultdetails(dq",{"_index":461,"text":{"sqlfunctions/":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["rulesuitevers",{"_index":501,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#unpackidtriple":{}},"title":{}}],["rulevers",{"_index":503,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#unpackidtriple":{}},"title":{}}],["rulewarn",{"_index":1415,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["run",{"_index":10,"text":{"":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/#running-the-tests":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/#running-the-tests":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}}}],["runner",{"_index":1679,"text":{"getting_started/flavours/":{}},"title":{}}],["runnerfunct",{"_index":1396,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["runonpassprocessor",{"_index":1027,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"model/":{},"model/#rules":{}},"title":{}}],["runtest",{"_index":1735,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["runtim",{"_index":634,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/about/":{},"background/about/#why-quality":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/running_on_databricks/":{}},"title":{"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}}}],["s",{"_index":821,"text":{"advanced/expressionDocs/":{}},"title":{}}],["s\"bigbloom",{"_index":791,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["s\"smallbloom(uuid",{"_index":779,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["safe",{"_index":426,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"sqlfunctions/":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["safer",{"_index":473,"text":{"sqlfunctions/":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["saferlongpair",{"_index":468,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#saferlongpair":{}}}],["saferlongpair(expr",{"_index":471,"text":{"sqlfunctions/":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["salienc",{"_index":1023,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["salientrul",{"_index":263,"text":{"advanced/ruleEngine/":{},"sqlfunctions/":{},"sqlfunctions/#flattenruleresults":{}},"title":{}}],["same",{"_index":715,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["sampl",{"_index":867,"text":{"advanced/expressionDocs/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["sampledocsoutput",{"_index":860,"text":{"advanced/expressionDocs/":{}},"title":{"advanced/sampleDocsOutput/":{}}}],["sampledocsvalid",{"_index":847,"text":{"advanced/expressionDocs/":{}},"title":{"advanced/sampleDocsValidation/":{}}}],["save",{"_index":58,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["sbt",{"_index":1635,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["scala",{"_index":215,"text":{"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-the-library":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{}}],["scalacompatvers",{"_index":1613,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["scaladoc",{"_index":820,"text":{"advanced/expressionDocs/":{}},"title":{}}],["scale",{"_index":21,"text":{"":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}}}],["schema",{"_index":1394,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["schemaorfram",{"_index":1407,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["scheme",{"_index":1765,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["scope",{"_index":1367,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["script",{"_index":1460,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["second",{"_index":1008,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["section",{"_index":659,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"background/about/":{},"background/about/#resulting-solution-space":{}},"title":{}}],["secur",{"_index":951,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["see",{"_index":639,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["seed",{"_index":447,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"sqlfunctions/":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{}},"title":{}}],["seedl",{"_index":446,"text":{"sqlfunctions/":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{}},"title":{}}],["seem",{"_index":966,"text":{"advanced/rowIdFunctions/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{}}}],["seen",{"_index":1299,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["select",{"_index":163,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{}},"title":{}}],["select(expr",{"_index":1208,"text":{"advanced/ruleFolder/":{}},"title":{}}],["selectexpr",{"_index":790,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["separ",{"_index":1690,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["seper",{"_index":1550,"text":{"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["seq",{"_index":1036,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["seq[(int",{"_index":1195,"text":{"advanced/ruleFolder/":{}},"title":{}}],["serial",{"_index":1059,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"background/storage_method/#udf-created-structures":{}},"title":{"advanced/ruleEngine/#serializing":{}}}],["serialis",{"_index":1546,"text":{"background/storage_method/":{},"background/storage_method/#expression-created-structures":{}},"title":{}}],["set",{"_index":101,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{"getting_started/":{}}}],["setpath",{"_index":1733,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["setup",{"_index":982,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["sever",{"_index":80,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["sha",{"_index":280,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["sha256",{"_index":275,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["shade",{"_index":1573,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["share",{"_index":174,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#printcode":{}},"title":{}}],["shouldn't",{"_index":1131,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{}}}],["shouldtransform",{"_index":1366,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["show",{"_index":577,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/validation/":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{}}}],["show'",{"_index":1099,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["shown",{"_index":408,"text":{"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#udf-created-structures":{},"model/":{},"model/#rule-results":{},"sqlfunctions/":{},"sqlfunctions/#printexpr":{}},"title":{}}],["showparam",{"_index":1408,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["shuffl",{"_index":68,"text":{"":{},"#enhanced-spark-functionality":{}},"title":{}}],["signal",{"_index":1793,"text":{"model/":{},"model/#rule-results":{}},"title":{}}],["signatur",{"_index":399,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["signifi",{"_index":245,"text":{"advanced/ruleEngine/":{},"sqlfunctions/":{},"sqlfunctions/#disabledrule":{}},"title":{}}],["signific",{"_index":1107,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["significantli",{"_index":749,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["similar",{"_index":201,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{},"sqlfunctions/#printcode":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["similarli",{"_index":397,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["simpl",{"_index":15,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#meanf":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}}}],["simpler",{"_index":1397,"text":{"advanced/validation/":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["simplevers",{"_index":1766,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["simpli",{"_index":33,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["simplifi",{"_index":36,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["simul",{"_index":1500,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["singl",{"_index":59,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#printcode":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["siphash24",{"_index":286,"text":{"sqlfunctions/":{},"sqlfunctions/#hashwith":{}},"title":{}}],["site",{"_index":1297,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["size",{"_index":480,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"sqlfunctions/":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["size(filter(map_values(ruleset.ruleresult",{"_index":1815,"text":{"model/storage/":{},"model/storage/#storage-model":{}},"title":{}}],["skip",{"_index":1530,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["sla",{"_index":1446,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["slightli",{"_index":970,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{}},"title":{}}],["slow",{"_index":1531,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["slower",{"_index":967,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{}}}],["small",{"_index":99,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["smallbloom",{"_index":477,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#what-are-bloom-maps":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#smallbloom":{}}}],["smallbloom(buildfrom",{"_index":478,"text":{"sqlfunctions/":{},"sqlfunctions/#smallbloom":{}},"title":{}}],["smaller",{"_index":704,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["snapshot",{"_index":3,"text":{"":{},"background/changelog/":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{"#quality-001-snapshot":{},"background/changelog/#001-snapshot-5th-march-2023":{}}}],["snapshot.jar",{"_index":1604,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["snippet",{"_index":1360,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["snowflak",{"_index":939,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["soften",{"_index":1769,"text":{"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["softfail",{"_index":481,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/key_functions/#expressions-with-constants":{},"model/":{},"model/#rule-results":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#softfail":{},"sqlfunctions/#softfailed":{}},"title":{"sqlfunctions/#softfail":{},"sqlfunctions/#softfailed":{}}}],["softfail(ruleexpr",{"_index":482,"text":{"sqlfunctions/":{},"sqlfunctions/#softfail":{}},"title":{}}],["softfailedint",{"_index":1824,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["solut",{"_index":1136,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/about/":{},"background/about/#resulting-solution-space":{}},"title":{"background/about/#resulting-solution-space":{}}}],["solv",{"_index":1421,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["someth",{"_index":143,"text":{"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["sometim",{"_index":1527,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["sourc",{"_index":212,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/":{},"getting_started/#running-the-tests":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#hashwith":{}},"title":{}}],["space",{"_index":977,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"background/about/":{}},"title":{"background/about/#resulting-solution-space":{}}}],["spark",{"_index":19,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#resulting-solution-space":{},"background/about/#why-quality":{},"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/#running-the-tests":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#printcode":{},"sqlfunctions/#smallbloom":{}},"title":{"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/blooms/#using-the-spark-stats-package":{},"background/about/#gaps-in-existing-spark-offerings":{}}}],["spark321",{"_index":1568,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["sparkbloomfilt",{"_index":757,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/blooms/#what-are-bloom-maps":{}},"title":{}}],["sparkcontext",{"_index":763,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["sparkfunctionnameerror",{"_index":1233,"text":{"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#id-16-1":{}},"title":{}}],["sparks/guava",{"_index":753,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{}},"title":{}}],["sparksess",{"_index":570,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["sparksession.sparkcontext.setlocalproperti",{"_index":1370,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["sparksession.sparkcontext.setlocalproperty(\"sparkutils.quality.bloom.root",{"_index":811,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["sparkshortvers",{"_index":1611,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["sparktestutil",{"_index":1732,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["sparkutil",{"_index":794,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/expressionDocs/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["spec",{"_index":1115,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["special",{"_index":678,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["specif",{"_index":398,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#rngbytes":{}},"title":{}}],["specifi",{"_index":334,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"sqlfunctions/":{},"sqlfunctions/#maplookup":{},"sqlfunctions/#probabilityin":{}},"title":{}}],["speed",{"_index":930,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["split",{"_index":1555,"text":{"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["splittabl",{"_index":914,"text":{"advanced/prng/":{}},"title":{}}],["sprinkl",{"_index":1677,"text":{"getting_started/flavours/":{}},"title":{}}],["sql",{"_index":16,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/expressionDocs/":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/about/#resulting-solution-space":{},"background/about/#why-quality":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/key_functions/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"getting_started/key_functions/":{},"getting_started/key_functions/#key-sql-functions-to-use-in-your-rules":{},"sqlfunctions/":{}}}],["sqlcontext",{"_index":760,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{}},"title":{}}],["sqlfunction",{"_index":851,"text":{"advanced/expressionDocs/":{}},"title":{}}],["stabl",{"_index":113,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/rowIdFunctions/":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["stablepositionsfromcolumnnam",{"_index":1810,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["stage",{"_index":1339,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["standard",{"_index":1433,"text":{"background/about/":{},"background/about/#why-quality":{}},"title":{}}],["start",{"_index":998,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{},"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{"background/changelog/#the-quality-exploration-starts-25th-april-2020":{}}}],["starter",{"_index":1190,"text":{"advanced/ruleFolder/":{}},"title":{}}],["startmac",{"_index":1003,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["starttimestamp",{"_index":1007,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["stat",{"_index":740,"text":{"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-spark-stats-package":{}},"title":{"advanced/blooms/#using-the-spark-stats-package":{}}}],["state",{"_index":147,"text":{"sqlfunctions/":{},"sqlfunctions/#_":{}},"title":{}}],["statement",{"_index":6,"text":{"":{},"#quality-001-snapshot":{},"advanced/ruleEngine/":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["statist",{"_index":751,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["stats.packag",{"_index":728,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["stay",{"_index":558,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["std",{"_index":368,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["stdout",{"_index":384,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["step",{"_index":1516,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["still",{"_index":584,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{}},"title":{}}],["stop",{"_index":582,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{}},"title":{}}],["storag",{"_index":705,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"background/about/":{},"background/about/#resulting-solution-space":{},"background/about/#why-quality":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#structure-model-storage-costs":{},"background/storage_method/#udf-created-structures":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{"background/storage_method/":{},"background/storage_method/#structure-model-storage-costs":{},"model/storage/":{},"model/storage/#storage-model":{}}}],["store",{"_index":30,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/storage_method/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{}},"title":{"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{}}}],["str",{"_index":671,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{}},"title":{}}],["straight",{"_index":1277,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["straightforward",{"_index":1486,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["strang",{"_index":625,"text":{"advanced/aggregations/":{}},"title":{"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}}}],["stream",{"_index":18,"text":{"":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{}}}],["string",{"_index":459,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#rnguuid":{}},"title":{}}],["strip",{"_index":462,"text":{"sqlfunctions/":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["strongli",{"_index":1496,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["struct",{"_index":223,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleFolder/":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#updatefield":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["struct(funnycheck",{"_index":885,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["structtyp",{"_index":1399,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["structur",{"_index":241,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleFolder/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#resulting-solution-space":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#structure-model-storage-costs":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongsstruct":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#longpair":{},"sqlfunctions/#longpairfromuuid":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#providedid":{},"sqlfunctions/#rngid":{},"sqlfunctions/#rnguuid":{},"sqlfunctions/#uniqueid":{},"sqlfunctions/#unpack":{},"sqlfunctions/#updatefield":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{"background/storage_method/#expression-created-structures":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"background/storage_method/#structure-model-storage-costs":{},"background/storage_method/#udf-created-structures":{}}}],["style",{"_index":935,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["sub",{"_index":510,"text":{"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["subsequ",{"_index":1686,"text":{"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}},"title":{}}],["substitut",{"_index":208,"text":{"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{}}],["such",{"_index":55,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/validation/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["suffer",{"_index":919,"text":{"advanced/prng/":{},"advanced/userFunctions/":{}},"title":{}}],["suffici",{"_index":969,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["suggest",{"_index":1172,"text":{"advanced/ruleEngineWorkflow/":{}},"title":{"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}}}],["suit",{"_index":1278,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/flavours/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["suitabl",{"_index":272,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#hashwithstruct":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#rulesuiteresultdetails":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashlongswithstruct":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["sum",{"_index":158,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#inc":{},"sqlfunctions/#meanf":{},"sqlfunctions/#printcode":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#returnsum":{}},"title":{}}],["summari",{"_index":1231,"text":{"advanced/sampleDocsValidation/":{}},"title":{"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#warnings-summary":{}}}],["sumtyp",{"_index":432,"text":{"sqlfunctions/":{},"sqlfunctions/#resultswith":{}},"title":{}}],["sumwith",{"_index":485,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"sqlfunctions/":{},"sqlfunctions/#sumwith":{}},"title":{"sqlfunctions/#sumwith":{}}}],["sumwith('dl",{"_index":624,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}},"title":{}}],["sumwith(sum",{"_index":576,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["suppli",{"_index":648,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["support",{"_index":73,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"sqlfunctions/":{},"sqlfunctions/#idequal":{},"sqlfunctions/#printcode":{}},"title":{"getting_started/#24-support-requires-246-or-janino-3016":{}}}],["sure",{"_index":978,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["surpris",{"_index":1447,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["surround",{"_index":1260,"text":{"advanced/userFunctions/":{}},"title":{}}],["syntax",{"_index":620,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/userFunctions/":{}},"title":{}}],["system",{"_index":746,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/rowIdFunctions/":{}},"title":{}}],["system.properti",{"_index":1369,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["t",{"_index":1194,"text":{"advanced/ruleFolder/":{}},"title":{}}],["tabl",{"_index":1139,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["table.field",{"_index":1140,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["tag",{"_index":965,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["take",{"_index":305,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/key_functions/":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#idequal":{},"sqlfunctions/#longpairequal":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#rnguuid":{},"sqlfunctions/#unpack":{},"sqlfunctions/#unpackidtriple":{}},"title":{"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}}}],["taken",{"_index":1057,"text":{"advanced/ruleEngine/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{}},"title":{}}],["target",{"_index":1598,"text":{"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["task",{"_index":1350,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["tell",{"_index":656,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["temporari",{"_index":1156,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{}},"title":{}}],["tempt",{"_index":1202,"text":{"advanced/ruleFolder/":{}},"title":{}}],["term",{"_index":1163,"text":{"advanced/ruleEngineWorkflow/":{}},"title":{"advanced/ruleEngineWorkflow/#overview-and-terms":{}}}],["test",{"_index":93,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/#running-the-tests":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{"advanced/sampleDocsOutput/#lambda-test":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/#running-the-tests":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}}}],["testcaller2",{"_index":1220,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{}},"title":{"advanced/sampleDocsOutput/#lambda-testcaller2":{}}}],["testcaller3",{"_index":1229,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{}},"title":{"advanced/sampleDocsOutput/#lambda-testcaller3":{}}}],["testdatadf",{"_index":1041,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["testidleft",{"_index":1834,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["testshades/pom.xml",{"_index":1578,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["testshades/target",{"_index":1583,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["testsuit",{"_index":1730,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["text",{"_index":1183,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["thank",{"_index":1632,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["that'",{"_index":1327,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["thebyt",{"_index":782,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["thecount",{"_index":1388,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["thecurr",{"_index":1196,"text":{"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{}},"title":{}}],["thedatafram",{"_index":1809,"text":{"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["thefilepath",{"_index":1663,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["themselv",{"_index":1453,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["thevalu",{"_index":1242,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{}},"title":{}}],["thing",{"_index":1174,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["think",{"_index":511,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["third",{"_index":1303,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["thoroughli",{"_index":896,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["those",{"_index":1176,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{"getting_started/flavours/":{}}}],["thread",{"_index":165,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{}},"title":{}}],["three",{"_index":739,"text":{"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/flavours/":{}},"title":{}}],["through",{"_index":167,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#aggexpr":{}},"title":{}}],["throughout",{"_index":561,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"model/":{},"model/#rules":{}},"title":{}}],["throw",{"_index":655,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["tie",{"_index":1165,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{}},"title":{}}],["tight",{"_index":1445,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["time",{"_index":807,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#why-do-all-this":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["timestamp",{"_index":490,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["titl",{"_index":994,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["tod",{"_index":1060,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{}},"title":{}}],["todaymark",{"_index":996,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["todf",{"_index":881,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{}}],["togeth",{"_index":573,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["together.result",{"_index":1043,"text":{"advanced/ruleEngine/":{},"advanced/ruleFolder/":{}},"title":{}}],["tolambdad",{"_index":1751,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["toler",{"_index":1129,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{}},"title":{}}],["took",{"_index":803,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["tool",{"_index":1443,"text":{"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{"getting_started/#build-tool-dependencies":{}}}],["top",{"_index":198,"text":{"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{},"model/":{},"model/#rules":{},"model/storage/":{},"model/storage/#storage-model":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{},"sqlfunctions/#rulesuiteresultdetails":{}},"title":{}}],["torulesuitedf",{"_index":1753,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["tostr",{"_index":404,"text":{"sqlfunctions/":{},"sqlfunctions/#printexpr":{}},"title":{}}],["total",{"_index":1506,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["track",{"_index":1355,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["trait",{"_index":1361,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}},"title":{}}],["transfer_typ",{"_index":1200,"text":{"advanced/ruleFolder/":{}},"title":{}}],["transform",{"_index":942,"text":{"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["transform_key",{"_index":1341,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["transform_valu",{"_index":1340,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["transformbeforeshow",{"_index":1413,"text":{"advanced/validation/":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["translat",{"_index":412,"text":{"advanced/ruleEngine/":{},"sqlfunctions/":{},"sqlfunctions/#probability":{}},"title":{}}],["transpar",{"_index":902,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{}},"title":{}}],["treat",{"_index":483,"text":{"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"model/":{},"model/#rules":{},"sqlfunctions/":{},"sqlfunctions/#softfail":{}},"title":{}}],["tree",{"_index":403,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"sqlfunctions/":{},"sqlfunctions/#printexpr":{}},"title":{}}],["treepattern",{"_index":1698,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["tri",{"_index":1132,"text":{"advanced/ruleEngine/":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{}}}],["trickeri",{"_index":1335,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["trigger",{"_index":816,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{}}],["trigger'",{"_index":1685,"text":{"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{}},"title":{}}],["tripl",{"_index":497,"text":{"advanced/ruleEngine/":{},"sqlfunctions/":{},"sqlfunctions/#unpackidtriple":{}},"title":{}}],["true",{"_index":145,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#mapcontains":{}},"title":{}}],["tupl",{"_index":1418,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["turn",{"_index":1191,"text":{"advanced/ruleFolder/":{}},"title":{}}],["tweak",{"_index":1345,"text":{"advanced/userFunctions/":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{}}}],["twitter",{"_index":938,"text":{"advanced/rowIdFunctions/":{}},"title":{}}],["two",{"_index":236,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#serializing":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"sqlfunctions/":{},"sqlfunctions/#digesttolongs":{},"sqlfunctions/#idequal":{},"sqlfunctions/#longpairequal":{},"sqlfunctions/#packints":{},"sqlfunctions/#rngbytes":{}},"title":{}}],["type",{"_index":39,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#errors-summary":{},"advanced/sampleDocsValidation/#warnings-summary":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#inc":{},"sqlfunctions/#meanf":{},"sqlfunctions/#printcode":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#returnsum":{},"sqlfunctions/#rnguuid":{},"sqlfunctions/#sumwith":{}},"title":{"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}}}],["type'",{"_index":1295,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["typedexpressionencod",{"_index":1833,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["typic",{"_index":203,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#map-functions":{},"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{}},"title":{}}],["uber",{"_index":1574,"text":{"getting_started/":{},"getting_started/#building-via-commandline":{}},"title":{}}],["ubiqu",{"_index":971,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{}},"title":{}}],["udf",{"_index":1463,"text":{"background/about/":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{}},"title":{"background/storage_method/#udf-created-structures":{}}}],["udf'",{"_index":1405,"text":{"advanced/validation/":{}},"title":{}}],["unaccept",{"_index":892,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["under",{"_index":96,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/rowIdFunctions/":{}},"title":{}}],["underli",{"_index":877,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/rowIdFunctions/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/storage_method/":{},"background/storage_method/#filtering-costs":{}},"title":{}}],["understand",{"_index":1024,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["unexpect",{"_index":644,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{}},"title":{}}],["unfortun",{"_index":1273,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["uniqu",{"_index":120,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"model/":{},"model/#rules":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}}}],["unique_id",{"_index":1660,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{}}],["uniqueid",{"_index":470,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"sqlfunctions/":{},"sqlfunctions/#saferlongpair":{}},"title":{"sqlfunctions/#uniqueid":{}}}],["uniqueid('prefix",{"_index":487,"text":{"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["unit",{"_index":373,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["unless",{"_index":692,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{}},"title":{}}],["unlik",{"_index":400,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["unpack",{"_index":492,"text":{"advanced/ruleEngine/":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"sqlfunctions/":{},"sqlfunctions/#unpack":{},"sqlfunctions/#unpackidtriple":{}},"title":{"sqlfunctions/#unpack":{}}}],["unpack(expr",{"_index":493,"text":{"sqlfunctions/":{},"sqlfunctions/#unpack":{}},"title":{}}],["unpackidtripl",{"_index":495,"text":{"advanced/ruleEngine/":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#unpackidtriple":{}}}],["unpackidtriple(expr",{"_index":496,"text":{"sqlfunctions/":{},"sqlfunctions/#unpackidtriple":{}},"title":{}}],["unrel",{"_index":1173,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["unrol",{"_index":1157,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{}},"title":{}}],["unsuit",{"_index":1160,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{}},"title":{}}],["until",{"_index":475,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"sqlfunctions/":{},"sqlfunctions/#saferlongpair":{}},"title":{}}],["up",{"_index":566,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/blooms/":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/about/":{},"background/about/#why-quality":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{"getting_started/":{}}}],["updatefield",{"_index":504,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"sqlfunctions/":{}},"title":{"sqlfunctions/#updatefield":{}}}],["updatefield(structure_expr",{"_index":505,"text":{"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["updatefield(thecurr",{"_index":1197,"text":{"advanced/ruleFolder/":{}},"title":{}}],["upload",{"_index":1726,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["upon",{"_index":1250,"text":{"advanced/userFunctions/":{}},"title":{}}],["upstream",{"_index":937,"text":{"advanced/rowIdFunctions/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"model/":{},"model/#rule-results":{}},"title":{}}],["url",{"_index":862,"text":{"advanced/expressionDocs/":{}},"title":{}}],["us",{"_index":14,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#type-lookup":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#map-functions":{},"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-4-1-":{},"advanced/sampleDocsOutput/#rule-id-5-1-":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/about/#resulting-solution-space":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"background/storage_method/#filtering-costs":{},"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{},"background/storage_method/#structure-model-storage-costs":{},"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-the-library":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/#running-the-tests":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rule-results":{},"model/#rules":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#storage-model":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#aggexpr":{},"sqlfunctions/#bigbloom":{},"sqlfunctions/#callfun":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#disabledrule":{},"sqlfunctions/#failed":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#flattenruleresults":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#idequal":{},"sqlfunctions/#inc":{},"sqlfunctions/#longpairequal":{},"sqlfunctions/#murmur3id":{},"sqlfunctions/#packints":{},"sqlfunctions/#passed":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{},"sqlfunctions/#probability":{},"sqlfunctions/#probabilityin":{},"sqlfunctions/#providedid":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{},"sqlfunctions/#saferlongpair":{},"sqlfunctions/#smallbloom":{},"sqlfunctions/#softfailed":{},"sqlfunctions/#sumwith":{},"sqlfunctions/#uniqueid":{},"sqlfunctions/#updatefield":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"getting_started/key_functions/":{},"getting_started/key_functions/#key-sql-functions-to-use-in-your-rules":{}}}],["usabl",{"_index":25,"text":{"":{},"#enhanced-spark-functionality":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["usag",{"_index":706,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/flavours/#qualityrules-ruleenginerunner":{}},"title":{}}],["use(func",{"_index":1313,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["useless",{"_index":730,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["user",{"_index":102,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/prng/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#_lambda_":{},"sqlfunctions/#callfun":{},"sqlfunctions/#printcode":{}},"title":{"advanced/userFunctions/":{}}}],["usetyp",{"_index":1211,"text":{"advanced/ruleFolder/":{}},"title":{}}],["util",{"_index":799,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/expressionDocs/":{},"advanced/validation/":{}},"title":{}}],["uuid",{"_index":328,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"sqlfunctions/":{},"sqlfunctions/#longpairfromuuid":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#rnguuid":{}},"title":{}}],["val",{"_index":220,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{}},"title":{}}],["valid",{"_index":218,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/flavours/":{},"getting_started/flavours/#quality-qualitydata-rulerunner":{},"sqlfunctions/":{},"sqlfunctions/#coalesceifattributesmissing":{},"sqlfunctions/#coalesceifattributesmissingdisable":{},"sqlfunctions/#hashwith":{}},"title":{"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{}}}],["valu",{"_index":135,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#what-are-bloom-maps":{},"advanced/expressionDocs/":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/mapFunctions/#map-functions":{},"advanced/prng/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/ruleEngine/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/flavours/":{},"getting_started/flavours/#qualityfolder-rulefolderrunner":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-with-constants":{},"sqlfunctions/":{},"sqlfunctions/#_":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#printcode":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["var",{"_index":379,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["variabl",{"_index":95,"text":{"":{},"#enhanced-spark-functionality":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{},"advanced/ruleFolder/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsValidation/":{},"advanced/sampleDocsValidation/#id-6-1":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{},"sqlfunctions/#fieldbasedid":{},"sqlfunctions/#hashfieldbasedid":{},"sqlfunctions/#printcode":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["variable2",{"_index":1227,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-7-2-":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{}},"title":{}}],["variable3",{"_index":1230,"text":{"advanced/sampleDocsOutput/":{},"advanced/sampleDocsOutput/#rule-id-8-1-":{}},"title":{}}],["variou",{"_index":1626,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}],["vcredist",{"_index":1589,"text":{"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["vendor",{"_index":981,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["verb",{"_index":1171,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["verbatim",{"_index":515,"text":{"sqlfunctions/":{},"sqlfunctions/#updatefield":{}},"title":{}}],["veri",{"_index":660,"text":{"advanced/aggregations/":{},"advanced/aggregations/#type-lookup-and-monoidal-merging":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["verifi",{"_index":1045,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#debugging":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["verifyerror",{"_index":1642,"text":{"getting_started/":{},"getting_started/#24-support-requires-246-or-janino-3016":{}},"title":{}}],["version",{"_index":29,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/validation/":{},"advanced/validation/#why-do-i-get-a-javalangabstractmethoderror-when-validating":{},"background/changelog/":{},"background/changelog/#001-snapshot-5th-march-2023":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/#building-via-commandline":{},"getting_started/#developing-for-a-databricks-runtime":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#filtering-the-results":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{},"getting_started/running_on_databricks/#running-321-builds-on-databricks-runtime-104":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{},"model/":{},"model/#rules":{},"sqlfunctions/":{},"sqlfunctions/#disabledrule":{},"sqlfunctions/#hashwith":{},"sqlfunctions/#unpack":{},"sqlfunctions/#updatefield":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwithstruct":{}},"title":{"getting_started/serializing/#versioned-rule-datasets":{}}}],["version.jar",{"_index":1601,"text":{"getting_started/":{},"getting_started/#build-tool-dependencies":{}},"title":{}}],["versionedid",{"_index":1790,"text":{"model/":{},"model/#rules":{}},"title":{}}],["versionid",{"_index":1820,"text":{"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}}}],["via",{"_index":27,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/rowIdFunctions/":{},"advanced/ruleEngine/":{},"advanced/ruleFolder/":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"advanced/userFunctions/#why-do-all-this":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#udf-created-structures":{},"getting_started/":{},"getting_started/#build-tool-dependencies":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-330-builds-on-databricks-runtime-113-lts":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{},"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#printexpr":{}},"title":{"getting_started/#building-via-commandline":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}}}],["visibl",{"_index":1525,"text":{"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{}},"title":{}}],["visualis",{"_index":1180,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["vs",{"_index":642,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"background/storage_method/":{}},"title":{"background/storage_method/#how-should-rule-results-be-stored-json-vs-structures":{}}}],["want",{"_index":1177,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"getting_started/serializing/":{},"getting_started/serializing/#versioned-rule-datasets":{}},"title":{"advanced/validation/#what-i-want-to-change-the-dataframe-before-i-show-it":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}}}],["warn",{"_index":689,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/expressionDocs/":{},"advanced/sampleDocsOutput/":{},"advanced/sampleDocsValidation/":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{}},"title":{"advanced/sampleDocsOutput/#output-rule-id-1002-1-1-warnings":{},"advanced/sampleDocsOutput/#output-rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-2-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings":{},"advanced/sampleDocsOutput/#rule-id-6-1-1-warnings_1":{},"advanced/sampleDocsOutput/#rulesuite-id-0-1-3-errors-3-warnings":{},"advanced/sampleDocsValidation/#warnings-identified-for-rulesuite-id-0-1":{},"advanced/sampleDocsValidation/#warnings-summary":{}}}],["way",{"_index":1087,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{}},"title":{}}],["we'v",{"_index":1302,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["well",{"_index":410,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#serializing":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"sqlfunctions/":{},"sqlfunctions/#printexpr":{}},"title":{}}],["wherea",{"_index":888,"text":{"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{}},"title":{}}],["wherev",{"_index":31,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"model/":{},"model/#rules":{}},"title":{}}],["whic",{"_index":1423,"text":{"advanced/validation/":{},"advanced/validation/#what-if-i-want-to-actually-test-the-rulesuite-runs":{}},"title":{}}],["whilst",{"_index":178,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{},"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/blooms/#using-the-quality-bloom-filters":{},"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/userFunctions/":{},"background/about/":{},"background/about/#how-did-rules-and-folder-come-about":{},"sqlfunctions/":{},"sqlfunctions/#bigbloom":{}},"title":{}}],["whole",{"_index":623,"text":{"advanced/aggregations/":{},"advanced/aggregations/#what-about-my-pre-071-aggexpr-functions-using-ddl-type-parameters":{}},"title":{}}],["wholestag",{"_index":1151,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#forcerunnereval":{}},"title":{}}],["win",{"_index":1167,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{}},"title":{}}],["winner",{"_index":1484,"text":{"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["winutil",{"_index":1591,"text":{"getting_started/":{},"getting_started/#running-the-tests":{}},"title":{}}],["wise",{"_index":1170,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#overview-and-terms":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{}},"title":{}}],["wish",{"_index":646,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/userFunctions/":{},"advanced/userFunctions/#why-do-all-this":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"model/storage/":{},"model/storage/#where-have-all-the-versionids-and-ruleresults-gone":{}},"title":{}}],["withcolumn",{"_index":767,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-spark-stats-package":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"background/evaluation_method/":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{}},"title":{"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}}}],["withcolumn/withcolumnrenam",{"_index":1661,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["withevaluatedrulesdf",{"_index":1657,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/a_first_rulesuite/#filtering-the-results":{}},"title":{}}],["within",{"_index":196,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{},"advanced/userFunctions/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/changelog/":{},"background/changelog/#the-quality-exploration-starts-25th-april-2020":{},"getting_started/":{},"getting_started/#building-via-commandline":{},"getting_started/#running-the-tests":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"getting_started/serializing/#versioned-rule-datasets":{},"sqlfunctions/":{},"sqlfunctions/#callfun":{},"sqlfunctions/#packints":{},"sqlfunctions/#uniqueid":{}},"title":{}}],["withn",{"_index":709,"text":{"advanced/blooms/":{},"advanced/blooms/#bloom-filters":{}},"title":{}}],["without",{"_index":354,"text":{"advanced/expressionDocs/":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"background/evaluation_method/#how-should-rules-be-evaluated":{},"background/storage_method/":{},"background/storage_method/#expression-created-structures":{},"model/meta/":{},"model/meta/#meta-rulesets":{},"sqlfunctions/":{},"sqlfunctions/#prefixedtolongpair":{},"sqlfunctions/#printcode":{}},"title":{}}],["withoutlambdasandoutputexpress",{"_index":1063,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#serializing":{}},"title":{}}],["withresolv",{"_index":1205,"text":{"advanced/ruleFolder/":{}},"title":{}}],["withrul",{"_index":1104,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["won't",{"_index":391,"text":{"advanced/expressionDocs/":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{}},"title":{}}],["work",{"_index":635,"text":{"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/aggregations/#monoidal-merging":{},"advanced/blooms/":{},"advanced/blooms/#expressions-which-take-expression-parameters":{},"advanced/blooms/#how-does-quality-change-this":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#building-the-lookup-maps":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#any-reason-why-i-shouldnt-try-it":{},"advanced/ruleEngine/#flattenruleresults":{},"advanced/ruleEngine/#forcerunnereval":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleEngine/#serializing":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#flattenfolderresults":{},"advanced/ruleFolder/#resolvewith":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"advanced/userFunctions/#what-about-default-parameter-or-different-length-parameter-length-lambdas":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{},"model/meta/":{},"model/meta/#meta-rulesets":{}},"title":{}}],["worker",{"_index":787,"text":{"advanced/blooms/":{},"advanced/blooms/#using-the-quality-bloom-filters":{}},"title":{}}],["workflow",{"_index":1161,"text":{},"title":{"advanced/ruleEngineWorkflow/":{}}}],["workspac",{"_index":1727,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["worri",{"_index":1696,"text":{"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#running-31-builds-on-databricks-runtime-91-lts":{}},"title":{}}],["wors",{"_index":1545,"text":{"background/storage_method/":{},"background/storage_method/#udf-created-structures":{}},"title":{}}],["wrap",{"_index":396,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#updatefield":{}},"title":{}}],["write",{"_index":22,"text":{"":{},"#run-complex-data-quality-rules-using-simple-sql-in-a-batch-or-streaming-spark-application-at-scale":{},"advanced/aggregations/":{},"advanced/aggregations/#i-get-a-strange-error-mentioning-casts-and-type-incompatiblity-what-do":{},"advanced/expressionDocs/":{},"advanced/ruleEngine/":{},"advanced/ruleEngine/#why-is-this-needed":{},"advanced/userFunctions/":{},"advanced/userFunctions/#controlling-compilation-tweaking-the-quality-optimisations":{},"background/about/":{},"background/about/#gaps-in-existing-spark-offerings":{},"background/evaluation_method/":{},"background/evaluation_method/#catalyst-expression-performance":{},"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#defining-running-your-first-rulesuite":{},"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{},"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}}}],["write'",{"_index":1100,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["writer",{"_index":376,"text":{"sqlfunctions/":{},"sqlfunctions/#printcode":{},"sqlfunctions/#printexpr":{}},"title":{}}],["written",{"_index":826,"text":{"advanced/expressionDocs/":{},"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["wrt",{"_index":592,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["wy_v3",{"_index":547,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["x",{"_index":315,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-lambda-functions":{},"advanced/mapFunctions/":{},"advanced/mapFunctions/#expressions-which-take-expression-parameters":{},"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{},"getting_started/key_functions/":{},"getting_started/key_functions/#expressions-which-take-expression-parameters":{},"sqlfunctions/":{},"sqlfunctions/#inc":{},"sqlfunctions/#resultswith":{},"sqlfunctions/#sumwith":{}},"title":{}}],["xml",{"_index":1466,"text":{"background/about/":{},"background/about/#resulting-solution-space":{}},"title":{}}],["xo_ro_shi_ro_128_pp",{"_index":442,"text":{"advanced/prng/":{},"advanced/prng/#rng-expressions":{},"advanced/rowIdFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#rng":{},"sqlfunctions/#rngbytes":{},"sqlfunctions/#rngid":{}},"title":{}}],["xx",{"_index":541,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashwith":{}},"title":{}}],["xxh3",{"_index":532,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{},"sqlfunctions/":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["xxxxxf",{"_index":1667,"text":{"getting_started/a_first_rulesuite/":{},"getting_started/a_first_rulesuite/#withcolumn-is-bad-how-else-can-i-add-columns":{}},"title":{}}],["yep",{"_index":1304,"text":{"advanced/userFunctions/":{},"advanced/userFunctions/#higher-order-functions":{}},"title":{}}],["yield",{"_index":587,"text":{"advanced/aggregations/":{},"advanced/aggregations/#aggregation-functions":{}},"title":{}}],["ymmv",{"_index":1102,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#resolvewith":{},"advanced/ruleFolder/":{},"advanced/ruleFolder/#resolvewith":{}},"title":{}}],["you'd",{"_index":1747,"text":{"getting_started/serializing/":{},"getting_started/serializing/#reading-writing-rulesuites":{}},"title":{}}],["you'll",{"_index":1083,"text":{"advanced/ruleEngine/":{},"advanced/ruleEngine/#debugging":{},"getting_started/running_on_databricks/":{},"getting_started/running_on_databricks/#testing-out-quality-via-notebooks":{}},"title":{}}],["you'v",{"_index":1178,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["yourself",{"_index":1181,"text":{"advanced/ruleEngineWorkflow/":{},"advanced/ruleEngineWorkflow/#suggested-approach-to-qualityrules-management":{}},"title":{}}],["yyyi",{"_index":989,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#guaranteed-unique-id-how":{}},"title":{}}],["za",{"_index":964,"text":{"advanced/rowIdFunctions/":{},"advanced/rowIdFunctions/#fieldbasedid-with-md5-seems-far-slower-than-other-approaches":{}},"title":{}}],["zafieldbasedid",{"_index":519,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#zafieldbasedid":{}}}],["zafieldbasedid('prefix",{"_index":520,"text":{"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{}},"title":{}}],["zahashlongswith",{"_index":529,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#zahashlongswith":{}}}],["zahashlongswith('hash",{"_index":530,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashlongswithstruct":{}},"title":{}}],["zahashlongswithstruct",{"_index":535,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashwithstruct":{}},"title":{"sqlfunctions/#zahashlongswithstruct":{}}}],["zahashwith",{"_index":537,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#zahashwith":{}}}],["zahashwith('hash",{"_index":538,"text":{"sqlfunctions/":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zahashwithstruct":{}},"title":{}}],["zahashwithstruct",{"_index":548,"text":{"sqlfunctions/":{}},"title":{"sqlfunctions/#zahashwithstruct":{}}}],["zalongsfieldbasedid",{"_index":526,"text":{"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{}},"title":{"sqlfunctions/#zalongsfieldbasedid":{}}}],["zalongsfieldbasedid('prefix",{"_index":550,"text":{"sqlfunctions/":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["zero",{"_index":524,"text":{"advanced/aggregations/":{},"advanced/aggregations/#monoidal-merging":{},"advanced/userFunctions/":{},"sqlfunctions/":{},"sqlfunctions/#zafieldbasedid":{},"sqlfunctions/#zahashlongswith":{},"sqlfunctions/#zahashwith":{},"sqlfunctions/#zalongsfieldbasedid":{}},"title":{}}],["zheng",{"_index":1633,"text":{"getting_started/":{},"getting_started/#developing-for-a-databricks-runtime":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.9"}}