Index.PACKAGES = {"com.sparkutils.quality.utils" : [{"name" : "com.sparkutils.quality.utils.AddDataFunctions", "members_trait" : [{"label" : "ifoldAndReplaceFields", "tail" : "(rules: RuleSuite, fields: Seq[String], foldFieldName: String, debugMode: Boolean, tempFoldDebugName: String, maintainOrder: Boolean, useType: Option[StructType]): (Dataset[Row]) ⇒ Dataset[Row]", "member" : "com.sparkutils.quality.utils.AddDataFunctions.ifoldAndReplaceFields", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#ifoldAndReplaceFields(rules:com.sparkutils.quality.RuleSuite,fields:Seq[String],foldFieldName:String,debugMode:Boolean,tempFoldDebugName:String,maintainOrder:Boolean,useType:Option[org.apache.spark.sql.types.StructType]):org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]=>org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "foldAndReplaceFieldsWithStruct", "tail" : "(rules: RuleSuite, struct: StructType, foldFieldName: String, debugMode: Boolean, tempFoldDebugName: String, maintainOrder: Boolean): (Dataset[Row]) ⇒ Dataset[Row]", "member" : "com.sparkutils.quality.utils.AddDataFunctions.foldAndReplaceFieldsWithStruct", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#foldAndReplaceFieldsWithStruct(rules:com.sparkutils.quality.RuleSuite,struct:org.apache.spark.sql.types.StructType,foldFieldName:String,debugMode:Boolean,tempFoldDebugName:String,maintainOrder:Boolean):org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]=>org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "foldAndReplaceFields", "tail" : "(rules: RuleSuite, fields: Seq[String], foldFieldName: String, debugMode: Boolean, tempFoldDebugName: String, maintainOrder: Boolean): (Dataset[Row]) ⇒ Dataset[Row]", "member" : "com.sparkutils.quality.utils.AddDataFunctions.foldAndReplaceFields", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#foldAndReplaceFields(rules:com.sparkutils.quality.RuleSuite,fields:Seq[String],foldFieldName:String,debugMode:Boolean,tempFoldDebugName:String,maintainOrder:Boolean):org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]=>org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "addOverallResultsAndDetailsF", "tail" : "(rules: RuleSuite, overallResult: String, resultDetails: String): (Dataset[Row]) ⇒ Dataset[Row]", "member" : "com.sparkutils.quality.utils.AddDataFunctions.addOverallResultsAndDetailsF", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#addOverallResultsAndDetailsF(rules:com.sparkutils.quality.RuleSuite,overallResult:String,resultDetails:String):org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]=>org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "addOverallResultsAndDetails", "tail" : "(dataFrame: Dataset[Row], rules: RuleSuite, overallResult: String, resultDetails: String): Dataset[Row]", "member" : "com.sparkutils.quality.utils.AddDataFunctions.addOverallResultsAndDetails", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#addOverallResultsAndDetails(dataFrame:org.apache.spark.sql.Dataset[org.apache.spark.sql.Row],rules:com.sparkutils.quality.RuleSuite,overallResult:String,resultDetails:String):org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "addDataQualityF", "tail" : "(rules: RuleSuite, name: String): (Dataset[Row]) ⇒ Dataset[Row]", "member" : "com.sparkutils.quality.utils.AddDataFunctions.addDataQualityF", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#addDataQualityF(rules:com.sparkutils.quality.RuleSuite,name:String):org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]=>org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "addDataQuality", "tail" : "(dataFrame: Dataset[Row], rules: RuleSuite, name: String): Dataset[Row]", "member" : "com.sparkutils.quality.utils.AddDataFunctions.addDataQuality", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#addDataQuality(dataFrame:org.apache.spark.sql.Dataset[org.apache.spark.sql.Row],rules:com.sparkutils.quality.RuleSuite,name:String):org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/utils\/AddDataFunctions.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.utils.AddFields", "shortDescription" : "Adds\/replaces fields in a struct.", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "com.sparkutils.quality.utils.AddFields.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "com.sparkutils.quality.utils.AddFields.prettyName", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#prettyName:String", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.utils.AddFields.doGenCode", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.utils.AddFields.eval", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "com.sparkutils.quality.utils.AddFields.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "dataType", "tail" : ": StructType", "member" : "com.sparkutils.quality.utils.AddFields.dataType", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#dataType:org.apache.spark.sql.types.StructType", "kind" : "lazy val"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.utils.AddFields.nullable", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#nullable:Boolean", "kind" : "def"}, {"member" : "com.sparkutils.quality.utils.AddFields#<init>", "error" : "unsupported entity"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.utils.AddFields.children", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/AddFields.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/AddFields.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.Arrays", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/utils\/Arrays$.html", "members_object" : [{"label" : "toArray", "tail" : "(array: ArrayData, dataType: DataType): Array[Any]", "member" : "com.sparkutils.quality.utils.Arrays.toArray", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#toArray(array:org.apache.spark.sql.catalyst.util.ArrayData,dataType:org.apache.spark.sql.types.DataType):Array[Any]", "kind" : "def"}, {"label" : "mapArray", "tail" : "(array: ArrayData, dataType: DataType, f: (Any) ⇒ Any): Array[Any]", "member" : "com.sparkutils.quality.utils.Arrays.mapArray", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#mapArray(array:org.apache.spark.sql.catalyst.util.ArrayData,dataType:org.apache.spark.sql.types.DataType,f:Any=>Any):Array[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Arrays$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.utils.BloomLookupType", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.utils.BloomLookupType#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.utils.BloomLookupType.name", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/BloomLookupType.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.BytePackingUtils", "shortDescription" : "Simple utilities to manage byte to long \/ int conversions", "object" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html", "members_object" : [{"label" : "unencodeLong", "tail" : "(index: Int, array: Array[Byte]): Long", "member" : "com.sparkutils.quality.utils.BytePackingUtils.unencodeLong", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#unencodeLong(index:Int,array:Array[Byte]):Long", "kind" : "def"}, {"label" : "unencodeInt", "tail" : "(index: Int, array: Array[Byte]): Int", "member" : "com.sparkutils.quality.utils.BytePackingUtils.unencodeInt", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#unencodeInt(index:Int,array:Array[Byte]):Int", "kind" : "def"}, {"label" : "encodeLong", "tail" : "(i: Long, index: Int, array: Array[Byte]): Unit", "member" : "com.sparkutils.quality.utils.BytePackingUtils.encodeLong", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#encodeLong(i:Long,index:Int,array:Array[Byte]):Unit", "kind" : "def"}, {"label" : "encodeInt", "tail" : "(i: Int, index: Int, array: Array[Byte]): Unit", "member" : "com.sparkutils.quality.utils.BytePackingUtils.encodeInt", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#encodeInt(i:Int,index:Int,array:Array[Byte]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/BytePackingUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.utils.Comparison", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/utils\/Comparison$.html", "members_object" : [{"label" : "compareToOrdering", "tail" : "(ordering: Ordering[T])(left: Any, right: Any): Int", "member" : "com.sparkutils.quality.utils.Comparison.compareToOrdering", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#compareToOrdering[T](ordering:Ordering[T])(left:Any,right:Any):Int", "kind" : "def"}, {"label" : "compareTo", "tail" : "(left: Any, right: Any): Int", "member" : "com.sparkutils.quality.utils.Comparison.compareTo", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#compareTo[T<:Comparable[T]](left:Any,right:Any):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Comparison$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.utils.Description", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.utils.Description#<init>", "error" : "unsupported entity"}, {"label" : "str", "tail" : ": String", "member" : "com.sparkutils.quality.utils.Description.str", "link" : "com\/sparkutils\/quality\/utils\/Description.html#str:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/Description.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/Description.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/Description.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/Description.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/Description.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/Description.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/Description.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Description.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Description.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Description.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/Description.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/Description.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/Description.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/Description.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Description.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Description.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/Description.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.Docs", "shortDescription" : "All params are optional", "members_case class" : [{"member" : "com.sparkutils.quality.utils.Docs#<init>", "error" : "unsupported entity"}, {"label" : "returnDescription", "tail" : ": String", "member" : "com.sparkutils.quality.utils.Docs.returnDescription", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#returnDescription:String", "kind" : "val"}, {"label" : "params", "tail" : ": Map[String, String]", "member" : "com.sparkutils.quality.utils.Docs.params", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#params:Map[String,String]", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "com.sparkutils.quality.utils.Docs.description", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#description:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/Docs.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Docs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/Docs.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.DocsParser", "shortDescription" : "Parser for documentation on string expressions, with support for lambdas", "object" : "com\/sparkutils\/quality\/utils\/DocsParser$.html", "members_object" : [{"label" : "PackratParser", "tail" : "", "member" : "scala.util.parsing.combinator.PackratParsers.PackratParser", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#PackratParser[+T<:<?>]extendsPackratParsers.this.Parser[T]", "kind" : "abstract class"}, {"label" : "PackratReader", "tail" : "", "member" : "scala.util.parsing.combinator.PackratParsers.PackratReader", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#PackratReader[+T<:<?>]extendsReader[T]", "kind" : "class"}, {"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#OnceParser[+T<:<?>]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#NoSuccess", "kind" : "object"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#Success[+T]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#ParseResult[+T]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "parse", "tail" : "(s: String): Option[Docs]", "member" : "com.sparkutils.quality.utils.DocsParser.parse", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#parse(s:String):Option[com.sparkutils.quality.utils.Docs]", "kind" : "def"}, {"label" : "stripComments", "tail" : "(s: String): String", "member" : "com.sparkutils.quality.utils.DocsParser.stripComments", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#stripComments(s:String):String", "kind" : "def"}, {"label" : "ret", "tail" : ": Parser[ReturnDoc]", "member" : "com.sparkutils.quality.utils.DocsParser.ret", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#ret:com.sparkutils.quality.utils.DocsParser.Parser[com.sparkutils.quality.utils.ReturnDoc]", "kind" : "lazy val"}, {"label" : "param", "tail" : ": Parser[ParamDoc]", "member" : "com.sparkutils.quality.utils.DocsParser.param", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#param:com.sparkutils.quality.utils.DocsParser.Parser[com.sparkutils.quality.utils.ParamDoc]", "kind" : "lazy val"}, {"label" : "params", "tail" : ": Parser[List[ParamDoc]]", "member" : "com.sparkutils.quality.utils.DocsParser.params", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#params:com.sparkutils.quality.utils.DocsParser.Parser[List[com.sparkutils.quality.utils.ParamDoc]]", "kind" : "lazy val"}, {"label" : "description", "tail" : ": Parser[Description]", "member" : "com.sparkutils.quality.utils.DocsParser.description", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#description:com.sparkutils.quality.utils.DocsParser.Parser[com.sparkutils.quality.utils.Description]", "kind" : "lazy val"}, {"label" : "docs", "tail" : ": Parser[~[~[~[~[Option[Description], Option[List[ParamDoc]]], Option[ReturnDoc]], String], String]]", "member" : "com.sparkutils.quality.utils.DocsParser.docs", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#docs:com.sparkutils.quality.utils.DocsParser.Parser[Option[com.sparkutils.quality.utils.Description]~Option[List[com.sparkutils.quality.utils.ParamDoc]]~Option[com.sparkutils.quality.utils.ReturnDoc]~String~String]", "kind" : "lazy val"}, {"label" : "breakingTokens", "tail" : ": Set[String]", "member" : "com.sparkutils.quality.utils.DocsParser.breakingTokens", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#breakingTokens:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "log", "tail" : ": Logger", "member" : "com.sparkutils.quality.utils.DocsParser.log", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#log:org.slf4j.Logger", "kind" : "val"}, {"label" : "memo", "tail" : "(p: Parser[T]): PackratParser[T]", "member" : "scala.util.parsing.combinator.PackratParsers.memo", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#memo[T](p:PackratParsers.this.Parser[T]):PackratParsers.this.PackratParser[T]", "kind" : "def"}, {"label" : "parser2packrat", "tail" : "(p: ⇒ Parser[T]): PackratParser[T]", "member" : "scala.util.parsing.combinator.PackratParsers.parser2packrat", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#parser2packrat[T](p:=>PackratParsers.this.Parser[T]):PackratParsers.this.PackratParser[T]", "kind" : "implicit def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): PackratParser[T]", "member" : "scala.util.parsing.combinator.PackratParsers.phrase", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#phrase[T](p:PackratParsers.this.Parser[T]):PackratParsers.this.PackratParser[T]", "kind" : "def"}, {"label" : "notAToken", "tail" : ": Parser[String]", "member" : "com.sparkutils.quality.utils.NotATokenParser.notAToken", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#notAToken:NotATokenParser.this.Parser[String]", "kind" : "lazy val"}, {"label" : "floatingPointNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.floatingPointNumber", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#floatingPointNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "stringLiteral", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.stringLiteral", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#stringLiteral:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "decimalNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.decimalNumber", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#decimalNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "wholeNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.wholeNumber", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#wholeNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "ident", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.ident", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#ident:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "skipWhitespace", "tail" : "(): Boolean", "member" : "scala.util.parsing.combinator.RegexParsers.skipWhitespace", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#skipWhitespace:Boolean", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "scala.util.parsing.combinator.RegexParsers.whiteSpace", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) ⇒ List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: ⇒ Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: ⇒ Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, U) ⇒ U], combine: (T, U) ⇒ U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: ⇒ Parser[T], p: ⇒ Parser[U], q: ⇒ Parser[(T, U) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, T) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: ⇒ Parser[T], p0: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: ⇒ Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(f: (ES) ⇒ Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#acceptSeq[ES](es:ES)(implicitf:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) ⇒ Boolean)(err: (Elem) ⇒ String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(f: (ES) ⇒ List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#accept[ES](es:ES)(implicitf:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) ⇒ Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/DocsParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.utils.ExpressionLookupResult", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.utils.ExpressionLookupResult#<init>", "error" : "unsupported entity"}, {"label" : "hasExpressionLookups", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.ExpressionLookupResult.hasExpressionLookups", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#hasExpressionLookups:Boolean", "kind" : "val"}, {"label" : "constants", "tail" : ": Set[LookupType]", "member" : "com.sparkutils.quality.utils.ExpressionLookupResult.constants", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#constants:Set[com.sparkutils.quality.utils.LookupType]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResult.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.ExpressionLookupResults", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.utils.ExpressionLookupResults#<init>", "error" : "unsupported entity"}, {"label" : "lookupExpressions", "tail" : ": Set[A]", "member" : "com.sparkutils.quality.utils.ExpressionLookupResults.lookupExpressions", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#lookupExpressions:Set[A]", "kind" : "val"}, {"label" : "lookupConstants", "tail" : ": Map[A, Set[LookupType]]", "member" : "com.sparkutils.quality.utils.ExpressionLookupResults.lookupConstants", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#lookupConstants:Map[A,Set[com.sparkutils.quality.utils.LookupType]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/ExpressionLookupResults.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.LambdaDocsToken", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/utils\/LambdaDocsToken.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.utils.LookupIdFunctions", "members_trait" : [{"label" : "identifyLookups", "tail" : "(ruleSuite: RuleSuite): LookupResults", "member" : "com.sparkutils.quality.utils.LookupIdFunctions.identifyLookups", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#identifyLookups(ruleSuite:com.sparkutils.quality.RuleSuite):com.sparkutils.quality.utils.LookupResults", "kind" : "def"}, {"label" : "namesFromSchema", "tail" : "(schema: StructType): Set[String]", "member" : "com.sparkutils.quality.utils.LookupIdFunctions.namesFromSchema", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#namesFromSchema(schema:org.apache.spark.sql.types.StructType):Set[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/utils\/LookupIdFunctions.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.utils.LookupResults", "shortDescription" : "Represents the results of lookups.", "members_case class" : [{"member" : "com.sparkutils.quality.utils.LookupResults#<init>", "error" : "unsupported entity"}, {"label" : "lambdaResults", "tail" : ": ExpressionLookupResults[Id]", "member" : "com.sparkutils.quality.utils.LookupResults.lambdaResults", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#lambdaResults:com.sparkutils.quality.utils.ExpressionLookupResults[com.sparkutils.quality.Id]", "kind" : "val"}, {"label" : "ruleResults", "tail" : ": ExpressionLookupResults[RuleRow]", "member" : "com.sparkutils.quality.utils.LookupResults.ruleResults", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#ruleResults:com.sparkutils.quality.utils.ExpressionLookupResults[com.sparkutils.quality.RuleRow]", "kind" : "val"}, {"label" : "ruleSuite", "tail" : ": RuleSuite", "member" : "com.sparkutils.quality.utils.LookupResults.ruleSuite", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#ruleSuite:com.sparkutils.quality.RuleSuite", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/LookupResults.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/LookupResults.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.LookupType", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.utils.LookupType.name", "link" : "com\/sparkutils\/quality\/utils\/LookupType.html#name:String", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/utils\/LookupType.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.utils.MapLookupType", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.utils.MapLookupType#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.utils.MapLookupType.name", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/MapLookupType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/MapLookupType.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.NonPassThrough", "shortDescription" : "Should not be used in queryplanning", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "com.sparkutils.quality.utils.NonPassThrough.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "com.sparkutils.quality.utils.NonPassThrough.children", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.utils.NonPassThrough.dataType", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.utils.NonPassThrough.nullable", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#nullable:Boolean", "kind" : "def"}, {"member" : "com.sparkutils.quality.utils.NonPassThrough#<init>", "error" : "unsupported entity"}, {"label" : "rules", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.utils.NonPassThrough.rules", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#rules:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.doGenCode", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "final def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.eval", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.foldable", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#foldable:Boolean", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/NonPassThrough.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.NotATokenParser", "members_trait" : [{"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#OnceParser[+T]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#NoSuccess", "kind" : "object"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#Success[+T]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#ParseResult[+T]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "notAToken", "tail" : ": Parser[String]", "member" : "com.sparkutils.quality.utils.NotATokenParser.notAToken", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#notAToken:NotATokenParser.this.Parser[String]", "kind" : "lazy val"}, {"label" : "floatingPointNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.floatingPointNumber", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#floatingPointNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "stringLiteral", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.stringLiteral", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#stringLiteral:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "decimalNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.decimalNumber", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#decimalNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "wholeNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.wholeNumber", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#wholeNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "ident", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.ident", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#ident:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.phrase", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#phrase[T](p:RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "skipWhitespace", "tail" : "(): Boolean", "member" : "scala.util.parsing.combinator.RegexParsers.skipWhitespace", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#skipWhitespace:Boolean", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "scala.util.parsing.combinator.RegexParsers.whiteSpace", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) ⇒ List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: ⇒ Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: ⇒ Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, U) ⇒ U], combine: (T, U) ⇒ U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: ⇒ Parser[T], p: ⇒ Parser[U], q: ⇒ Parser[(T, U) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, T) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: ⇒ Parser[T], p0: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: ⇒ Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(f: (ES) ⇒ Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#acceptSeq[ES](es:ES)(implicitf:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) ⇒ Boolean)(err: (Elem) ⇒ String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(f: (ES) ⇒ List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#accept[ES](es:ES)(implicitf:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) ⇒ Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "breakingTokens", "tail" : "(): Set[String]", "member" : "com.sparkutils.quality.utils.NotATokenParser.breakingTokens", "link" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html#breakingTokens:Set[String]", "kind" : "abstract def"}], "shortDescription" : "Parser which adds token based string reading", "trait" : "com\/sparkutils\/quality\/utils\/NotATokenParser.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.utils.ParamDoc", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.utils.ParamDoc#<init>", "error" : "unsupported entity"}, {"label" : "docs", "tail" : ": String", "member" : "com.sparkutils.quality.utils.ParamDoc.docs", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#docs:String", "kind" : "val"}, {"label" : "parameterName", "tail" : ": String", "member" : "com.sparkutils.quality.utils.ParamDoc.parameterName", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#parameterName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/ParamDoc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/ParamDoc.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.PassThrough", "shortDescription" : "Same as unevaluable but the queryplan runs", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "com.sparkutils.quality.utils.PassThrough.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.utils.PassThrough.dataType", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.utils.PassThrough.eval", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.utils.PassThrough.nullable", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#nullable:Boolean", "kind" : "def"}, {"member" : "com.sparkutils.quality.utils.PassThrough#<init>", "error" : "unsupported entity"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.utils.PassThrough.children", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/PassThrough.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/PassThrough.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.PrintCode", "shortDescription" : "Prints the expression generated code with a message, in all other ways it forwards evaluation and compilation to the expression", "members_case class" : [{"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.utils.PrintCode.doGenCode", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.utils.PrintCode.eval", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.utils.PrintCode.dataType", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.utils.PrintCode.withNewChildInternal", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"member" : "com.sparkutils.quality.utils.PrintCode#<init>", "error" : "unsupported entity"}, {"label" : "writer", "tail" : ": (String) ⇒ Unit", "member" : "com.sparkutils.quality.utils.PrintCode.writer", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#writer:String=>Unit", "kind" : "val"}, {"label" : "msg", "tail" : ": String", "member" : "com.sparkutils.quality.utils.PrintCode.msg", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#msg:String", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.utils.PrintCode.child", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullable", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/PrintCode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/PrintCode.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.ReturnDoc", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.utils.ReturnDoc#<init>", "error" : "unsupported entity"}, {"label" : "str", "tail" : ": String", "member" : "com.sparkutils.quality.utils.ReturnDoc.str", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#str:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/ReturnDoc.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.RuleSuiteDocs", "shortDescription" : "All identified docs, or empty Docs, for each RuleSuite expression type", "object" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html", "members_object" : [{"label" : "createErrorAndWarningMarkdown", "tail" : "(ruleSuiteDocs: RuleSuiteDocs, ruleSuite: RuleSuite, relative: RelativeWarningsAndErrors, idGen: (String, Id) ⇒ String): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.createErrorAndWarningMarkdown", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#createErrorAndWarningMarkdown(ruleSuiteDocs:com.sparkutils.quality.utils.RuleSuiteDocs,ruleSuite:com.sparkutils.quality.RuleSuite,relative:com.sparkutils.quality.utils.RuleSuiteDocs.RelativeWarningsAndErrors,idGen:(String,com.sparkutils.quality.Id)=>String):String", "kind" : "def"}, {"label" : "showAll", "tail" : "(header: String, errors: Map[Id, Set[R]], ruleSuite: RuleSuite, ruleSuiteDocs: RuleSuiteDocs, relativePathToDocs: String, idGen: (String, Id) ⇒ String): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.showAll", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#showAll[R<:com.sparkutils.quality.impl.HasIdwithcom.sparkutils.quality.impl.HasOutputText](header:String,errors:Map[com.sparkutils.quality.Id,Set[R]],ruleSuite:com.sparkutils.quality.RuleSuite,ruleSuiteDocs:com.sparkutils.quality.utils.RuleSuiteDocs,relativePathToDocs:String,idGen:(String,com.sparkutils.quality.Id)=>String):String", "kind" : "def"}, {"label" : "exprText", "tail" : "(id: Id, map: Map[Id, WithDocs[T]], anchorId: String, relativePathToDocs: String)(ruleToHasText: (T) ⇒ AnyRef): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.exprText", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#exprText[T](id:com.sparkutils.quality.Id,map:Map[com.sparkutils.quality.Id,com.sparkutils.quality.utils.WithDocs[T]],anchorId:String,relativePathToDocs:String)(ruleToHasText:T=>AnyRef):String", "kind" : "def"}, {"label" : "showFun", "tail" : "(ruleError: R, map: Map[Id, WithDocs[T]], anchorId: String, relativePathToDocs: String)(ruleToHasText: (T) ⇒ AnyRef): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.showFun", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#showFun[T,R<:com.sparkutils.quality.impl.HasIdwithcom.sparkutils.quality.impl.HasOutputText](ruleError:R,map:Map[com.sparkutils.quality.Id,com.sparkutils.quality.utils.WithDocs[T]],anchorId:String,relativePathToDocs:String)(ruleToHasText:T=>AnyRef):String", "kind" : "def"}, {"label" : "createMarkdown", "tail" : "(rsd: RuleSuiteDocs, ruleSuite: RuleSuite, expressionLookups: Map[IdTrEither, ExpressionLookup], qualityDocLink: String, relativeErrorsAndWarning: Option[RelativeWarningsAndErrors], idGen: (String, Id) ⇒ String, extraFunctionListClass: String): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.createMarkdown", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#createMarkdown(rsd:com.sparkutils.quality.utils.RuleSuiteDocs,ruleSuite:com.sparkutils.quality.RuleSuite,expressionLookups:Map[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,com.sparkutils.quality.ExpressionLookup],qualityDocLink:String,relativeErrorsAndWarning:Option[com.sparkutils.quality.utils.RuleSuiteDocs.RelativeWarningsAndErrors],idGen:(String,com.sparkutils.quality.Id)=>String,extraFunctionListClass:String):String", "kind" : "def"}, {"label" : "genRelativeWarningsAndErrors", "tail" : "(id: Id, relativeWarningsAndErrors: RelativeWarningsAndErrors, idGen: (String, Id) ⇒ String): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.genRelativeWarningsAndErrors", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#genRelativeWarningsAndErrors(id:com.sparkutils.quality.Id,relativeWarningsAndErrors:com.sparkutils.quality.utils.RuleSuiteDocs.RelativeWarningsAndErrors,idGen:(String,com.sparkutils.quality.Id)=>String):String", "kind" : "def"}, {"label" : "RelativeWarningsAndErrors", "tail" : "", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.RelativeWarningsAndErrors", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#RelativeWarningsAndErrorsextendsProductwithSerializable", "kind" : "case class"}, {"label" : "genRuleNoStripping", "tail" : "(any: AnyRef): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.genRuleNoStripping", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#genRuleNoStripping(any:AnyRef):String", "kind" : "def"}, {"label" : "genLinks", "tail" : "(theTs: Iterable[T], title: String, flclass: String, extraFunctionListClass: String)(f: (T) ⇒ String): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.genLinks", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#genLinks[T](theTs:Iterable[T],title:String,flclass:String,extraFunctionListClass:String)(f:T=>String):String", "kind" : "def"}, {"label" : "genBackLinks", "tail" : "(id: IdTrEither, reverseLookups: Map[IdTrEither, Set[IdTrEither]], docs: RuleSuiteDocs, extraFunctionListClass: String, idGen: (String, Id) ⇒ String): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.genBackLinks", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#genBackLinks(id:com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,reverseLookups:Map[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,Set[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither]],docs:com.sparkutils.quality.utils.RuleSuiteDocs,extraFunctionListClass:String,idGen:(String,com.sparkutils.quality.Id)=>String):String", "kind" : "def"}, {"label" : "genRule", "tail" : "(any: AnyRef, id: IdTrEither, expressionLookups: Map[IdTrEither, ExpressionLookup], idGen: (String, Id) ⇒ String, rsd: RuleSuiteDocs, extraFunctionListClass: String, qualityDocLink: String): String", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.genRule", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#genRule(any:AnyRef,id:com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,expressionLookups:Map[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,com.sparkutils.quality.ExpressionLookup],idGen:(String,com.sparkutils.quality.Id)=>String,rsd:com.sparkutils.quality.utils.RuleSuiteDocs,extraFunctionListClass:String,qualityDocLink:String):String", "kind" : "def"}, {"label" : "RuleId", "tail" : "(id: Id): IdTrEither", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.RuleId", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#RuleId(id:com.sparkutils.quality.Id):com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither", "kind" : "def"}, {"label" : "OutputExpressionId", "tail" : "(id: Id): IdTrEither", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.OutputExpressionId", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#OutputExpressionId(id:com.sparkutils.quality.Id):com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither", "kind" : "def"}, {"label" : "LambdaId", "tail" : "(id: Id): IdTrEither", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.LambdaId", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#LambdaId(id:com.sparkutils.quality.Id):com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither", "kind" : "def"}, {"label" : "IdTrEither", "tail" : "", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#IdTrEither=com.sparkutils.quality.utils.TrEither[com.sparkutils.quality.Id,com.sparkutils.quality.Id,com.sparkutils.quality.Id]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.sparkutils.quality.utils.RuleSuiteDocs#<init>", "error" : "unsupported entity"}, {"label" : "lambdas", "tail" : ": Map[Id, WithDocs[LambdaFunction]]", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.lambdas", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#lambdas:Map[com.sparkutils.quality.Id,com.sparkutils.quality.utils.WithDocs[com.sparkutils.quality.LambdaFunction]]", "kind" : "val"}, {"label" : "outputExpressions", "tail" : ": Map[Id, WithDocs[RunOnPassProcessor]]", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.outputExpressions", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#outputExpressions:Map[com.sparkutils.quality.Id,com.sparkutils.quality.utils.WithDocs[com.sparkutils.quality.RunOnPassProcessor]]", "kind" : "val"}, {"label" : "rules", "tail" : ": Map[Id, WithDocs[Rule]]", "member" : "com.sparkutils.quality.utils.RuleSuiteDocs.rules", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#rules:Map[com.sparkutils.quality.Id,com.sparkutils.quality.utils.WithDocs[com.sparkutils.quality.Rule]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/RuleSuiteDocs.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.Serializing", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/utils\/Serializing$.html", "members_object" : [{"label" : "flatten", "tail" : "(ruleSuiteResult: RuleSuiteResult): Iterable[RuleResultRow]", "member" : "com.sparkutils.quality.utils.Serializing.flatten", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#flatten(ruleSuiteResult:com.sparkutils.quality.RuleSuiteResult):Iterable[com.sparkutils.quality.RuleResultRow]", "kind" : "def"}, {"label" : "ruleResultToInt", "tail" : "(ruleResult: RuleResult): Int", "member" : "com.sparkutils.quality.utils.Serializing.ruleResultToInt", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#ruleResultToInt(ruleResult:com.sparkutils.quality.RuleResult):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Serializing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.utils.SerializingImports", "members_trait" : [{"label" : "toOutputExpressionDS", "tail" : "(ruleSuite: RuleSuite): Dataset[OutputExpressionRow]", "member" : "com.sparkutils.quality.utils.SerializingImports.toOutputExpressionDS", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#toOutputExpressionDS(ruleSuite:com.sparkutils.quality.RuleSuite):org.apache.spark.sql.Dataset[com.sparkutils.quality.OutputExpressionRow]", "kind" : "def"}, {"label" : "toLambdaDS", "tail" : "(ruleSuite: RuleSuite): Dataset[LambdaFunctionRow]", "member" : "com.sparkutils.quality.utils.SerializingImports.toLambdaDS", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#toLambdaDS(ruleSuite:com.sparkutils.quality.RuleSuite):org.apache.spark.sql.Dataset[com.sparkutils.quality.LambdaFunctionRow]", "kind" : "def"}, {"label" : "toDS", "tail" : "(ruleSuite: RuleSuite): Dataset[RuleRow]", "member" : "com.sparkutils.quality.utils.SerializingImports.toDS", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#toDS(ruleSuite:com.sparkutils.quality.RuleSuite):org.apache.spark.sql.Dataset[com.sparkutils.quality.RuleRow]", "kind" : "def"}, {"label" : "toRuleSuiteDF", "tail" : "(ruleSuite: RuleSuite): DataFrame", "member" : "com.sparkutils.quality.utils.SerializingImports.toRuleSuiteDF", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#toRuleSuiteDF(ruleSuite:com.sparkutils.quality.RuleSuite):org.apache.spark.sql.DataFrame", "kind" : "def"}, {"label" : "ireadRulesFromDF", "tail" : "(df: DataFrame, ruleSuiteId: Column, ruleSuiteVersion: Column, ruleSetId: Column, ruleSetVersion: Column, ruleId: Column, ruleVersion: Column, ruleExpr: Column, ruleEngine: Option[(Column, Column, Column)]): RuleSuiteMap", "member" : "com.sparkutils.quality.utils.SerializingImports.ireadRulesFromDF", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#ireadRulesFromDF(df:org.apache.spark.sql.DataFrame,ruleSuiteId:org.apache.spark.sql.Column,ruleSuiteVersion:org.apache.spark.sql.Column,ruleSetId:org.apache.spark.sql.Column,ruleSetVersion:org.apache.spark.sql.Column,ruleId:org.apache.spark.sql.Column,ruleVersion:org.apache.spark.sql.Column,ruleExpr:org.apache.spark.sql.Column,ruleEngine:Option[(org.apache.spark.sql.Column,org.apache.spark.sql.Column,org.apache.spark.sql.Column)]):com.sparkutils.quality.RuleModel.RuleSuiteMap", "kind" : "def"}, {"label" : "readRulesFromDF", "tail" : "(df: DataFrame, ruleSuiteId: Column, ruleSuiteVersion: Column, ruleSetId: Column, ruleSetVersion: Column, ruleId: Column, ruleVersion: Column, ruleExpr: Column, ruleEngineSalience: Column, ruleEngineId: Column, ruleEngineVersion: Column): RuleSuiteMap", "member" : "com.sparkutils.quality.utils.SerializingImports.readRulesFromDF", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#readRulesFromDF(df:org.apache.spark.sql.DataFrame,ruleSuiteId:org.apache.spark.sql.Column,ruleSuiteVersion:org.apache.spark.sql.Column,ruleSetId:org.apache.spark.sql.Column,ruleSetVersion:org.apache.spark.sql.Column,ruleId:org.apache.spark.sql.Column,ruleVersion:org.apache.spark.sql.Column,ruleExpr:org.apache.spark.sql.Column,ruleEngineSalience:org.apache.spark.sql.Column,ruleEngineId:org.apache.spark.sql.Column,ruleEngineVersion:org.apache.spark.sql.Column):com.sparkutils.quality.RuleModel.RuleSuiteMap", "kind" : "def"}, {"label" : "readRulesFromDF", "tail" : "(df: DataFrame, ruleSuiteId: Column, ruleSuiteVersion: Column, ruleSetId: Column, ruleSetVersion: Column, ruleId: Column, ruleVersion: Column, ruleExpr: Column): RuleSuiteMap", "member" : "com.sparkutils.quality.utils.SerializingImports.readRulesFromDF", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#readRulesFromDF(df:org.apache.spark.sql.DataFrame,ruleSuiteId:org.apache.spark.sql.Column,ruleSuiteVersion:org.apache.spark.sql.Column,ruleSetId:org.apache.spark.sql.Column,ruleSetVersion:org.apache.spark.sql.Column,ruleId:org.apache.spark.sql.Column,ruleVersion:org.apache.spark.sql.Column,ruleExpr:org.apache.spark.sql.Column):com.sparkutils.quality.RuleModel.RuleSuiteMap", "kind" : "def"}, {"label" : "toSeq", "tail" : "(ruleSuiteMap: RuleSuiteMap): RuleSuiteMap", "member" : "com.sparkutils.quality.utils.SerializingImports.toSeq", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#toSeq(ruleSuiteMap:com.sparkutils.quality.RuleModel.RuleSuiteMap):com.sparkutils.quality.RuleModel.RuleSuiteMap", "kind" : "def"}, {"label" : "toSeq", "tail" : "(ruleSuite: RuleSuite): RuleSuite", "member" : "com.sparkutils.quality.utils.SerializingImports.toSeq", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#toSeq(ruleSuite:com.sparkutils.quality.RuleSuite):com.sparkutils.quality.RuleSuite", "kind" : "def"}, {"label" : "readMetaRuleSetsFromDF", "tail" : "(metaRuleSetDF: DataFrame, columnSelectionExpression: Column, lambdaFunctionExpression: Column, metaRuleSetId: Column, metaRuleSetVersion: Column, metaRuleSuiteId: Column, metaRuleSuiteVersion: Column): Map[Id, Seq[MetaRuleSetRow]]", "member" : "com.sparkutils.quality.utils.SerializingImports.readMetaRuleSetsFromDF", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#readMetaRuleSetsFromDF(metaRuleSetDF:org.apache.spark.sql.DataFrame,columnSelectionExpression:org.apache.spark.sql.Column,lambdaFunctionExpression:org.apache.spark.sql.Column,metaRuleSetId:org.apache.spark.sql.Column,metaRuleSetVersion:org.apache.spark.sql.Column,metaRuleSuiteId:org.apache.spark.sql.Column,metaRuleSuiteVersion:org.apache.spark.sql.Column):Map[com.sparkutils.quality.Id,Seq[com.sparkutils.quality.MetaRuleSetRow]]", "kind" : "def"}, {"label" : "readOutputExpressionsFromDF", "tail" : "(outputExpressionDF: DataFrame, outputExpression: Column, outputExpressionId: Column, outputExpressionVersion: Column, outputExpressionRuleSuiteId: Column, outputExpressionRuleSuiteVersion: Column): Map[Id, Seq[OutputExpressionRow]]", "member" : "com.sparkutils.quality.utils.SerializingImports.readOutputExpressionsFromDF", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#readOutputExpressionsFromDF(outputExpressionDF:org.apache.spark.sql.DataFrame,outputExpression:org.apache.spark.sql.Column,outputExpressionId:org.apache.spark.sql.Column,outputExpressionVersion:org.apache.spark.sql.Column,outputExpressionRuleSuiteId:org.apache.spark.sql.Column,outputExpressionRuleSuiteVersion:org.apache.spark.sql.Column):Map[com.sparkutils.quality.Id,Seq[com.sparkutils.quality.OutputExpressionRow]]", "kind" : "def"}, {"label" : "readLambdasFromDF", "tail" : "(lambdaFunctionDF: DataFrame, lambdaFunctionName: Column, lambdaFunctionExpression: Column, lambdaFunctionId: Column, lambdaFunctionVersion: Column, lambdaFunctionRuleSuiteId: Column, lambdaFunctionRuleSuiteVersion: Column): Map[Id, Seq[LambdaFunction]]", "member" : "com.sparkutils.quality.utils.SerializingImports.readLambdasFromDF", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#readLambdasFromDF(lambdaFunctionDF:org.apache.spark.sql.DataFrame,lambdaFunctionName:org.apache.spark.sql.Column,lambdaFunctionExpression:org.apache.spark.sql.Column,lambdaFunctionId:org.apache.spark.sql.Column,lambdaFunctionVersion:org.apache.spark.sql.Column,lambdaFunctionRuleSuiteId:org.apache.spark.sql.Column,lambdaFunctionRuleSuiteVersion:org.apache.spark.sql.Column):Map[com.sparkutils.quality.Id,Seq[com.sparkutils.quality.LambdaFunction]]", "kind" : "def"}, {"label" : "integrateMetaRuleSets", "tail" : "(dataFrame: DataFrame, ruleSuiteMap: RuleSuiteMap, metaRuleSetMap: Map[Id, Seq[MetaRuleSetRow]], stablePosition: (String) ⇒ Int, transform: (DataFrame) ⇒ DataFrame): RuleSuiteMap", "member" : "com.sparkutils.quality.utils.SerializingImports.integrateMetaRuleSets", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#integrateMetaRuleSets(dataFrame:org.apache.spark.sql.DataFrame,ruleSuiteMap:com.sparkutils.quality.RuleModel.RuleSuiteMap,metaRuleSetMap:Map[com.sparkutils.quality.Id,Seq[com.sparkutils.quality.MetaRuleSetRow]],stablePosition:String=>Int,transform:org.apache.spark.sql.DataFrame=>org.apache.spark.sql.DataFrame):com.sparkutils.quality.RuleModel.RuleSuiteMap", "kind" : "def"}, {"label" : "integrateOutputExpressions", "tail" : "(ruleSuiteMap: RuleSuiteMap, outputs: Map[Id, Seq[OutputExpressionRow]], globalLibrary: Option[Id]): (RuleSuiteMap, Map[Id, Set[Rule]])", "member" : "com.sparkutils.quality.utils.SerializingImports.integrateOutputExpressions", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#integrateOutputExpressions(ruleSuiteMap:com.sparkutils.quality.RuleModel.RuleSuiteMap,outputs:Map[com.sparkutils.quality.Id,Seq[com.sparkutils.quality.OutputExpressionRow]],globalLibrary:Option[com.sparkutils.quality.Id]):(com.sparkutils.quality.RuleModel.RuleSuiteMap,Map[com.sparkutils.quality.Id,Set[com.sparkutils.quality.Rule]])", "kind" : "def"}, {"label" : "iIntegrateOutputExpressions", "tail" : "(ruleSuiteMap: RuleSuiteMap, outputs: Map[Id, Seq[OutputExpressionRow]], globalLibrary: Option[Id], get: (Id) ⇒ Option[Seq[OutputExpressionRow]]): (RuleSuiteMap, Map[Id, Set[Rule]])", "member" : "com.sparkutils.quality.utils.SerializingImports.iIntegrateOutputExpressions", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#iIntegrateOutputExpressions(ruleSuiteMap:com.sparkutils.quality.RuleModel.RuleSuiteMap,outputs:Map[com.sparkutils.quality.Id,Seq[com.sparkutils.quality.OutputExpressionRow]],globalLibrary:Option[com.sparkutils.quality.Id],get:com.sparkutils.quality.Id=>Option[Seq[com.sparkutils.quality.OutputExpressionRow]]):(com.sparkutils.quality.RuleModel.RuleSuiteMap,Map[com.sparkutils.quality.Id,Set[com.sparkutils.quality.Rule]])", "kind" : "def"}, {"label" : "integrateLambdas", "tail" : "(ruleSuiteMap: RuleSuiteMap, lambdas: Map[Id, Seq[LambdaFunction]], globalLibrary: Option[Id]): RuleSuiteMap", "member" : "com.sparkutils.quality.utils.SerializingImports.integrateLambdas", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#integrateLambdas(ruleSuiteMap:com.sparkutils.quality.RuleModel.RuleSuiteMap,lambdas:Map[com.sparkutils.quality.Id,Seq[com.sparkutils.quality.LambdaFunction]],globalLibrary:Option[com.sparkutils.quality.Id]):com.sparkutils.quality.RuleModel.RuleSuiteMap", "kind" : "def"}, {"label" : "iIntegrateLambdas", "tail" : "(ruleSuiteMap: RuleSuiteMap, lambdas: Map[Id, Seq[LambdaFunction]], globalLibrary: Option[Id], get: (Id) ⇒ Option[Seq[LambdaFunction]]): RuleSuiteMap", "member" : "com.sparkutils.quality.utils.SerializingImports.iIntegrateLambdas", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#iIntegrateLambdas(ruleSuiteMap:com.sparkutils.quality.RuleModel.RuleSuiteMap,lambdas:Map[com.sparkutils.quality.Id,Seq[com.sparkutils.quality.LambdaFunction]],globalLibrary:Option[com.sparkutils.quality.Id],get:com.sparkutils.quality.Id=>Option[Seq[com.sparkutils.quality.LambdaFunction]]):com.sparkutils.quality.RuleModel.RuleSuiteMap", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/SerializingImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/utils\/SerializingImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.utils.StructFunctions", "shortDescription" : "The simple UpdateFields(exps(0), RuleRunnerFunctions.getString(exps(1)), exps(2)) does not work on 3.1.1As such the sme approach must be taken.", "object" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html", "members_object" : [{"label" : "withFieldFunction", "tail" : ": (Seq[Expression]) ⇒ AddFields", "member" : "com.sparkutils.quality.utils.StructFunctions.withFieldFunction", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#withFieldFunction:Seq[org.apache.spark.sql.catalyst.expressions.Expression]=>com.sparkutils.quality.utils.AddFields", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/StructFunctions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.utils.Testing", "shortDescription" : "Signifies that testing is being done, it should be ignored by users.", "object" : "com\/sparkutils\/quality\/utils\/Testing$.html", "members_object" : [{"label" : "testing", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.utils.Testing.testing", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#testing:Boolean", "kind" : "def"}, {"label" : "setTesting", "tail" : "(): Unit", "member" : "com.sparkutils.quality.utils.Testing.setTesting", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#setTesting():Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Testing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.utils.Tr1", "shortDescription" : "", "members_case class" : [{"label" : "fold", "tail" : "(a: (A) ⇒ R, b: (Nothing) ⇒ R, c: (Nothing) ⇒ R): R", "member" : "com.sparkutils.quality.utils.Tr1.fold", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#fold[R](a:A=>R,b:Nothing=>R,c:Nothing=>R):R", "kind" : "def"}, {"label" : "getC", "tail" : "(): Nothing", "member" : "com.sparkutils.quality.utils.Tr1.getC", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#getC:Nothing", "kind" : "def"}, {"label" : "getB", "tail" : "(): Nothing", "member" : "com.sparkutils.quality.utils.Tr1.getB", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#getB:Nothing", "kind" : "def"}, {"label" : "getA", "tail" : ": A", "member" : "com.sparkutils.quality.utils.Tr1.getA", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#getA:A", "kind" : "val"}, {"label" : "isC", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.Tr1.isC", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#isC:Boolean", "kind" : "val"}, {"label" : "isB", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.Tr1.isB", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#isB:Boolean", "kind" : "val"}, {"label" : "isA", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.Tr1.isA", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#isA:Boolean", "kind" : "val"}, {"member" : "com.sparkutils.quality.utils.Tr1#<init>", "error" : "unsupported entity"}, {"label" : "a", "tail" : ": A", "member" : "com.sparkutils.quality.utils.Tr1.a", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#a:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Tr1.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/Tr1.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.Tr2", "shortDescription" : "", "members_case class" : [{"label" : "fold", "tail" : "(a: (Nothing) ⇒ R, b: (B) ⇒ R, c: (Nothing) ⇒ R): R", "member" : "com.sparkutils.quality.utils.Tr2.fold", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#fold[R](a:Nothing=>R,b:B=>R,c:Nothing=>R):R", "kind" : "def"}, {"label" : "getC", "tail" : "(): Nothing", "member" : "com.sparkutils.quality.utils.Tr2.getC", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#getC:Nothing", "kind" : "def"}, {"label" : "getB", "tail" : ": B", "member" : "com.sparkutils.quality.utils.Tr2.getB", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#getB:B", "kind" : "val"}, {"label" : "getA", "tail" : "(): Nothing", "member" : "com.sparkutils.quality.utils.Tr2.getA", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#getA:Nothing", "kind" : "def"}, {"label" : "isC", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.Tr2.isC", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#isC:Boolean", "kind" : "val"}, {"label" : "isB", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.Tr2.isB", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#isB:Boolean", "kind" : "val"}, {"label" : "isA", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.Tr2.isA", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#isA:Boolean", "kind" : "val"}, {"member" : "com.sparkutils.quality.utils.Tr2#<init>", "error" : "unsupported entity"}, {"label" : "b", "tail" : ": B", "member" : "com.sparkutils.quality.utils.Tr2.b", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#b:B", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Tr2.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/Tr2.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.Tr3", "shortDescription" : "", "members_case class" : [{"label" : "fold", "tail" : "(a: (Nothing) ⇒ R, b: (Nothing) ⇒ R, c: (C) ⇒ R): R", "member" : "com.sparkutils.quality.utils.Tr3.fold", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#fold[R](a:Nothing=>R,b:Nothing=>R,c:C=>R):R", "kind" : "def"}, {"label" : "getC", "tail" : ": C", "member" : "com.sparkutils.quality.utils.Tr3.getC", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#getC:C", "kind" : "val"}, {"label" : "getB", "tail" : "(): Nothing", "member" : "com.sparkutils.quality.utils.Tr3.getB", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#getB:Nothing", "kind" : "def"}, {"label" : "getA", "tail" : "(): Nothing", "member" : "com.sparkutils.quality.utils.Tr3.getA", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#getA:Nothing", "kind" : "def"}, {"label" : "isC", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.Tr3.isC", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#isC:Boolean", "kind" : "val"}, {"label" : "isB", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.Tr3.isB", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#isB:Boolean", "kind" : "val"}, {"label" : "isA", "tail" : ": Boolean", "member" : "com.sparkutils.quality.utils.Tr3.isA", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#isA:Boolean", "kind" : "val"}, {"member" : "com.sparkutils.quality.utils.Tr3#<init>", "error" : "unsupported entity"}, {"label" : "c", "tail" : ": C", "member" : "com.sparkutils.quality.utils.Tr3.c", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#c:C", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/Tr3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/Tr3.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.TransientHolder", "shortDescription" : "", "members_case class" : [{"label" : "reset", "tail" : "(): Unit", "member" : "com.sparkutils.quality.utils.TransientHolder.reset", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#reset:Unit", "kind" : "def"}, {"label" : "get", "tail" : "(): T", "member" : "com.sparkutils.quality.utils.TransientHolder.get", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#get():T", "kind" : "def"}, {"member" : "com.sparkutils.quality.utils.TransientHolder#<init>", "error" : "unsupported entity"}, {"label" : "initialise", "tail" : ": () ⇒ T", "member" : "com.sparkutils.quality.utils.TransientHolder.initialise", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#initialise:()=>T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/TransientHolder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/TransientHolder.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.TrEither", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fold", "tail" : "(a: (A) ⇒ R, b: (B) ⇒ R, c: (C) ⇒ R): R", "member" : "com.sparkutils.quality.utils.TrEither.fold", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#fold[R](a:A=>R,b:B=>R,c:C=>R):R", "kind" : "abstract def"}, {"label" : "getC", "tail" : "(): C", "member" : "com.sparkutils.quality.utils.TrEither.getC", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#getC:C", "kind" : "abstract def"}, {"label" : "getB", "tail" : "(): B", "member" : "com.sparkutils.quality.utils.TrEither.getB", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#getB:B", "kind" : "abstract def"}, {"label" : "getA", "tail" : "(): A", "member" : "com.sparkutils.quality.utils.TrEither.getA", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#getA:A", "kind" : "abstract def"}, {"label" : "isC", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.utils.TrEither.isC", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#isC:Boolean", "kind" : "abstract def"}, {"label" : "isB", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.utils.TrEither.isB", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#isB:Boolean", "kind" : "abstract def"}, {"label" : "isA", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.utils.TrEither.isA", "link" : "com\/sparkutils\/quality\/utils\/TrEither.html#isA:Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/utils\/TrEither.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.utils.TSLocal", "shortDescription" : "", "members_case class" : [{"label" : "get", "tail" : "(): T", "member" : "com.sparkutils.quality.utils.TSLocal.get", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#get():T", "kind" : "def"}, {"member" : "com.sparkutils.quality.utils.TSLocal#<init>", "error" : "unsupported entity"}, {"label" : "initialValue", "tail" : ": () ⇒ T", "member" : "com.sparkutils.quality.utils.TSLocal.initialValue", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#initialValue:()=>T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/TSLocal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/TSLocal.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.utils.WithDocs", "shortDescription" : "Simple holder for items within a RuleSuite", "members_case class" : [{"member" : "com.sparkutils.quality.utils.WithDocs#<init>", "error" : "unsupported entity"}, {"label" : "docs", "tail" : ": Docs", "member" : "com.sparkutils.quality.utils.WithDocs.docs", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#docs:com.sparkutils.quality.utils.Docs", "kind" : "val"}, {"label" : "t", "tail" : ": T", "member" : "com.sparkutils.quality.utils.WithDocs.t", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#t:T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/utils\/WithDocs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/utils\/WithDocs.html", "kind" : "case class"}], "com.sparkutils.quality.impl.longPair" : [{"name" : "com.sparkutils.quality.impl.longPair.LongPair", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html", "members_object" : [{"label" : "structType", "tail" : ": StructType", "member" : "com.sparkutils.quality.impl.longPair.LongPair.structType", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#structType:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPair$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.longPair.LongPairExpression", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html", "members_object" : [{"label" : "genRow", "tail" : "(input1: Any, input2: Any): InternalRow", "member" : "com.sparkutils.quality.impl.longPair.LongPairExpression.genRow", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#genRow(input1:Any,input2:Any):org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newLeft: Expression, newRight: Expression): Expression", "member" : "com.sparkutils.quality.impl.longPair.LongPairExpression.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#withNewChildrenInternal(newLeft:org.apache.spark.sql.catalyst.expressions.Expression,newRight:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.longPair.LongPairExpression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.longPair.LongPairExpression.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.longPair.LongPairExpression.sql", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#sql:String", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.longPair.LongPairExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input1: Any, input2: Any): Any", "member" : "com.sparkutils.quality.impl.longPair.LongPairExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#nullSafeEval(input1:Any,input2:Any):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.longPair.LongPairExpression#<init>", "error" : "unsupported entity"}, {"label" : "right", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.longPair.LongPairExpression.right", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#right:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "left", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.longPair.LongPairExpression.left", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#left:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/longPair\/LongPairExpression.html", "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair", "shortDescription" : "Takes a prefixed lower and upper long pair field, must be 128bit with the provided prefix and converts to lower and higher for other functions", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair.sql", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#sql:String", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair.dataType", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input1: Any): Any", "member" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#nullSafeEval(input1:Any):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair#<init>", "error" : "unsupported entity"}, {"label" : "prefix", "tail" : ": String", "member" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair.prefix", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#prefix:String", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.longPair.PrefixedToLongPair.child", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/longPair\/PrefixedToLongPair.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.longPair.RowIDExpressionImports", "members_trait" : [{"label" : "registerLongPairFunction", "tail" : "(bloomFilterMap: quality.BloomFilterMap): Unit", "member" : "com.sparkutils.quality.impl.longPair.RowIDExpressionImports.registerLongPairFunction", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#registerLongPairFunction(bloomFilterMap:com.sparkutils.quality.BloomFilterMap):Unit", "kind" : "def"}, {"label" : "rowIDExpression", "tail" : "(rng: Column, bloomLookupId: Column, bloomFilterMap: quality.BloomFilterMap): Column", "member" : "com.sparkutils.quality.impl.longPair.RowIDExpressionImports.rowIDExpression", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#rowIDExpression(rng:org.apache.spark.sql.Column,bloomLookupId:org.apache.spark.sql.Column,bloomFilterMap:com.sparkutils.quality.BloomFilterMap):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/longPair\/RowIDExpressionImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression", "shortDescription" : "Creates longPairs using an rng and a bloom to lookup generated ids", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newLeft: Expression, newRight: Expression): Expression", "member" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#withNewChildrenInternal(newLeft:org.apache.spark.sql.catalyst.expressions.Expression,newRight:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression.sql", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#sql:String", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "converter", "tail" : ": (Any) ⇒ Any", "member" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression.converter", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#converter:Any=>Any", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression#<init>", "error" : "unsupported entity"}, {"label" : "bloomMap", "tail" : ": quality.BloomFilterMap", "member" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression.bloomMap", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#bloomMap:com.sparkutils.quality.BloomFilterMap", "kind" : "val"}, {"label" : "right", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression.right", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#right:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "left", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.longPair.SaferLongPairsExpression.left", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#left:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input1: Any, input2: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#nullSafeEval(input1:Any,input2:Any):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/longPair\/SaferLongPairsExpression.html", "kind" : "case class"}], "com.sparkutils.quality.impl.rng" : [{"name" : "com.sparkutils.quality.impl.rng.Jumpable", "members_trait" : [{"label" : "reSeedOrBranch", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.Jumpable.reSeedOrBranch", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#reSeedOrBranch(seed:Long):Unit", "kind" : "def"}, {"label" : "branch", "tail" : "(): Unit", "member" : "com.sparkutils.quality.impl.rng.Jumpable.branch", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#branch:Unit", "kind" : "def"}, {"label" : "nextLong", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextLong", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#nextLong():Long", "kind" : "def"}, {"label" : "nextBytes", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#nextBytes():Array[Byte]", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RngImpl.isNull", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#isNull:Boolean", "kind" : "def"}, {"label" : "reSeed", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#reSeed(seed:Long):Unit", "kind" : "def"}, {"label" : "rng", "tail" : ": Provider", "member" : "com.sparkutils.quality.impl.rng.RngImpl.rng", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#rng:RngImpl.this.Provider", "kind" : "val"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "com.sparkutils.quality.impl.rng.Jumpable.Provider", "error" : "unsupported entity"}, {"member" : "com.sparkutils.quality.impl.rng.Jumpable.ThisType", "error" : "unsupported entity"}, {"label" : "freshCopy", "tail" : "(): ThisType", "member" : "com.sparkutils.quality.impl.rng.RngImpl.freshCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#freshCopy():RngImpl.this.ThisType", "kind" : "abstract def"}, {"label" : "numBytes", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.rng.RngImpl.numBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#numBytes:Int", "kind" : "abstract def"}, {"label" : "source", "tail" : "(): RandomSource", "member" : "com.sparkutils.quality.impl.rng.RngImpl.source", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#source:org.apache.commons.rng.simple.RandomSource", "kind" : "abstract def"}, {"label" : "definedSeed", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.definedSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#definedSeed:Long", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "Supports jumping to enable multiple threads to run in isolation", "trait" : "com\/sparkutils\/quality\/impl\/rng\/Jumpable.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.rng.RandBytes", "shortDescription" : "Base implementation for random number byte generation with pluggable implementations", "members_class" : [{"label" : "seedExpression", "tail" : "(): Expression", "member" : "com.sparkutils.quality.impl.rng.RandBytes.seedExpression", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#seedExpression:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "evalInternal", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.rng.RandBytes.evalInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#evalInternal(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "initializeInternal", "tail" : "(partitionIndex: Int): Unit", "member" : "com.sparkutils.quality.impl.rng.RandBytes.initializeInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#initializeInternal(partitionIndex:Int):Unit", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.rng.RandBytes.dataType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RandBytes.nullable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#nullable:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.rng.RandBytes.resolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "withNewSeed", "tail" : "(seed: Long): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandBytes.withNewSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#withNewSeed(seed:Long):RandBytes.this.ThisType", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.rng.RandBytes#<init>", "error" : "unsupported entity"}, {"label" : "nextLong", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextLong", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#nextLong():Long", "kind" : "def"}, {"label" : "nextBytes", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#nextBytes():Array[Byte]", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RngImpl.isNull", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#isNull:Boolean", "kind" : "def"}, {"label" : "reSeedOrBranch", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeedOrBranch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#reSeedOrBranch(seed:Long):Unit", "kind" : "def"}, {"label" : "reSeed", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#reSeed(seed:Long):Unit", "kind" : "def"}, {"label" : "branch", "tail" : "(): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.branch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#branch:Unit", "kind" : "def"}, {"label" : "rng", "tail" : ": Provider", "member" : "com.sparkutils.quality.impl.rng.RngImpl.rng", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#rng:RngImpl.this.Provider", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.ExpressionWithRandomSeed.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Stateful.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.eval", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "initialize", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initialize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#initialize(partitionIndex:Int):Unit", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.foldable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#foldable:Boolean", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.deterministic", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#deterministic:Boolean", "kind" : "final lazy val"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "com.sparkutils.quality.impl.rng.RandBytes.ThisType", "error" : "unsupported entity"}, {"label" : "freshCopy", "tail" : "(): ThisType", "member" : "com.sparkutils.quality.impl.rng.RngImpl.freshCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#freshCopy():RngImpl.this.ThisType", "kind" : "abstract def"}, {"label" : "numBytes", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.rng.RngImpl.numBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#numBytes:Int", "kind" : "abstract def"}, {"label" : "source", "tail" : "(): RandomSource", "member" : "com.sparkutils.quality.impl.rng.RngImpl.source", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#source:org.apache.commons.rng.simple.RandomSource", "kind" : "abstract def"}, {"label" : "definedSeed", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.definedSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#definedSeed:Long", "kind" : "abstract def"}, {"member" : "com.sparkutils.quality.impl.rng.RngImpl.Provider", "error" : "unsupported entity"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "class" : "com\/sparkutils\/quality\/impl\/rng\/RandBytes.html", "kind" : "class"}, {"name" : "com.sparkutils.quality.impl.rng.RandBytesNonJump", "shortDescription" : "", "members_case class" : [{"label" : "freshCopy", "tail" : "(): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandBytesNonJump.freshCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#freshCopy():RandBytesNonJump.this.ThisType", "kind" : "def"}, {"label" : "ThisType", "tail" : "", "member" : "com.sparkutils.quality.impl.rng.RandBytesNonJump.ThisType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#ThisType=com.sparkutils.quality.impl.rng.RandBytesNonJump", "kind" : "type"}, {"member" : "com.sparkutils.quality.impl.rng.RandBytesNonJump#<init>", "error" : "unsupported entity"}, {"label" : "source", "tail" : ": RandomSource", "member" : "com.sparkutils.quality.impl.rng.RandBytesNonJump.source", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#source:org.apache.commons.rng.simple.RandomSource", "kind" : "val"}, {"label" : "numBytes", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.rng.RandBytesNonJump.numBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#numBytes:Int", "kind" : "val"}, {"label" : "definedSeed", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.rng.RandBytesNonJump.definedSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#definedSeed:Long", "kind" : "val"}, {"label" : "seedExpression", "tail" : "(): Expression", "member" : "com.sparkutils.quality.impl.rng.RandBytes.seedExpression", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#seedExpression:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "evalInternal", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.rng.RandBytes.evalInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#evalInternal(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "initializeInternal", "tail" : "(partitionIndex: Int): Unit", "member" : "com.sparkutils.quality.impl.rng.RandBytes.initializeInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#initializeInternal(partitionIndex:Int):Unit", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.rng.RandBytes.dataType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RandBytes.nullable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#nullable:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.rng.RandBytes.resolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "withNewSeed", "tail" : "(seed: Long): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandBytes.withNewSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#withNewSeed(seed:Long):RandBytes.this.ThisType", "kind" : "def"}, {"label" : "nextLong", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextLong", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#nextLong():Long", "kind" : "def"}, {"label" : "nextBytes", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#nextBytes():Array[Byte]", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RngImpl.isNull", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#isNull:Boolean", "kind" : "def"}, {"label" : "reSeedOrBranch", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeedOrBranch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#reSeedOrBranch(seed:Long):Unit", "kind" : "def"}, {"label" : "reSeed", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#reSeed(seed:Long):Unit", "kind" : "def"}, {"label" : "branch", "tail" : "(): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.branch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#branch:Unit", "kind" : "def"}, {"label" : "rng", "tail" : ": Provider", "member" : "com.sparkutils.quality.impl.rng.RngImpl.rng", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#rng:RngImpl.this.Provider", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.ExpressionWithRandomSeed.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Stateful.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.eval", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "initialize", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initialize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#initialize(partitionIndex:Int):Unit", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.foldable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#foldable:Boolean", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.deterministic", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#deterministic:Boolean", "kind" : "final lazy val"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "com.sparkutils.quality.impl.rng.RngImpl.Provider", "error" : "unsupported entity"}], "case class" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesNonJump.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.rng.RandBytesWithJump", "shortDescription" : "Creates a Jumpable random number generator", "members_case class" : [{"label" : "freshCopy", "tail" : "(): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandBytesWithJump.freshCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#freshCopy():RandBytesWithJump.this.ThisType", "kind" : "def"}, {"label" : "ThisType", "tail" : "", "member" : "com.sparkutils.quality.impl.rng.RandBytesWithJump.ThisType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#ThisType=com.sparkutils.quality.impl.rng.RandBytesWithJump", "kind" : "type"}, {"member" : "com.sparkutils.quality.impl.rng.RandBytesWithJump#<init>", "error" : "unsupported entity"}, {"label" : "source", "tail" : ": RandomSource", "member" : "com.sparkutils.quality.impl.rng.RandBytesWithJump.source", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#source:org.apache.commons.rng.simple.RandomSource", "kind" : "val"}, {"label" : "numBytes", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.rng.RandBytesWithJump.numBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#numBytes:Int", "kind" : "val"}, {"label" : "definedSeed", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.rng.RandBytesWithJump.definedSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#definedSeed:Long", "kind" : "val"}, {"label" : "reSeedOrBranch", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.Jumpable.reSeedOrBranch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#reSeedOrBranch(seed:Long):Unit", "kind" : "def"}, {"label" : "branch", "tail" : "(): Unit", "member" : "com.sparkutils.quality.impl.rng.Jumpable.branch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#branch:Unit", "kind" : "def"}, {"label" : "seedExpression", "tail" : "(): Expression", "member" : "com.sparkutils.quality.impl.rng.RandBytes.seedExpression", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#seedExpression:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "evalInternal", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.rng.RandBytes.evalInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#evalInternal(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "initializeInternal", "tail" : "(partitionIndex: Int): Unit", "member" : "com.sparkutils.quality.impl.rng.RandBytes.initializeInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#initializeInternal(partitionIndex:Int):Unit", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.rng.RandBytes.dataType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RandBytes.nullable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#nullable:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.rng.RandBytes.resolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "withNewSeed", "tail" : "(seed: Long): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandBytes.withNewSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#withNewSeed(seed:Long):RandBytes.this.ThisType", "kind" : "def"}, {"label" : "nextLong", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextLong", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#nextLong():Long", "kind" : "def"}, {"label" : "nextBytes", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#nextBytes():Array[Byte]", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RngImpl.isNull", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#isNull:Boolean", "kind" : "def"}, {"label" : "reSeed", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#reSeed(seed:Long):Unit", "kind" : "def"}, {"label" : "rng", "tail" : ": Provider", "member" : "com.sparkutils.quality.impl.rng.RngImpl.rng", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#rng:RngImpl.this.Provider", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.ExpressionWithRandomSeed.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Stateful.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.eval", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "initialize", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initialize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#initialize(partitionIndex:Int):Unit", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.foldable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#foldable:Boolean", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.deterministic", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#deterministic:Boolean", "kind" : "final lazy val"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "com.sparkutils.quality.impl.rng.Jumpable.Provider", "error" : "unsupported entity"}], "case class" : "com\/sparkutils\/quality\/impl\/rng\/RandBytesWithJump.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.rng.RandLongs", "shortDescription" : "Base implementation for random number two long (128 bit) generation with pluggable implementations", "members_class" : [{"label" : "seedExpression", "tail" : "(): Expression", "member" : "com.sparkutils.quality.impl.rng.RandLongs.seedExpression", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#seedExpression:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "numBytes", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.rng.RandLongs.numBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#numBytes:Int", "kind" : "def"}, {"label" : "evalInternal", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.rng.RandLongs.evalInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#evalInternal(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "initializeInternal", "tail" : "(partitionIndex: Int): Unit", "member" : "com.sparkutils.quality.impl.rng.RandLongs.initializeInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#initializeInternal(partitionIndex:Int):Unit", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.rng.RandLongs.dataType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RandLongs.nullable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#nullable:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.rng.RandLongs.resolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "withNewSeed", "tail" : "(seed: Long): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandLongs.withNewSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#withNewSeed(seed:Long):RandLongs.this.ThisType", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.rng.RandLongs#<init>", "error" : "unsupported entity"}, {"label" : "nextLong", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextLong", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#nextLong():Long", "kind" : "def"}, {"label" : "nextBytes", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#nextBytes():Array[Byte]", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RngImpl.isNull", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#isNull:Boolean", "kind" : "def"}, {"label" : "reSeedOrBranch", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeedOrBranch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#reSeedOrBranch(seed:Long):Unit", "kind" : "def"}, {"label" : "reSeed", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#reSeed(seed:Long):Unit", "kind" : "def"}, {"label" : "branch", "tail" : "(): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.branch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#branch:Unit", "kind" : "def"}, {"label" : "rng", "tail" : ": Provider", "member" : "com.sparkutils.quality.impl.rng.RngImpl.rng", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#rng:RngImpl.this.Provider", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.ExpressionWithRandomSeed.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Stateful.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.eval", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "initialize", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initialize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#initialize(partitionIndex:Int):Unit", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.foldable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#foldable:Boolean", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.deterministic", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#deterministic:Boolean", "kind" : "final lazy val"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "com.sparkutils.quality.impl.rng.RandLongs.ThisType", "error" : "unsupported entity"}, {"label" : "freshCopy", "tail" : "(): ThisType", "member" : "com.sparkutils.quality.impl.rng.RngImpl.freshCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#freshCopy():RngImpl.this.ThisType", "kind" : "abstract def"}, {"label" : "source", "tail" : "(): RandomSource", "member" : "com.sparkutils.quality.impl.rng.RngImpl.source", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#source:org.apache.commons.rng.simple.RandomSource", "kind" : "abstract def"}, {"label" : "definedSeed", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.definedSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#definedSeed:Long", "kind" : "abstract def"}, {"member" : "com.sparkutils.quality.impl.rng.RngImpl.Provider", "error" : "unsupported entity"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "class" : "com\/sparkutils\/quality\/impl\/rng\/RandLongs.html", "kind" : "class"}, {"name" : "com.sparkutils.quality.impl.rng.RandLongsNonJump", "shortDescription" : "", "members_case class" : [{"label" : "freshCopy", "tail" : "(): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandLongsNonJump.freshCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#freshCopy():RandLongsNonJump.this.ThisType", "kind" : "def"}, {"label" : "ThisType", "tail" : "", "member" : "com.sparkutils.quality.impl.rng.RandLongsNonJump.ThisType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#ThisType=com.sparkutils.quality.impl.rng.RandLongsNonJump", "kind" : "type"}, {"member" : "com.sparkutils.quality.impl.rng.RandLongsNonJump#<init>", "error" : "unsupported entity"}, {"label" : "source", "tail" : ": RandomSource", "member" : "com.sparkutils.quality.impl.rng.RandLongsNonJump.source", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#source:org.apache.commons.rng.simple.RandomSource", "kind" : "val"}, {"label" : "definedSeed", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.rng.RandLongsNonJump.definedSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#definedSeed:Long", "kind" : "val"}, {"label" : "seedExpression", "tail" : "(): Expression", "member" : "com.sparkutils.quality.impl.rng.RandLongs.seedExpression", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#seedExpression:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "numBytes", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.rng.RandLongs.numBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#numBytes:Int", "kind" : "def"}, {"label" : "evalInternal", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.rng.RandLongs.evalInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#evalInternal(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "initializeInternal", "tail" : "(partitionIndex: Int): Unit", "member" : "com.sparkutils.quality.impl.rng.RandLongs.initializeInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#initializeInternal(partitionIndex:Int):Unit", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.rng.RandLongs.dataType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RandLongs.nullable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#nullable:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.rng.RandLongs.resolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "withNewSeed", "tail" : "(seed: Long): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandLongs.withNewSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#withNewSeed(seed:Long):RandLongs.this.ThisType", "kind" : "def"}, {"label" : "nextLong", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextLong", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#nextLong():Long", "kind" : "def"}, {"label" : "nextBytes", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#nextBytes():Array[Byte]", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RngImpl.isNull", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#isNull:Boolean", "kind" : "def"}, {"label" : "reSeedOrBranch", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeedOrBranch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#reSeedOrBranch(seed:Long):Unit", "kind" : "def"}, {"label" : "reSeed", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#reSeed(seed:Long):Unit", "kind" : "def"}, {"label" : "branch", "tail" : "(): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.branch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#branch:Unit", "kind" : "def"}, {"label" : "rng", "tail" : ": Provider", "member" : "com.sparkutils.quality.impl.rng.RngImpl.rng", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#rng:RngImpl.this.Provider", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.ExpressionWithRandomSeed.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Stateful.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.eval", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "initialize", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initialize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#initialize(partitionIndex:Int):Unit", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.foldable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#foldable:Boolean", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.deterministic", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#deterministic:Boolean", "kind" : "final lazy val"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "com.sparkutils.quality.impl.rng.RngImpl.Provider", "error" : "unsupported entity"}], "case class" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsNonJump.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.rng.RandLongsWithJump", "shortDescription" : "Creates a Jumpable random number generator", "members_case class" : [{"label" : "freshCopy", "tail" : "(): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandLongsWithJump.freshCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#freshCopy():RandLongsWithJump.this.ThisType", "kind" : "def"}, {"label" : "ThisType", "tail" : "", "member" : "com.sparkutils.quality.impl.rng.RandLongsWithJump.ThisType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#ThisType=com.sparkutils.quality.impl.rng.RandLongsWithJump", "kind" : "type"}, {"member" : "com.sparkutils.quality.impl.rng.RandLongsWithJump#<init>", "error" : "unsupported entity"}, {"label" : "source", "tail" : ": RandomSource", "member" : "com.sparkutils.quality.impl.rng.RandLongsWithJump.source", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#source:org.apache.commons.rng.simple.RandomSource", "kind" : "val"}, {"label" : "definedSeed", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.rng.RandLongsWithJump.definedSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#definedSeed:Long", "kind" : "val"}, {"label" : "reSeedOrBranch", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.Jumpable.reSeedOrBranch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#reSeedOrBranch(seed:Long):Unit", "kind" : "def"}, {"label" : "branch", "tail" : "(): Unit", "member" : "com.sparkutils.quality.impl.rng.Jumpable.branch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#branch:Unit", "kind" : "def"}, {"label" : "seedExpression", "tail" : "(): Expression", "member" : "com.sparkutils.quality.impl.rng.RandLongs.seedExpression", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#seedExpression:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "numBytes", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.rng.RandLongs.numBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#numBytes:Int", "kind" : "def"}, {"label" : "evalInternal", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.rng.RandLongs.evalInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#evalInternal(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "initializeInternal", "tail" : "(partitionIndex: Int): Unit", "member" : "com.sparkutils.quality.impl.rng.RandLongs.initializeInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#initializeInternal(partitionIndex:Int):Unit", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.rng.RandLongs.dataType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RandLongs.nullable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#nullable:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.rng.RandLongs.resolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "withNewSeed", "tail" : "(seed: Long): ThisType", "member" : "com.sparkutils.quality.impl.rng.RandLongs.withNewSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#withNewSeed(seed:Long):RandLongs.this.ThisType", "kind" : "def"}, {"label" : "nextLong", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextLong", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#nextLong():Long", "kind" : "def"}, {"label" : "nextBytes", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#nextBytes():Array[Byte]", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RngImpl.isNull", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#isNull:Boolean", "kind" : "def"}, {"label" : "reSeed", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#reSeed(seed:Long):Unit", "kind" : "def"}, {"label" : "rng", "tail" : ": Provider", "member" : "com.sparkutils.quality.impl.rng.RngImpl.rng", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#rng:RngImpl.this.Provider", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.ExpressionWithRandomSeed.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Stateful.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.eval", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "initialize", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initialize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#initialize(partitionIndex:Int):Unit", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.foldable", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#foldable:Boolean", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.deterministic", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#deterministic:Boolean", "kind" : "final lazy val"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"member" : "com.sparkutils.quality.impl.rng.Jumpable.Provider", "error" : "unsupported entity"}], "case class" : "com\/sparkutils\/quality\/impl\/rng\/RandLongsWithJump.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.rng.RandomBytes", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html", "members_object" : [{"label" : "apply", "tail" : "(numBytes: Int, randomSource: RandomSource, seed: Long): Expression", "member" : "com.sparkutils.quality.impl.rng.RandomBytes.apply", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#apply(numBytes:Int,randomSource:org.apache.commons.rng.simple.RandomSource,seed:Long):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "apply", "tail" : "(randomSource: RandomSource, numBytes: Int, seed: Long): Column", "member" : "com.sparkutils.quality.impl.rng.RandomBytes.apply", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#apply(randomSource:org.apache.commons.rng.simple.RandomSource,numBytes:Int,seed:Long):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomBytes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.rng.RandomLongs", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html", "members_object" : [{"label" : "create", "tail" : "(randomSource: RandomSource, seed: Long): Expression", "member" : "com.sparkutils.quality.impl.rng.RandomLongs.create", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#create(randomSource:org.apache.commons.rng.simple.RandomSource,seed:Long):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "apply", "tail" : "(randomSource: RandomSource, seed: Long): Column", "member" : "com.sparkutils.quality.impl.rng.RandomLongs.apply", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#apply(randomSource:org.apache.commons.rng.simple.RandomSource,seed:Long):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "structType", "tail" : ": StructType", "member" : "com.sparkutils.quality.impl.rng.RandomLongs.structType", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#structType:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RandomLongs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.rng.RngImpl", "members_trait" : [{"label" : "nextLong", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextLong", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#nextLong():Long", "kind" : "def"}, {"label" : "nextBytes", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.rng.RngImpl.nextBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#nextBytes():Array[Byte]", "kind" : "def"}, {"label" : "isNull", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.rng.RngImpl.isNull", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#isNull:Boolean", "kind" : "def"}, {"label" : "reSeedOrBranch", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeedOrBranch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#reSeedOrBranch(seed:Long):Unit", "kind" : "def"}, {"label" : "reSeed", "tail" : "(seed: Long): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.reSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#reSeed(seed:Long):Unit", "kind" : "def"}, {"label" : "branch", "tail" : "(): Unit", "member" : "com.sparkutils.quality.impl.rng.RngImpl.branch", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#branch:Unit", "kind" : "def"}, {"label" : "rng", "tail" : ": Provider", "member" : "com.sparkutils.quality.impl.rng.RngImpl.rng", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#rng:RngImpl.this.Provider", "kind" : "val"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "freshCopy", "tail" : "(): ThisType", "member" : "com.sparkutils.quality.impl.rng.RngImpl.freshCopy", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#freshCopy():RngImpl.this.ThisType", "kind" : "abstract def"}, {"label" : "numBytes", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.rng.RngImpl.numBytes", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#numBytes:Int", "kind" : "abstract def"}, {"label" : "source", "tail" : "(): RandomSource", "member" : "com.sparkutils.quality.impl.rng.RngImpl.source", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#source:org.apache.commons.rng.simple.RandomSource", "kind" : "abstract def"}, {"label" : "definedSeed", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.rng.RngImpl.definedSeed", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#definedSeed:Long", "kind" : "abstract def"}, {"member" : "com.sparkutils.quality.impl.rng.RngImpl.Provider", "error" : "unsupported entity"}, {"member" : "com.sparkutils.quality.impl.rng.RngImpl.ThisType", "error" : "unsupported entity"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "Provides a default byte array support - other implementations can mix-in as needed", "trait" : "com\/sparkutils\/quality\/impl\/rng\/RngImpl.html", "kind" : "trait"}], "com.sparkutils.quality.impl.bloom.parquet" : [{"name" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html", "members_object" : [{"label" : "createArray", "tail" : "(numBytes: Int, iMinimumBytes: Int, iMaximumBytes: Int): Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.createArray", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#createArray(numBytes:Int,iMinimumBytes:Int,iMaximumBytes:Int):Array[Byte]", "kind" : "def"}, {"label" : "apply", "tail" : "(numBytes: Int, iMinimumBytes: Int, iMaximumBytes: Int, hashImpl: BloomHash): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#apply(numBytes:Int,iMinimumBytes:Int,iMaximumBytes:Int,hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash):com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl", "kind" : "def"}, {"label" : "bufferEquals", "tail" : "(left: IntBuffer, right: IntBuffer): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.bufferEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#bufferEquals(left:java.nio.IntBuffer,right:java.nio.IntBuffer):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(bitset: Array[Byte], hashStrategy: HashStrategy): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#apply(bitset:Array[Byte],hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy):com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl", "kind" : "def"}, {"label" : "apply", "tail" : "(bitset: Array[Byte], hashImpl: BloomHash): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#apply(bitset:Array[Byte],hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash):com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl", "kind" : "def"}, {"label" : "arrayBacked", "tail" : "(bits: Array[Byte]): TransientHolder[BufferAndRaw]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.arrayBacked", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#arrayBacked(bits:Array[Byte]):com.sparkutils.quality.utils.TransientHolder[com.sparkutils.quality.impl.bloom.parquet.BufferAndRaw]", "kind" : "def"}, {"label" : "apply", "tail" : "(bitset: Array[Byte]): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#apply(bitset:Array[Byte]):com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl", "kind" : "def"}, {"label" : "fromBytes", "tail" : "(bitset: Array[Byte]): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.fromBytes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#fromBytes(bitset:Array[Byte]):com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl", "kind" : "def"}, {"label" : "DEFAULT_FPP", "tail" : ": Double", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.DEFAULT_FPP", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#DEFAULT_FPP:Double", "kind" : "val"}, {"label" : "HEADER_SIZE", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.HEADER_SIZE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#HEADER_SIZE:Int", "kind" : "val"}, {"label" : "UPPER_BOUND_BYTES", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.UPPER_BOUND_BYTES", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#UPPER_BOUND_BYTES:Int", "kind" : "val"}, {"label" : "LOWER_BOUND_BYTES", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.LOWER_BOUND_BYTES", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#LOWER_BOUND_BYTES:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "serialized", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.serialized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#serialized:Array[Byte]", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Binary): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#hash(value:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.Binary):Long", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Float): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#hash(value:Float):Long", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Double): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#hash(value:Double):Long", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Long): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#hash(value:Long):Long", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Int): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#hash(value:Int):Long", "kind" : "def"}, {"label" : "getCompression", "tail" : "(): Compression", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.getCompression", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#getCompression:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.Compression", "kind" : "def"}, {"label" : "getAlgorithm", "tail" : "(): Algorithm", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.getAlgorithm", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#getAlgorithm:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.Algorithm", "kind" : "def"}, {"label" : "getHashStrategy", "tail" : "(): HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.getHashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#getHashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "def"}, {"label" : "equals", "tail" : "(other: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#equals(other:Any):Boolean", "kind" : "def"}, {"label" : "getBitsetSize", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.getBitsetSize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#getBitsetSize:Int", "kind" : "def"}, {"label" : "|=", "tail" : "(that: BlockSplitBloomFilterImpl): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.|=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#|=(that:com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl):com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl", "kind" : "def"}, {"label" : "insertHash", "tail" : "(hash: Long): Unit", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.insertHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#insertHash(hash:Long):Unit", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl#<init>", "error" : "unsupported entity"}, {"label" : "intBuffer", "tail" : "(): IntBuffer", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.intBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#intBuffer:java.nio.IntBuffer", "kind" : "def"}, {"label" : "BloomType", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.BloomType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#BloomType=com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl", "kind" : "type"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl#<init>", "error" : "unsupported entity"}, {"label" : "hashImpl", "tail" : ": BloomHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.hashImpl", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash", "kind" : "val"}, {"label" : "intBufferGen", "tail" : ": TransientHolder[BufferAndRaw]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl.intBufferGen", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#intBufferGen:com.sparkutils.quality.utils.TransientHolder[com.sparkutils.quality.impl.bloom.parquet.BufferAndRaw]", "kind" : "val"}, {"label" : "mask", "tail" : "(): Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.mask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#mask:Array[Int]", "kind" : "def"}, {"label" : "cacheBuffer", "tail" : "(): ByteBuffer", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.cacheBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#cacheBuffer:java.nio.ByteBuffer", "kind" : "def"}, {"label" : "hashStrategy", "tail" : "(): HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.hashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "def"}, {"label" : "mightContain", "tail" : "(value: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomLookupImpl.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#mightContain(value:Any):Boolean", "kind" : "def"}, {"label" : "findHash", "tail" : "(hash: Long): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomLookupImpl.findHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#findHash(hash:Long):Boolean", "kind" : "def"}, {"label" : "doHash", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.doHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#doHash:Long", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Any): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#hash(value:Any):Long", "kind" : "def"}, {"label" : "setMask", "tail" : "(key: Int): Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.setMask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#setMask(key:Int):Array[Int]", "kind" : "def"}, {"label" : "hashFunction", "tail" : ": XxHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hashFunction", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#hashFunction:com.sparkutils.quality.impl.bloom.parquet.XxHash", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Any): BloomType", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.+=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#+=(value:Any):BloomFilter.this.BloomType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImpl.html", "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImports", "members_trait" : [{"label" : "optimalNumberOfBuckets", "tail" : "(n: Long, p: Double): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImports.optimalNumberOfBuckets", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#optimalNumberOfBuckets(n:Long,p:Double):Long", "kind" : "def"}, {"label" : "optimalNumOfBits", "tail" : "(n: Long, p: Double): Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImports.optimalNumOfBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#optimalNumOfBits(n:Long,p:Double):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BlockSplitBloomFilterImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.Bloom", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "|=", "tail" : "(that: BloomType): BloomType", "member" : "com.sparkutils.quality.impl.bloom.parquet.Bloom.|=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#|=(that:Bloom.this.BloomType):Bloom.this.BloomType", "kind" : "abstract def"}, {"label" : "serialized", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.parquet.Bloom.serialized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#serialized:Array[Byte]", "kind" : "abstract def"}, {"label" : "+=", "tail" : "(value: Any): BloomType", "member" : "com.sparkutils.quality.impl.bloom.parquet.Bloom.+=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html#+=(value:Any):Bloom.this.BloomType", "kind" : "abstract def"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.Bloom.BloomType", "error" : "unsupported entity"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bloom.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter", "members_trait" : [{"label" : "+=", "tail" : "(value: Any): BloomType", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.+=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#+=(value:Any):BloomFilter.this.BloomType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getCompression", "tail" : "(): Compression", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.getCompression", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#getCompression:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.Compression", "kind" : "abstract def"}, {"label" : "getAlgorithm", "tail" : "(): Algorithm", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.getAlgorithm", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#getAlgorithm:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.Algorithm", "kind" : "abstract def"}, {"label" : "getHashStrategy", "tail" : "(): HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.getHashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#getHashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "abstract def"}, {"label" : "hash", "tail" : "(value: Any): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#hash(value:Any):Long", "kind" : "abstract def"}, {"label" : "hash", "tail" : "(value: Binary): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#hash(value:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.Binary):Long", "kind" : "abstract def"}, {"label" : "hash", "tail" : "(value: Float): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#hash(value:Float):Long", "kind" : "abstract def"}, {"label" : "hash", "tail" : "(value: Double): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#hash(value:Double):Long", "kind" : "abstract def"}, {"label" : "hash", "tail" : "(value: Long): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#hash(value:Long):Long", "kind" : "abstract def"}, {"label" : "hash", "tail" : "(value: Int): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#hash(value:Int):Long", "kind" : "abstract def"}, {"label" : "getBitsetSize", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.getBitsetSize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#getBitsetSize:Int", "kind" : "abstract def"}, {"label" : "findHash", "tail" : "(hash: Long): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.findHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#findHash(hash:Long):Boolean", "kind" : "abstract def"}, {"label" : "insertHash", "tail" : "(hash: Long): Unit", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.insertHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#insertHash(hash:Long):Unit", "kind" : "abstract def"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.BloomType", "error" : "unsupported entity"}, {"label" : "|=", "tail" : "(that: BloomType): BloomType", "member" : "com.sparkutils.quality.impl.bloom.parquet.Bloom.|=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#|=(that:Bloom.this.BloomType):Bloom.this.BloomType", "kind" : "abstract def"}, {"label" : "serialized", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.parquet.Bloom.serialized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html#serialized:Array[Byte]", "kind" : "abstract def"}], "shortDescription" : "A Bloom filter is a compact structure to indicate whether an item is not in a set or probablyin a set.", "object" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html", "members_object" : [{"label" : "UNCOMPRESSED", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.UNCOMPRESSED", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#UNCOMPRESSED", "kind" : "object"}, {"label" : "Compression", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.Compression", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#CompressionextendsAnyRef", "kind" : "sealed trait"}, {"label" : "BLOCK", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.BLOCK", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#BLOCK", "kind" : "object"}, {"label" : "Algorithm", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.Algorithm", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#AlgorithmextendsAnyRef", "kind" : "sealed trait"}, {"label" : "XXH64", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.XXH64", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#XXH64", "kind" : "object"}, {"label" : "HashStrategy", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#HashStrategyextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Binary", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomFilter.Binary", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#Binary=Array[Byte]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomFilter.html", "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html", "members_object" : [{"label" : "hashTypes", "tail" : ": Seq[DataType with Product with Serializable]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hashTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#hashTypes:Seq[org.apache.spark.sql.types.DataTypewithProductwithSerializable]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHash$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.BloomHashImpl", "shortDescription" : "", "members_class" : [{"label" : "mask", "tail" : ": Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHashImpl.mask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#mask:Array[Int]", "kind" : "val"}, {"label" : "cacheBuffer", "tail" : ": ByteBuffer", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHashImpl.cacheBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#cacheBuffer:java.nio.ByteBuffer", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHashImpl#<init>", "error" : "unsupported entity"}, {"label" : "hashStrategy", "tail" : ": HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHashImpl.hashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "val"}, {"label" : "doHash", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.doHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#doHash:Long", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Any): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#hash(value:Any):Long", "kind" : "def"}, {"label" : "setMask", "tail" : "(key: Int): Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.setMask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#setMask(key:Int):Array[Int]", "kind" : "def"}, {"label" : "hashFunction", "tail" : ": XxHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hashFunction", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#hashFunction:com.sparkutils.quality.impl.bloom.parquet.XxHash", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BloomHashImpl.html", "kind" : "class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.Bucketed", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html", "members_object" : [{"label" : "whichBloom", "tail" : "(hash: Long, buckets: Int): Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.Bucketed.whichBloom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#whichBloom(hash:Long,buckets:Int):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/Bucketed$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html", "members_object" : [{"label" : "apply", "tail" : "(bitArrays: Array[Array[Byte]], fpp: Double, hint: BucketedFilesRoot): BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#apply(bitArrays:Array[Array[Byte]],fpp:Double,hint:com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot):com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot,Array[Array[Byte]]]", "kind" : "def"}, {"label" : "apply", "tail" : "(bitArrays: Array[Array[Byte]], hashImpl: BloomHash, fpp: Double, hint: BucketedFilesRoot): BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#apply(bitArrays:Array[Array[Byte]],hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash,fpp:Double,hint:com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot):com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot,Array[Array[Byte]]]", "kind" : "def"}, {"label" : "impl", "tail" : "(bitArrays: Array[Array[Byte]], hashImpl: BloomHash, fpp: Double, hint: H)(arg0: ToSerializedType[SerializedType, H]): BucketedCreator[H, SerializedType]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.impl", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#impl[H,SerializedType](bitArrays:Array[Array[Byte]],hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash,fpp:Double,hint:H)(implicitevidence$3:com.sparkutils.quality.impl.bloom.parquet.ToSerializedType[SerializedType,H]):com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[H,SerializedType]", "kind" : "def"}, {"label" : "apply", "tail" : "(numBytes: Int, numBuckets: Int, fpp: Double, hint: H)(arg0: ToSerializedType[SerializedType, H]): BucketedCreator[H, SerializedType]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#apply[H,SerializedType](numBytes:Int,numBuckets:Int,fpp:Double,hint:H)(implicitevidence$2:com.sparkutils.quality.impl.bloom.parquet.ToSerializedType[SerializedType,H]):com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[H,SerializedType]", "kind" : "def"}, {"label" : "apply", "tail" : "(numBytes: Int, numBuckets: Int, fpp: Double, hashImpl: BloomHash, hint: H)(arg0: ToSerializedType[SerializedType, H]): BucketedCreator[H, SerializedType]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#apply[H,SerializedType](numBytes:Int,numBuckets:Int,fpp:Double,hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash,hint:H)(implicitevidence$1:com.sparkutils.quality.impl.bloom.parquet.ToSerializedType[SerializedType,H]):com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[H,SerializedType]", "kind" : "def"}, {"label" : "toLocalFiles", "tail" : ": ToSerializedType[Array[Array[Byte]], BucketedFilesRoot]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.toLocalFiles", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#toLocalFiles:com.sparkutils.quality.impl.bloom.parquet.ToSerializedType[Array[Array[Byte]],com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "serialized", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.serialized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#serialized:Array[Byte]", "kind" : "def"}, {"label" : "+=", "tail" : "(value: Any): BloomType", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.+=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#+=(value:Any):BucketedCreator.this.BloomType", "kind" : "def"}, {"label" : "|=", "tail" : "(that: BucketedCreator[H, SerializedType]): BucketedCreator[H, SerializedType]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.|=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#|=(that:com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[H,SerializedType]):com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[H,SerializedType]", "kind" : "def"}, {"label" : "BloomType", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.BloomType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#BloomType=com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[H,SerializedType]", "kind" : "type"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator#<init>", "error" : "unsupported entity"}, {"label" : "bucketedFiles", "tail" : ": Option[BucketedFiles]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.bucketedFiles", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#bucketedFiles:Option[com.sparkutils.quality.BucketedFiles]", "kind" : "val"}, {"label" : "filters", "tail" : ": Seq[BlockSplitBloomFilterImpl]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.filters", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#filters:Seq[com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl]", "kind" : "val"}, {"label" : "hint", "tail" : ": H", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.hint", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#hint:H", "kind" : "val"}, {"label" : "toType", "tail" : ": ToSerializedType[SerializedType, H]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.toType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#toType:com.sparkutils.quality.impl.bloom.parquet.ToSerializedType[SerializedType,H]", "kind" : "val"}, {"label" : "numBuckets", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.numBuckets", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#numBuckets:Int", "kind" : "val"}, {"label" : "fpp", "tail" : ": Double", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.fpp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#fpp:Double", "kind" : "val"}, {"label" : "hashImpl", "tail" : ": BloomHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.hashImpl", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash", "kind" : "val"}, {"label" : "iMaximumBytes", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.iMaximumBytes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#iMaximumBytes:Int", "kind" : "val"}, {"label" : "iMinimumBytes", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.iMinimumBytes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#iMinimumBytes:Int", "kind" : "val"}, {"label" : "numBytes", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreator.numBytes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#numBytes:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreator.html", "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreatorFunctions", "members_trait" : [{"label" : "bloomFileLocation", "tail" : ": String", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreatorFunctions.bloomFileLocation", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#bloomFileLocation:String", "kind" : "val"}, {"label" : "bloomFrom", "tail" : "(dataFrame: DataFrame, bloomOn: String, expectedSize: Int, fpp: Double, bloomId: String, partitions: Int): BucketedFiles", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedCreatorFunctions.bloomFrom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#bloomFrom(dataFrame:org.apache.spark.sql.DataFrame,bloomOn:String,expectedSize:Int,fpp:Double,bloomId:String,partitions:Int):com.sparkutils.quality.BucketedFiles", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedCreatorFunctions.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot", "shortDescription" : "", "members_case class" : [{"label" : "fileLocation", "tail" : "(): File", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot.fileLocation", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#fileLocation:java.io.File", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot#<init>", "error" : "unsupported entity"}, {"label" : "bloomId", "tail" : ": String", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot.bloomId", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#bloomId:String", "kind" : "val"}, {"label" : "bloomFileLocation", "tail" : ": FileRoot", "member" : "com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot.bloomFileLocation", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#bloomFileLocation:com.sparkutils.quality.impl.bloom.parquet.FileRoot", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BucketedFilesRoot.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.BufferAndRaw", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.bloom.parquet.BufferAndRaw#<init>", "error" : "unsupported entity"}, {"label" : "bytes", "tail" : ": Option[Array[Byte]]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BufferAndRaw.bytes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#bytes:Option[Array[Byte]]", "kind" : "val"}, {"label" : "buffer", "tail" : ": IntBuffer", "member" : "com.sparkutils.quality.impl.bloom.parquet.BufferAndRaw.buffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#buffer:java.nio.IntBuffer", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/BufferAndRaw.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash", "members_trait" : [{"label" : "mask", "tail" : "(): Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.mask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#mask:Array[Int]", "kind" : "def"}, {"label" : "cacheBuffer", "tail" : "(): ByteBuffer", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.cacheBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#cacheBuffer:java.nio.ByteBuffer", "kind" : "def"}, {"label" : "hashStrategy", "tail" : "(): HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.hashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "def"}, {"label" : "doHash", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.doHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#doHash:Long", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Any): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#hash(value:Any):Long", "kind" : "def"}, {"label" : "setMask", "tail" : "(key: Int): Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.setMask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#setMask(key:Int):Array[Int]", "kind" : "def"}, {"label" : "hashFunction", "tail" : ": XxHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hashFunction", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#hashFunction:com.sparkutils.quality.impl.bloom.parquet.XxHash", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "hashImpl", "tail" : "(): BloomHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.hashImpl", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html#hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/DelegatingBloomHash.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.FileRoot", "shortDescription" : "", "members_case class" : [{"label" : "asFile", "tail" : "(): File", "member" : "com.sparkutils.quality.impl.bloom.parquet.FileRoot.asFile", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#asFile:java.io.File", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.FileRoot#<init>", "error" : "unsupported entity"}, {"label" : "location", "tail" : ": String", "member" : "com.sparkutils.quality.impl.bloom.parquet.FileRoot.location", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#location:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/FileRoot.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.HashFunction", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "hashChars", "tail" : "(input: String): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.HashFunction.hashChars", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#hashChars(input:String):Long", "kind" : "abstract def"}, {"label" : "hashByteBuffer", "tail" : "(input: ByteBuffer): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.HashFunction.hashByteBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#hashByteBuffer(input:java.nio.ByteBuffer):Long", "kind" : "abstract def"}, {"label" : "hashLongs", "tail" : "(input: Array[Long]): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.HashFunction.hashLongs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#hashLongs(input:Array[Long]):Long", "kind" : "abstract def"}, {"label" : "hashBytes", "tail" : "(input: Array[Byte]): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.HashFunction.hashBytes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html#hashBytes(input:Array[Byte]):Long", "kind" : "abstract def"}], "shortDescription" : "A interface contains a set of hash functions used by Bloom filter.", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/HashFunction.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedLookup", "shortDescription" : "", "members_case class" : [{"label" : "mightContain", "tail" : "(value: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedLookup.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#mightContain(value:Any):Boolean", "kind" : "def"}, {"label" : "filters", "tail" : ": TransientHolder[Array[ThreadLookup]]", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedLookup.filters", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#filters:com.sparkutils.quality.utils.TransientHolder[Array[com.sparkutils.quality.impl.bloom.parquet.ThreadLookup]]", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedLookup#<init>", "error" : "unsupported entity"}, {"label" : "hashImpl", "tail" : ": BloomHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedLookup.hashImpl", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash", "kind" : "val"}, {"label" : "arrays", "tail" : ": Array[Array[Byte]]", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedLookup.arrays", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#arrays:Array[Array[Byte]]", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedLookup.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedMappedLookup", "shortDescription" : "", "members_case class" : [{"label" : "mightContain", "tail" : "(value: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedMappedLookup.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#mightContain(value:Any):Boolean", "kind" : "def"}, {"label" : "filters", "tail" : ": TransientHolder[Seq[ThreadBufferLookup]]", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedMappedLookup.filters", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#filters:com.sparkutils.quality.utils.TransientHolder[Seq[com.sparkutils.quality.impl.bloom.parquet.ThreadBufferLookup]]", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedMappedLookup#<init>", "error" : "unsupported entity"}, {"label" : "hashImpl", "tail" : ": BloomHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedMappedLookup.hashImpl", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash", "kind" : "val"}, {"label" : "bucketedFiles", "tail" : ": BucketedFiles", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBucketedMappedLookup.bucketedFiles", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#bucketedFiles:com.sparkutils.quality.BucketedFiles", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBucketedMappedLookup.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBufferLookup", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBufferLookup#<init>", "error" : "unsupported entity"}, {"label" : "hashImpl", "tail" : ": BloomHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBufferLookup.hashImpl", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash", "kind" : "val"}, {"label" : "intBuffer", "tail" : ": IntBuffer", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadBufferLookup.intBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#intBuffer:java.nio.IntBuffer", "kind" : "val"}, {"label" : "mask", "tail" : "(): Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.mask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#mask:Array[Int]", "kind" : "def"}, {"label" : "cacheBuffer", "tail" : "(): ByteBuffer", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.cacheBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#cacheBuffer:java.nio.ByteBuffer", "kind" : "def"}, {"label" : "hashStrategy", "tail" : "(): HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.hashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "def"}, {"label" : "mightContain", "tail" : "(value: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomLookupImpl.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#mightContain(value:Any):Boolean", "kind" : "def"}, {"label" : "findHash", "tail" : "(hash: Long): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomLookupImpl.findHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#findHash(hash:Long):Boolean", "kind" : "def"}, {"label" : "doHash", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.doHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#doHash:Long", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Any): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#hash(value:Any):Long", "kind" : "def"}, {"label" : "setMask", "tail" : "(key: Int): Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.setMask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#setMask(key:Int):Array[Int]", "kind" : "def"}, {"label" : "hashFunction", "tail" : ": XxHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hashFunction", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#hashFunction:com.sparkutils.quality.impl.bloom.parquet.XxHash", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadBufferLookup.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ThreadLookup", "shortDescription" : "", "members_case class" : [{"label" : "intBuffer", "tail" : ": IntBuffer", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadLookup.intBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#intBuffer:java.nio.IntBuffer", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadLookup#<init>", "error" : "unsupported entity"}, {"label" : "hashImpl", "tail" : ": BloomHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadLookup.hashImpl", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#hashImpl:com.sparkutils.quality.impl.bloom.parquet.BloomHash", "kind" : "val"}, {"label" : "bitset", "tail" : ": Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadLookup.bitset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#bitset:Array[Byte]", "kind" : "val"}, {"label" : "mask", "tail" : "(): Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.mask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#mask:Array[Int]", "kind" : "def"}, {"label" : "cacheBuffer", "tail" : "(): ByteBuffer", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.cacheBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#cacheBuffer:java.nio.ByteBuffer", "kind" : "def"}, {"label" : "hashStrategy", "tail" : "(): HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.DelegatingBloomHash.hashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "def"}, {"label" : "mightContain", "tail" : "(value: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomLookupImpl.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#mightContain(value:Any):Boolean", "kind" : "def"}, {"label" : "findHash", "tail" : "(hash: Long): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomLookupImpl.findHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#findHash(hash:Long):Boolean", "kind" : "def"}, {"label" : "doHash", "tail" : "(): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.doHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#doHash:Long", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Any): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#hash(value:Any):Long", "kind" : "def"}, {"label" : "setMask", "tail" : "(key: Int): Array[Int]", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.setMask", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#setMask(key:Int):Array[Int]", "kind" : "def"}, {"label" : "hashFunction", "tail" : ": XxHash", "member" : "com.sparkutils.quality.impl.bloom.parquet.BloomHash.hashFunction", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#hashFunction:com.sparkutils.quality.impl.bloom.parquet.XxHash", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadLookup.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBloomLookupImpl", "shortDescription" : "The default BlockSplitBloomFilter is not threadsafe for lookup.", "members_case class" : [{"label" : "mightContain", "tail" : "(value: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBloomLookupImpl.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#mightContain(value:Any):Boolean", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBloomLookupImpl#<init>", "error" : "unsupported entity"}, {"label" : "hashStrategy", "tail" : ": HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBloomLookupImpl.hashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "val"}, {"label" : "bitset", "tail" : ": Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBloomLookupImpl.bitset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#bitset:Array[Byte]", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBloomLookupImpl.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookup", "shortDescription" : "By default eager, optionally lazy which will read the files from the executor", "object" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html", "members_object" : [{"label" : "mappedLookup", "tail" : "(bucketedFiles: BucketedFiles): ThreadSafeBucketedBloomLookupMapped", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookup.mappedLookup", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#mappedLookup(bucketedFiles:com.sparkutils.quality.BucketedFiles):com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupMapped", "kind" : "def"}, {"label" : "apply", "tail" : "(bucketedFiles: BucketedFiles): ThreadSafeBucketedBloomLookupEager", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#apply(bucketedFiles:com.sparkutils.quality.BucketedFiles):com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupEager", "kind" : "def"}, {"label" : "lazyLookup", "tail" : "(bucketedFiles: BucketedFiles): ThreadSafeBucketedBloomLookupLazy", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookup.lazyLookup", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#lazyLookup(bucketedFiles:com.sparkutils.quality.BucketedFiles):com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupLazy", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupEager", "shortDescription" : "The default BlockSplitBloomFilter is not threadsafe for lookup.", "members_case class" : [{"label" : "mightContain", "tail" : "(value: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupEager.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#mightContain(value:Any):Boolean", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupEager#<init>", "error" : "unsupported entity"}, {"label" : "hashStrategy", "tail" : ": HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupEager.hashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "val"}, {"label" : "arrays", "tail" : ": Array[Array[Byte]]", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupEager.arrays", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#arrays:Array[Array[Byte]]", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupEager.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupLazy", "shortDescription" : "The default BlockSplitBloomFilter is not threadsafe for lookup.", "members_case class" : [{"label" : "mightContain", "tail" : "(value: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupLazy.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#mightContain(value:Any):Boolean", "kind" : "def"}, {"label" : "arrays", "tail" : ": TransientHolder[Array[Array[Byte]]]", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupLazy.arrays", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#arrays:com.sparkutils.quality.utils.TransientHolder[Array[Array[Byte]]]", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupLazy#<init>", "error" : "unsupported entity"}, {"label" : "hashStrategy", "tail" : ": HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupLazy.hashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "val"}, {"label" : "bucketedFiles", "tail" : ": BucketedFiles", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupLazy.bucketedFiles", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#bucketedFiles:com.sparkutils.quality.BucketedFiles", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupLazy.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupMapped", "shortDescription" : "The default BlockSplitBloomFilter is not threadsafe for lookup.", "members_case class" : [{"label" : "mightContain", "tail" : "(value: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupMapped.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#mightContain(value:Any):Boolean", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupMapped#<init>", "error" : "unsupported entity"}, {"label" : "hashStrategy", "tail" : ": HashStrategy", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupMapped.hashStrategy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#hashStrategy:com.sparkutils.quality.impl.bloom.parquet.BloomFilter.HashStrategy", "kind" : "val"}, {"label" : "bucketedFiles", "tail" : ": BucketedFiles", "member" : "com.sparkutils.quality.impl.bloom.parquet.ThreadSafeBucketedBloomLookupMapped.bucketedFiles", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#bucketedFiles:com.sparkutils.quality.BucketedFiles", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ThreadSafeBucketedBloomLookupMapped.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.ToSerializedType", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "serializeBuckets", "tail" : "(filters: Seq[BlockSplitBloomFilterImpl], fpp: Double, numBuckets: Int, hint: H): Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.parquet.ToSerializedType.serializeBuckets", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html#serializeBuckets(filters:Seq[com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl],fpp:Double,numBuckets:Int,hint:H):Array[Byte]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/ToSerializedType.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.parquet.XxHash", "shortDescription" : "The implementation of HashFunction interface.", "members_class" : [{"label" : "hashChars", "tail" : "(input: String): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.XxHash.hashChars", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#hashChars(input:String):Long", "kind" : "def"}, {"label" : "hashByteBuffer", "tail" : "(input: ByteBuffer): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.XxHash.hashByteBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#hashByteBuffer(input:java.nio.ByteBuffer):Long", "kind" : "def"}, {"label" : "hashLongs", "tail" : "(input: Array[Long]): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.XxHash.hashLongs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#hashLongs(input:Array[Long]):Long", "kind" : "def"}, {"label" : "hashBytes", "tail" : "(input: Array[Byte]): Long", "member" : "com.sparkutils.quality.impl.bloom.parquet.XxHash.hashBytes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#hashBytes(input:Array[Byte]):Long", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.bloom.parquet.XxHash#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/sparkutils\/quality\/impl\/bloom\/parquet\/XxHash.html", "kind" : "class"}], "com.sparkutils.quality.impl.hash" : [{"name" : "com.sparkutils.quality.impl.hash.DigestLongsFunction", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html", "members_object" : [{"label" : "hashBytes", "tail" : "(base: Array[Byte], offset: Int, length: Int, digest: Digest): Digest", "member" : "com.sparkutils.quality.impl.hash.DigestLongsFunction.hashBytes", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#hashBytes(base:Array[Byte],offset:Int,length:Int,digest:org.apache.spark.sql.qualityFunctions.Digest):org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"label" : "hashLong", "tail" : "(l: Long, digest: Digest): Digest", "member" : "com.sparkutils.quality.impl.hash.DigestLongsFunction.hashLong", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#hashLong(l:Long,digest:org.apache.spark.sql.qualityFunctions.Digest):org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"label" : "hashInt", "tail" : "(i: Int, digest: Digest): Digest", "member" : "com.sparkutils.quality.impl.hash.DigestLongsFunction.hashInt", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#hashInt(i:Int,digest:org.apache.spark.sql.qualityFunctions.Digest):org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"label" : "hash", "tail" : "(value: Any, dataType: DataType, digest: Digest): Digest", "member" : "org.apache.spark.sql.qualityFunctions.InterpretedHashLongsFunction.hash", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#hash(value:Any,dataType:org.apache.spark.sql.types.DataType,digest:org.apache.spark.sql.qualityFunctions.Digest):org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/DigestLongsFunction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.hash.HashFunctionFactory", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html", "members_object" : [{"label" : "mapF", "tail" : ": Map[String, () ⇒ HashFunction]", "member" : "com.sparkutils.quality.impl.hash.HashFunctionFactory.mapF", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#mapF:scala.collection.immutable.Map[String,()=>com.google.common.hash.HashFunction]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "length", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.hash.HashFunctionFactory.length", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#length:Int", "kind" : "def"}, {"label" : "fresh", "tail" : "(): Digest", "member" : "com.sparkutils.quality.impl.hash.HashFunctionFactory.fresh", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#fresh:org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"label" : "mapf", "tail" : ": () ⇒ HashFunction", "member" : "com.sparkutils.quality.impl.hash.HashFunctionFactory.mapf", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#mapf:()=>com.google.common.hash.HashFunction", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.hash.HashFunctionFactory#<init>", "error" : "unsupported entity"}, {"label" : "impl", "tail" : ": String", "member" : "com.sparkutils.quality.impl.hash.HashFunctionFactory.impl", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#impl:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionFactory.html", "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.hash.HashFunctionProxy", "shortDescription" : "Proxies HashFunction for this hash", "members_case class" : [{"label" : "digest", "tail" : "(): Array[Long]", "member" : "com.sparkutils.quality.impl.hash.HashFunctionProxy.digest", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#digest:Array[Long]", "kind" : "def"}, {"label" : "hashBytes", "tail" : "(base: Array[Byte], offset: Int, length: Int): Unit", "member" : "com.sparkutils.quality.impl.hash.HashFunctionProxy.hashBytes", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#hashBytes(base:Array[Byte],offset:Int,length:Int):Unit", "kind" : "def"}, {"label" : "hashLong", "tail" : "(l: Long): Unit", "member" : "com.sparkutils.quality.impl.hash.HashFunctionProxy.hashLong", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#hashLong(l:Long):Unit", "kind" : "def"}, {"label" : "hashInt", "tail" : "(i: Int): Unit", "member" : "com.sparkutils.quality.impl.hash.HashFunctionProxy.hashInt", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#hashInt(i:Int):Unit", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.hash.HashFunctionProxy#<init>", "error" : "unsupported entity"}, {"label" : "hasher", "tail" : ": Hasher", "member" : "com.sparkutils.quality.impl.hash.HashFunctionProxy.hasher", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#hasher:com.google.common.hash.Hasher", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionProxy.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "computeHash", "tail" : "(value: Any, dataType: DataType, hash: Digest): Unit", "member" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression.computeHash", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#computeHash(value:Any,dataType:org.apache.spark.sql.types.DataType,hash:org.apache.spark.sql.qualityFunctions.Digest):Unit", "kind" : "def"}, {"label" : "hasherClassName", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression.hasherClassName", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#hasherClassName:String", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#prettyName:String", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression#<init>", "error" : "unsupported entity"}, {"label" : "factory", "tail" : ": DigestFactory", "member" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression.factory", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#factory:org.apache.spark.sql.qualityFunctions.DigestFactory", "kind" : "val"}, {"label" : "asStruct", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression.asStruct", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#asStruct:Boolean", "kind" : "val"}, {"label" : "digestImpl", "tail" : ": String", "member" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression.digestImpl", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#digestImpl:String", "kind" : "val"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.impl.hash.HashFunctionsExpression.children", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "computeHash", "tail" : "(input: String, dataType: DataType, result: String, ctx: CodegenContext): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.computeHash", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#computeHash(input:String,dataType:org.apache.spark.sql.types.DataType,result:String,ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):String", "kind" : "def"}, {"label" : "genHashForStruct", "tail" : "(ctx: CodegenContext, input: String, result: String, fields: Array[StructField]): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashForStruct", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashForStruct(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,input:String,result:String,fields:Array[org.apache.spark.sql.types.StructField]):String", "kind" : "def"}, {"label" : "genHashForArray", "tail" : "(ctx: CodegenContext, input: String, result: String, elementType: DataType, containsNull: Boolean): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashForArray", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashForArray(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,input:String,result:String,elementType:org.apache.spark.sql.types.DataType,containsNull:Boolean):String", "kind" : "def"}, {"label" : "genHashForMap", "tail" : "(ctx: CodegenContext, input: String, result: String, keyType: DataType, valueType: DataType, valueContainsNull: Boolean): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashForMap", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashForMap(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,input:String,result:String,keyType:org.apache.spark.sql.types.DataType,valueType:org.apache.spark.sql.types.DataType,valueContainsNull:Boolean):String", "kind" : "def"}, {"label" : "genHashString", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashString(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashCalendarInterval", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashCalendarInterval", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashCalendarInterval(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashTimestamp", "tail" : "(t: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashTimestamp", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashTimestamp(t:String,result:String):String", "kind" : "def"}, {"label" : "genHashDecimal", "tail" : "(ctx: CodegenContext, d: DecimalType, input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashDecimal", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashDecimal(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,d:org.apache.spark.sql.types.DecimalType,input:String,result:String):String", "kind" : "def"}, {"label" : "genHashDouble", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashDouble", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashDouble(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashFloat", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashFloat", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashFloat(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashBoolean", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashBoolean", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashBoolean(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashBytes", "tail" : "(b: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashBytes", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashBytes(b:String,result:String):String", "kind" : "def"}, {"label" : "genHashLong", "tail" : "(l: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashLong", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashLong(l:String,result:String):String", "kind" : "def"}, {"label" : "genHashInt", "tail" : "(i: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashInt", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genHashInt(i:String,result:String):String", "kind" : "def"}, {"label" : "nullSafeElementHash", "tail" : "(input: String, index: String, nullable: Boolean, elementType: DataType, result: String, ctx: CodegenContext): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.nullSafeElementHash", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#nullSafeElementHash(input:String,index:String,nullable:Boolean,elementType:org.apache.spark.sql.types.DataType,result:String,ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):String", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/hash\/HashFunctionsExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.hash.LongHashFunctionFactory", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html", "members_object" : [{"label" : "mapF", "tail" : ": Map[String, () ⇒ (Long) ⇒ LongHashFunction]", "member" : "com.sparkutils.quality.impl.hash.LongHashFunctionFactory.mapF", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#mapF:scala.collection.immutable.Map[String,()=>Long=>net.openhft.hashing.LongHashFunction]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.hash.LongHashFunctionProxy", "shortDescription" : "Proxies LongHashFunction for this hash, clearly it actually allocates as we use the last result to seed a new hasher", "members_case class" : [{"label" : "digest", "tail" : "(): Array[Long]", "member" : "com.sparkutils.quality.impl.hash.LongHashFunctionProxy.digest", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#digest:Array[Long]", "kind" : "def"}, {"label" : "hashBytes", "tail" : "(base: Array[Byte], offset: Int, length: Int): Unit", "member" : "com.sparkutils.quality.impl.hash.LongHashFunctionProxy.hashBytes", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#hashBytes(base:Array[Byte],offset:Int,length:Int):Unit", "kind" : "def"}, {"label" : "hashLong", "tail" : "(l: Long): Unit", "member" : "com.sparkutils.quality.impl.hash.LongHashFunctionProxy.hashLong", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#hashLong(l:Long):Unit", "kind" : "def"}, {"label" : "hashInt", "tail" : "(i: Int): Unit", "member" : "com.sparkutils.quality.impl.hash.LongHashFunctionProxy.hashInt", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#hashInt(i:Int):Unit", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.hash.LongHashFunctionProxy#<init>", "error" : "unsupported entity"}, {"label" : "hasher", "tail" : ": (Long) ⇒ LongHashFunction", "member" : "com.sparkutils.quality.impl.hash.LongHashFunctionProxy.hasher", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#hasher:Long=>net.openhft.hashing.LongHashFunction", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/hash\/LongHashFunctionProxy.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.hash.LongTupleHashFunctionFactory", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html", "members_object" : [{"label" : "mapF", "tail" : ": Map[String, () ⇒ (Long) ⇒ LongTupleHashFunction]", "member" : "com.sparkutils.quality.impl.hash.LongTupleHashFunctionFactory.mapF", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#mapF:scala.collection.immutable.Map[String,()=>Long=>net.openhft.hashing.LongTupleHashFunction]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionFactory$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.hash.LongTupleHashFunctionProxy", "shortDescription" : "Proxies LongTupleHashFunction for this hash, uses the last result", "members_case class" : [{"label" : "digest", "tail" : "(): Array[Long]", "member" : "com.sparkutils.quality.impl.hash.LongTupleHashFunctionProxy.digest", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#digest:Array[Long]", "kind" : "def"}, {"label" : "hashBytes", "tail" : "(base: Array[Byte], offset: Int, length: Int): Unit", "member" : "com.sparkutils.quality.impl.hash.LongTupleHashFunctionProxy.hashBytes", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#hashBytes(base:Array[Byte],offset:Int,length:Int):Unit", "kind" : "def"}, {"label" : "hashLong", "tail" : "(l: Long): Unit", "member" : "com.sparkutils.quality.impl.hash.LongTupleHashFunctionProxy.hashLong", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#hashLong(l:Long):Unit", "kind" : "def"}, {"label" : "hashInt", "tail" : "(i: Int): Unit", "member" : "com.sparkutils.quality.impl.hash.LongTupleHashFunctionProxy.hashInt", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#hashInt(i:Int):Unit", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.hash.LongTupleHashFunctionProxy#<init>", "error" : "unsupported entity"}, {"label" : "hasher", "tail" : ": (Long) ⇒ LongTupleHashFunction", "member" : "com.sparkutils.quality.impl.hash.LongTupleHashFunctionProxy.hasher", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#hasher:Long=>net.openhft.hashing.LongTupleHashFunction", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/hash\/LongTupleHashFunctionProxy.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.hash.MessageDigestFactory", "shortDescription" : "Calling java.security.MessageDigest.digest resets the digest so we only need create one instance and just return it", "members_case class" : [{"label" : "length", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.hash.MessageDigestFactory.length", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#length:Int", "kind" : "def"}, {"label" : "fresh", "tail" : "(): Digest", "member" : "com.sparkutils.quality.impl.hash.MessageDigestFactory.fresh", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#fresh:org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.hash.MessageDigestFactory#<init>", "error" : "unsupported entity"}, {"label" : "impl", "tail" : ": String", "member" : "com.sparkutils.quality.impl.hash.MessageDigestFactory.impl", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#impl:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestFactory.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.hash.MessageDigestProxy", "shortDescription" : "Proxies MessageDigest for this hash", "members_case class" : [{"label" : "digest", "tail" : "(): Array[Long]", "member" : "com.sparkutils.quality.impl.hash.MessageDigestProxy.digest", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#digest:Array[Long]", "kind" : "def"}, {"label" : "hashBytes", "tail" : "(base: Array[Byte], offset: Int, length: Int): Unit", "member" : "com.sparkutils.quality.impl.hash.MessageDigestProxy.hashBytes", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#hashBytes(base:Array[Byte],offset:Int,length:Int):Unit", "kind" : "def"}, {"label" : "hashLong", "tail" : "(l: Long): Unit", "member" : "com.sparkutils.quality.impl.hash.MessageDigestProxy.hashLong", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#hashLong(l:Long):Unit", "kind" : "def"}, {"label" : "hashInt", "tail" : "(i: Int): Unit", "member" : "com.sparkutils.quality.impl.hash.MessageDigestProxy.hashInt", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#hashInt(i:Int):Unit", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.hash.MessageDigestProxy#<init>", "error" : "unsupported entity"}, {"label" : "messageDigest", "tail" : ": MessageDigest", "member" : "com.sparkutils.quality.impl.hash.MessageDigestProxy.messageDigest", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#messageDigest:java.security.MessageDigest", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/hash\/MessageDigestProxy.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.hash.ZALongHashFunctionFactory", "shortDescription" : "Creates a LongHashFunction \/ Hasher for a given ZeroAllocation impl - defaults to XX when no matching impl is found", "members_case class" : [{"label" : "length", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.hash.ZALongHashFunctionFactory.length", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#length:Int", "kind" : "def"}, {"label" : "fresh", "tail" : "(): Digest", "member" : "com.sparkutils.quality.impl.hash.ZALongHashFunctionFactory.fresh", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#fresh:org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"label" : "mapf", "tail" : ": () ⇒ (Long) ⇒ LongHashFunction", "member" : "com.sparkutils.quality.impl.hash.ZALongHashFunctionFactory.mapf", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#mapf:()=>Long=>net.openhft.hashing.LongHashFunction", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.hash.ZALongHashFunctionFactory#<init>", "error" : "unsupported entity"}, {"label" : "impl", "tail" : ": String", "member" : "com.sparkutils.quality.impl.hash.ZALongHashFunctionFactory.impl", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#impl:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/hash\/ZALongHashFunctionFactory.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.hash.ZALongTupleHashFunctionFactory", "shortDescription" : "Creates a LongHashFunction \/ Hasher for a given ZeroAllocation impl - XXH3 as default", "members_case class" : [{"label" : "length", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.hash.ZALongTupleHashFunctionFactory.length", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#length:Int", "kind" : "def"}, {"label" : "fresh", "tail" : "(): Digest", "member" : "com.sparkutils.quality.impl.hash.ZALongTupleHashFunctionFactory.fresh", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#fresh:org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"label" : "mapf", "tail" : ": () ⇒ (Long) ⇒ LongTupleHashFunction", "member" : "com.sparkutils.quality.impl.hash.ZALongTupleHashFunctionFactory.mapf", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#mapf:()=>Long=>net.openhft.hashing.LongTupleHashFunction", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.hash.ZALongTupleHashFunctionFactory#<init>", "error" : "unsupported entity"}, {"label" : "impl", "tail" : ": String", "member" : "com.sparkutils.quality.impl.hash.ZALongTupleHashFunctionFactory.impl", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#impl:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/hash\/ZALongTupleHashFunctionFactory.html", "kind" : "case class"}], "com.sparkutils.quality.impl.mapLookup" : [{"name" : "com.sparkutils.quality.impl.mapLookup.MapLookup", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html", "members_object" : [{"label" : "apply", "tail" : "(mapLookupName: Expression, lookupValue: Expression, mapLookups: quality.MapLookups): MapLookupExpression", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#apply(mapLookupName:org.apache.spark.sql.catalyst.expressions.Expression,lookupValue:org.apache.spark.sql.catalyst.expressions.Expression,mapLookups:com.sparkutils.quality.MapLookups):com.sparkutils.quality.impl.mapLookup.MapLookupExpression", "kind" : "def"}, {"label" : "apply", "tail" : "(mapLookupName: Column, lookupValue: Column, mapLookups: quality.MapLookups): Column", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#apply(mapLookupName:org.apache.spark.sql.Column,lookupValue:org.apache.spark.sql.Column,mapLookups:com.sparkutils.quality.MapLookups):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression", "shortDescription" : "Returns a value when the lookup is present with the correct value type, or Null when not throws if the table is not present", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.sql", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#sql:String", "kind" : "def"}, {"label" : "eval", "tail" : "(row: InternalRow): Any", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#eval(row:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "converter", "tail" : ": (Any) ⇒ Any", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.converter", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#converter:Any=>Any", "kind" : "lazy val"}, {"label" : "theMap", "tail" : ": Map[Any, Any]", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.theMap", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#theMap:Map[Any,Any]", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression#<init>", "error" : "unsupported entity"}, {"label" : "dataType", "tail" : ": DataType", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "val"}, {"label" : "arrayMap", "tail" : ": Broadcast[MapData]", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.arrayMap", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#arrayMap:org.apache.spark.broadcast.Broadcast[org.apache.spark.sql.catalyst.util.MapData]", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.child", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "mapId", "tail" : ": String", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupExpression.mapId", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#mapId:String", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.mapLookup.MapLookupImport", "members_trait" : [{"label" : "mapLookupsFromDFs", "tail" : "(creators: Map[String, MapCreator]): MapLookups", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupImport.mapLookupsFromDFs", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#mapLookupsFromDFs(creators:Map[String,MapLookupImport.this.MapCreator]):MapLookupImport.this.MapLookups", "kind" : "def"}, {"label" : "MapCreator", "tail" : "", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupImport.MapCreator", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#MapCreator=()=>(org.apache.spark.sql.DataFrame,org.apache.spark.sql.Column,org.apache.spark.sql.Column)", "kind" : "type"}, {"label" : "MapLookups", "tail" : "", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupImport.MapLookups", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#MapLookups=Map[String,(org.apache.spark.broadcast.Broadcast[org.apache.spark.sql.catalyst.util.MapData],org.apache.spark.sql.types.DataType)]", "kind" : "type"}, {"label" : "registerMapLookupsAndFunction", "tail" : "(mapLookups: MapLookups): Unit", "member" : "com.sparkutils.quality.impl.mapLookup.MapLookupImport.registerMapLookupsAndFunction", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#registerMapLookupsAndFunction(mapLookups:MapLookupImport.this.MapLookups):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/mapLookup\/MapLookupImport.html", "kind" : "trait"}], "org.apache.spark.sql.qualityFunctions" : [{"name" : "org.apache.spark.sql.qualityFunctions.Digest", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "digest", "tail" : "(): Array[Long]", "member" : "org.apache.spark.sql.qualityFunctions.Digest.digest", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#digest:Array[Long]", "kind" : "abstract def"}, {"label" : "hashBytes", "tail" : "(base: Array[Byte], offset: Int, length: Int): Unit", "member" : "org.apache.spark.sql.qualityFunctions.Digest.hashBytes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#hashBytes(base:Array[Byte],offset:Int,length:Int):Unit", "kind" : "abstract def"}, {"label" : "hashLong", "tail" : "(l: Long): Unit", "member" : "org.apache.spark.sql.qualityFunctions.Digest.hashLong", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#hashLong(l:Long):Unit", "kind" : "abstract def"}, {"label" : "hashInt", "tail" : "(i: Int): Unit", "member" : "org.apache.spark.sql.qualityFunctions.Digest.hashInt", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html#hashInt(i:Int):Unit", "kind" : "abstract def"}], "shortDescription" : "Basic digest implementation for Array[Long] based hashes", "trait" : "org\/apache\/spark\/sql\/qualityFunctions\/Digest.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.qualityFunctions.DigestFactory", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "length", "tail" : "(): Int", "member" : "org.apache.spark.sql.qualityFunctions.DigestFactory.length", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#length:Int", "kind" : "abstract def"}, {"label" : "fresh", "tail" : "(): Digest", "member" : "org.apache.spark.sql.qualityFunctions.DigestFactory.fresh", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html#fresh:org.apache.spark.sql.qualityFunctions.Digest", "kind" : "abstract def"}], "shortDescription" : "Factory to get a new or reset digest for each row", "trait" : "org\/apache\/spark\/sql\/qualityFunctions\/DigestFactory.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.qualityFunctions.DoCodegenFallbackHandler", "shortDescription" : "Defaults to calling codeGen, this can either be an original compilation approach or the CodegenFallback depending on implementation.", "members_class" : [{"label" : "transform", "tail" : "(expr: Expression, scope: Map[ExprId, NamedLambdaVariableCodeGen]): Expression", "member" : "org.apache.spark.sql.qualityFunctions.DoCodegenFallbackHandler.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#transform(expr:org.apache.spark.sql.catalyst.expressions.Expression,scope:Map[org.apache.spark.sql.catalyst.expressions.ExprId,org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "shouldTransform", "tail" : "(expr: Expression): Seq[NamedLambdaVariable]", "member" : "org.apache.spark.sql.qualityFunctions.DoCodegenFallbackHandler.shouldTransform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#shouldTransform(expr:org.apache.spark.sql.catalyst.expressions.Expression):Seq[org.apache.spark.sql.catalyst.expressions.NamedLambdaVariable]", "kind" : "def"}, {"member" : "org.apache.spark.sql.qualityFunctions.DoCodegenFallbackHandler#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "org\/apache\/spark\/sql\/qualityFunctions\/DoCodegenFallbackHandler.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.qualityFunctions.FunCall", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html", "members_object" : [{"label" : "applyFunN", "tail" : "(ff: FunForward, transformFunction: (LambdaFunction, NamedExpression, Expression) ⇒ Expression): FunN", "member" : "org.apache.spark.sql.qualityFunctions.FunCall.applyFunN", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#applyFunN(ff:org.apache.spark.sql.qualityFunctions.FunForward,transformFunction:(org.apache.spark.sql.catalyst.expressions.LambdaFunction,org.apache.spark.sql.catalyst.expressions.NamedExpression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.qualityFunctions.FunN", "kind" : "def"}, {"label" : "apply", "tail" : "(ff: FunForward): Expression", "member" : "org.apache.spark.sql.qualityFunctions.FunCall.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#apply(ff:org.apache.spark.sql.qualityFunctions.FunForward):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunCall$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.qualityFunctions.FunDoGenCode", "members_trait" : [{"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.qualityFunctions.FunDoGenCode.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "doActualGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.qualityFunctions.FunDoGenCode.doActualGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#doActualGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "abstract def"}, {"label" : "attemptCodeGen", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.FunDoGenCode.attemptCodeGen", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#attemptCodeGen:Boolean", "kind" : "abstract def"}, {"label" : "processed", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.FunDoGenCode.processed", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#processed:Boolean", "kind" : "abstract def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "abstract def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#nullable:Boolean", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "Generate code for any FunX including nested, normal doGenCode defaults to codegenfallback", "trait" : "org\/apache\/spark\/sql\/qualityFunctions\/FunDoGenCode.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.qualityFunctions.FunForward", "shortDescription" : "Forwards calls to the function arguments via setters.", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.qualityFunctions.FunForward.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.FunForward.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.FunForward.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.FunForward.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#nullable:Boolean", "kind" : "def"}, {"label" : "fun", "tail" : ": Expression", "member" : "org.apache.spark.sql.qualityFunctions.FunForward.fun", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#fun:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "args", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.FunForward.args", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#args:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"label" : "function", "tail" : ": FunN", "member" : "org.apache.spark.sql.qualityFunctions.FunForward.function", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#function:org.apache.spark.sql.qualityFunctions.FunN", "kind" : "lazy val"}, {"label" : "params", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.FunForward.params", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#params:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"member" : "org.apache.spark.sql.qualityFunctions.FunForward#<init>", "error" : "unsupported entity"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.FunForward.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/FunForward.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.qualityFunctions.FunN", "shortDescription" : "Lambda function with multiple args, typically created with a placeholder AtomicRefExpression args", "members_case class" : [{"label" : "doActualGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.qualityFunctions.FunN.doActualGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#doActualGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.qualityFunctions.FunN.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.FunN.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.FunN.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.qualityFunctions.FunN.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "eval", "tail" : "(inputRow: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.FunN.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#eval(inputRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "elementVars", "tail" : ": Seq[NamedLambdaVariable]", "member" : "org.apache.spark.sql.qualityFunctions.FunN.elementVars", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#elementVars:Seq[org.apache.spark.sql.catalyst.expressions.NamedLambdaVariable]", "kind" : "lazy val"}, {"label" : "elementNamedVariables", "tail" : ": Seq[NamedExpression]", "member" : "org.apache.spark.sql.qualityFunctions.FunN.elementNamedVariables", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#elementNamedVariables:Seq[org.apache.spark.sql.catalyst.expressions.NamedExpression]", "kind" : "lazy val"}, {"label" : "lambdaFunction", "tail" : ": Expression", "member" : "org.apache.spark.sql.qualityFunctions.FunN.lambdaFunction", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#lambdaFunction:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "bindInternal", "tail" : "(f: (Expression, Seq[(DataType, Boolean)]) ⇒ LambdaFunction): HigherOrderFunction", "member" : "org.apache.spark.sql.qualityFunctions.FunN.bindInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#bindInternal(f:(org.apache.spark.sql.catalyst.expressions.Expression,Seq[(org.apache.spark.sql.types.DataType,Boolean)])=>org.apache.spark.sql.catalyst.expressions.LambdaFunction):org.apache.spark.sql.catalyst.expressions.HigherOrderFunction", "kind" : "def"}, {"label" : "functionTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.qualityFunctions.FunN.functionTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#functionTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "functions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.FunN.functions", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#functions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "argumentTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.qualityFunctions.FunN.argumentTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#argumentTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.qualityFunctions.FunN.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#prettyName:String", "kind" : "def"}, {"member" : "org.apache.spark.sql.qualityFunctions.FunN#<init>", "error" : "unsupported entity"}, {"label" : "attemptCodeGen", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.FunN.attemptCodeGen", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#attemptCodeGen:Boolean", "kind" : "val"}, {"label" : "processed", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.FunN.processed", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#processed:Boolean", "kind" : "val"}, {"label" : "name", "tail" : ": Option[String]", "member" : "org.apache.spark.sql.qualityFunctions.FunN.name", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#name:Option[String]", "kind" : "val"}, {"label" : "function", "tail" : ": Expression", "member" : "org.apache.spark.sql.qualityFunctions.FunN.function", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#function:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "arguments", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.FunN.arguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.qualityFunctions.FunDoGenCode.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "bind", "tail" : "(f: (Expression, Seq[(DataType, Boolean)]) ⇒ LambdaFunction): HigherOrderFunction", "member" : "com.sparkutils.quality.impl.HigherOrderFunctionLike.bind", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#bind(f:(org.apache.spark.sql.catalyst.expressions.Expression,Seq[(org.apache.spark.sql.types.DataType,Boolean)])=>org.apache.spark.sql.catalyst.expressions.LambdaFunction):org.apache.spark.sql.catalyst.expressions.HigherOrderFunction", "kind" : "def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "functionsForEval", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.functionsForEval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#functionsForEval:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.inputTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkArgumentDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.checkArgumentDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#checkArgumentDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "argumentsResolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.argumentsResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#argumentsResolved:Boolean", "kind" : "lazy val"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#nullable:Boolean", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/FunN.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression", "shortDescription" : "A function that calculates hash value for a group of expressions.", "members_class" : [{"label" : "computeHash", "tail" : "(input: String, dataType: DataType, result: String, ctx: CodegenContext): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.computeHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#computeHash(input:String,dataType:org.apache.spark.sql.types.DataType,result:String,ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):String", "kind" : "def"}, {"label" : "genHashForStruct", "tail" : "(ctx: CodegenContext, input: String, result: String, fields: Array[StructField]): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashForStruct", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashForStruct(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,input:String,result:String,fields:Array[org.apache.spark.sql.types.StructField]):String", "kind" : "def"}, {"label" : "genHashForArray", "tail" : "(ctx: CodegenContext, input: String, result: String, elementType: DataType, containsNull: Boolean): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashForArray", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashForArray(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,input:String,result:String,elementType:org.apache.spark.sql.types.DataType,containsNull:Boolean):String", "kind" : "def"}, {"label" : "genHashForMap", "tail" : "(ctx: CodegenContext, input: String, result: String, keyType: DataType, valueType: DataType, valueContainsNull: Boolean): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashForMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashForMap(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,input:String,result:String,keyType:org.apache.spark.sql.types.DataType,valueType:org.apache.spark.sql.types.DataType,valueContainsNull:Boolean):String", "kind" : "def"}, {"label" : "genHashString", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashString(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashCalendarInterval", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashCalendarInterval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashCalendarInterval(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashTimestamp", "tail" : "(t: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashTimestamp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashTimestamp(t:String,result:String):String", "kind" : "def"}, {"label" : "genHashDecimal", "tail" : "(ctx: CodegenContext, d: DecimalType, input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashDecimal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashDecimal(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,d:org.apache.spark.sql.types.DecimalType,input:String,result:String):String", "kind" : "def"}, {"label" : "genHashDouble", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashDouble", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashDouble(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashFloat", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashFloat", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashFloat(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashBoolean", "tail" : "(input: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashBoolean", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashBoolean(input:String,result:String):String", "kind" : "def"}, {"label" : "genHashBytes", "tail" : "(b: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashBytes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashBytes(b:String,result:String):String", "kind" : "def"}, {"label" : "genHashLong", "tail" : "(l: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashLong", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashLong(l:String,result:String):String", "kind" : "def"}, {"label" : "genHashInt", "tail" : "(i: String, result: String): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.genHashInt", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genHashInt(i:String,result:String):String", "kind" : "def"}, {"label" : "nullSafeElementHash", "tail" : "(input: String, index: String, nullable: Boolean, elementType: DataType, result: String, ctx: CodegenContext): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.nullSafeElementHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#nullSafeElementHash(input:String,index:String,nullable:Boolean,elementType:org.apache.spark.sql.types.DataType,result:String,ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):String", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression#<init>", "error" : "unsupported entity"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "hasherClassName", "tail" : "(): String", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.hasherClassName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#hasherClassName:String", "kind" : "abstract def"}, {"label" : "computeHash", "tail" : "(value: Any, dataType: DataType, hash: Digest): Unit", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.computeHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#computeHash(value:Any,dataType:org.apache.spark.sql.types.DataType,hash:org.apache.spark.sql.qualityFunctions.Digest):Unit", "kind" : "abstract def"}, {"label" : "asStruct", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.asStruct", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#asStruct:Boolean", "kind" : "abstract val"}, {"label" : "factory", "tail" : ": DigestFactory", "member" : "org.apache.spark.sql.qualityFunctions.HashLongsExpression.factory", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#factory:org.apache.spark.sql.qualityFunctions.DigestFactory", "kind" : "abstract val"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/sql\/qualityFunctions\/HashLongsExpression.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.qualityFunctions.InterpretedHashLongsFunction", "shortDescription" : "Base class for interpreted hash functions.", "members_class" : [{"label" : "hash", "tail" : "(value: Any, dataType: DataType, digest: Digest): Digest", "member" : "org.apache.spark.sql.qualityFunctions.InterpretedHashLongsFunction.hash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#hash(value:Any,dataType:org.apache.spark.sql.types.DataType,digest:org.apache.spark.sql.qualityFunctions.Digest):org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"member" : "org.apache.spark.sql.qualityFunctions.InterpretedHashLongsFunction#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "hashBytes", "tail" : "(base: Array[Byte], offset: Int, length: Int, digest: Digest): Digest", "member" : "org.apache.spark.sql.qualityFunctions.InterpretedHashLongsFunction.hashBytes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#hashBytes(base:Array[Byte],offset:Int,length:Int,digest:org.apache.spark.sql.qualityFunctions.Digest):org.apache.spark.sql.qualityFunctions.Digest", "kind" : "abstract def"}, {"label" : "hashLong", "tail" : "(l: Long, digest: Digest): Digest", "member" : "org.apache.spark.sql.qualityFunctions.InterpretedHashLongsFunction.hashLong", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#hashLong(l:Long,digest:org.apache.spark.sql.qualityFunctions.Digest):org.apache.spark.sql.qualityFunctions.Digest", "kind" : "abstract def"}, {"label" : "hashInt", "tail" : "(i: Int, digest: Digest): Digest", "member" : "org.apache.spark.sql.qualityFunctions.InterpretedHashLongsFunction.hashInt", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html#hashInt(i:Int,digest:org.apache.spark.sql.qualityFunctions.Digest):org.apache.spark.sql.qualityFunctions.Digest", "kind" : "abstract def"}], "class" : "org\/apache\/spark\/sql\/qualityFunctions\/InterpretedHashLongsFunction.html", "kind" : "class"}, {"name" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils", "shortDescription" : "Functionality related to LambdaCompilation.", "object" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html", "members_object" : [{"label" : "NamedLambdaVariableOps", "tail" : "", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.NamedLambdaVariableOps", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#NamedLambdaVariableOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "processLambda", "tail" : "(expr: Expression, ctx: CodegenContext, ev: ExprCode): Expression", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.processLambda", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#processLambda(expr:org.apache.spark.sql.catalyst.expressions.Expression,ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "defaultGen", "tail" : ": DoCodegenFallbackHandler", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.defaultGen", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#defaultGen:org.apache.spark.sql.qualityFunctions.DoCodegenFallbackHandler", "kind" : "val"}, {"label" : "compilationHandlers", "tail" : "(): Map[String, LambdaCompilationHandler]", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.compilationHandlers", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#compilationHandlers:Map[String,org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.LambdaCompilationHandler]", "kind" : "def"}, {"label" : "convertToCompilationHandlers", "tail" : "(objects: Map[String, Any]): Map[String, LambdaCompilationHandler]", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.convertToCompilationHandlers", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#convertToCompilationHandlers(objects:Map[String,Any]):scala.collection.immutable.Map[String,org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.LambdaCompilationHandler]", "kind" : "def"}, {"label" : "loadLambdaCompilationHandlers", "tail" : "(lambdaHandlers: Map[String, String]): Map[String, Any]", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.loadLambdaCompilationHandlers", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#loadLambdaCompilationHandlers(lambdaHandlers:Map[String,String]):Map[String,Any]", "kind" : "def"}, {"label" : "envLambdaHandlers", "tail" : "(env: String): Map[String, String]", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.envLambdaHandlers", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#envLambdaHandlers(env:String):scala.collection.immutable.Map[String,String]", "kind" : "def"}, {"label" : "getLambdaEnv", "tail" : "(): String", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.getLambdaEnv", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#getLambdaEnv:String", "kind" : "def"}, {"label" : "lambdaENV", "tail" : ": String", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.lambdaENV", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#lambdaENV:String", "kind" : "val"}, {"label" : "LambdaCompilationHandler", "tail" : "", "member" : "org.apache.spark.sql.qualityFunctions.LambdaCompilationUtils.LambdaCompilationHandler", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#LambdaCompilationHandlerextendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaCompilationUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html", "members_object" : [{"label" : "processTopCallFun", "tail" : "(fun: FunN, l: LambdaFunction, ff: FunForward, args: Seq[Expression]): FunN", "member" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions.processTopCallFun", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#processTopCallFun(fun:org.apache.spark.sql.qualityFunctions.FunN,l:org.apache.spark.sql.catalyst.expressions.LambdaFunction,ff:org.apache.spark.sql.qualityFunctions.FunForward,args:Seq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.qualityFunctions.FunN", "kind" : "def"}, {"label" : "wrapFunN", "tail" : "(replacedArgs: Seq[Expression], actualFun: FunN): FunForward", "member" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions.wrapFunN", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#wrapFunN(replacedArgs:Seq[org.apache.spark.sql.catalyst.expressions.Expression],actualFun:org.apache.spark.sql.qualityFunctions.FunN):org.apache.spark.sql.qualityFunctions.FunForward", "kind" : "def"}, {"label" : "registerLambdaFunctions", "tail" : "(functions: Seq[LambdaFunction]): Unit", "member" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions.registerLambdaFunctions", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#registerLambdaFunctions(functions:Seq[com.sparkutils.quality.LambdaFunction]):Unit", "kind" : "def"}, {"label" : "toFunctionMap", "tail" : "(functions: Seq[LambdaFunction]): lambdaFunctions", "member" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions.toFunctionMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#toFunctionMap(functions:Seq[com.sparkutils.quality.LambdaFunction]):org.apache.spark.sql.qualityFunctions.LambdaFunctions.lambdaFunctions", "kind" : "def"}, {"label" : "lambdaArgCount", "tail" : "(expression: Expression): Int", "member" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions.lambdaArgCount", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#lambdaArgCount(expression:org.apache.spark.sql.catalyst.expressions.Expression):Int", "kind" : "def"}, {"label" : "PlaceHolder", "tail" : ": String", "member" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions.PlaceHolder", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#PlaceHolder:String", "kind" : "val"}, {"label" : "Lambda", "tail" : ": String", "member" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions.Lambda", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#Lambda:String", "kind" : "val"}, {"label" : "CallFun", "tail" : ": String", "member" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions.CallFun", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#CallFun:String", "kind" : "val"}, {"label" : "lambdaFunctions", "tail" : "", "member" : "org.apache.spark.sql.qualityFunctions.LambdaFunctions.lambdaFunctions", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#lambdaFunctions=Map[String,Map[Int,(com.sparkutils.quality.LambdaFunction,org.apache.spark.sql.catalyst.expressions.Expression)]]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/LambdaFunctions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.qualityFunctions.MapMerge", "shortDescription" : "Transforms a map", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.qualityFunctions.MapMerge.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.MapMerge.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#nullable:Boolean", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.MapMerge.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "eval", "tail" : "(inputRow: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.MapMerge.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#eval(inputRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "add", "tail" : ": (Expression, Expression) ⇒ Expression", "member" : "org.apache.spark.sql.qualityFunctions.MapMerge.add", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#add:(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "valueType", "tail" : ": DataType", "member" : "org.apache.spark.sql.qualityFunctions.MapMerge.valueType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#valueType:org.apache.spark.sql.types.DataType", "kind" : "lazy val"}, {"label" : "keyType", "tail" : ": DataType", "member" : "org.apache.spark.sql.qualityFunctions.MapMerge.keyType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#keyType:org.apache.spark.sql.types.DataType", "kind" : "lazy val"}, {"member" : "org.apache.spark.sql.qualityFunctions.MapMerge#<init>", "error" : "unsupported entity"}, {"label" : "addF", "tail" : ": (DataType) ⇒ Option[(Expression, Expression) ⇒ Expression]", "member" : "org.apache.spark.sql.qualityFunctions.MapMerge.addF", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#addF:org.apache.spark.sql.types.DataType=>Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.MapMerge.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/MapMerge.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.qualityFunctions.MapTransform", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html", "members_object" : [{"label" : "create", "tail" : "(arguement: Expression, key: Expression, function: Expression, zero: (DataType) ⇒ Option[Any]): MapTransform", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.create", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#create(arguement:org.apache.spark.sql.catalyst.expressions.Expression,key:org.apache.spark.sql.catalyst.expressions.Expression,function:org.apache.spark.sql.catalyst.expressions.Expression,zero:org.apache.spark.sql.types.DataType=>Option[Any]):org.apache.spark.sql.qualityFunctions.MapTransform", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "eval", "tail" : "(inputRow: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#eval(inputRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "elementVar", "tail" : ": NamedLambdaVariable", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.elementVar", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#elementVar:org.apache.spark.sql.catalyst.expressions.NamedLambdaVariable", "kind" : "lazy val"}, {"label" : "bindInternal", "tail" : "(f: (Expression, Seq[(DataType, Boolean)]) ⇒ LambdaFunction): HigherOrderFunction", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.bindInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#bindInternal(f:(org.apache.spark.sql.catalyst.expressions.Expression,Seq[(org.apache.spark.sql.types.DataType,Boolean)])=>org.apache.spark.sql.catalyst.expressions.LambdaFunction):org.apache.spark.sql.catalyst.expressions.HigherOrderFunction", "kind" : "def"}, {"label" : "functionTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.functionTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#functionTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "functions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.functions", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#functions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "argumentTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.argumentTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#argumentTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "arguments", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.arguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "valueType", "tail" : ": DataType", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.valueType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#valueType:org.apache.spark.sql.types.DataType", "kind" : "lazy val"}, {"label" : "keyType", "tail" : ": DataType", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.keyType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#keyType:org.apache.spark.sql.types.DataType", "kind" : "lazy val"}, {"label" : "indexMap", "tail" : ": ThreadLocal[Map[Any, Int]]", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.indexMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#indexMap:ThreadLocal[scala.collection.mutable.Map[Any,Int]]", "kind" : "val"}, {"label" : "zero", "tail" : ": Any", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.zero", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#zero:Any", "kind" : "lazy val"}, {"member" : "org.apache.spark.sql.qualityFunctions.MapTransform#<init>", "error" : "unsupported entity"}, {"label" : "zeroF", "tail" : ": (DataType) ⇒ Option[Any]", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.zeroF", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#zeroF:org.apache.spark.sql.types.DataType=>Option[Any]", "kind" : "val"}, {"label" : "function", "tail" : ": Expression", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.function", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#function:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "key", "tail" : ": Expression", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.key", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#key:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "argument", "tail" : ": Expression", "member" : "org.apache.spark.sql.qualityFunctions.MapTransform.argument", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#argument:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "bind", "tail" : "(f: (Expression, Seq[(DataType, Boolean)]) ⇒ LambdaFunction): HigherOrderFunction", "member" : "com.sparkutils.quality.impl.HigherOrderFunctionLike.bind", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#bind(f:(org.apache.spark.sql.catalyst.expressions.Expression,Seq[(org.apache.spark.sql.types.DataType,Boolean)])=>org.apache.spark.sql.catalyst.expressions.LambdaFunction):org.apache.spark.sql.catalyst.expressions.HigherOrderFunction", "kind" : "def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "functionsForEval", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.functionsForEval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#functionsForEval:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.inputTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkArgumentDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.checkArgumentDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#checkArgumentDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "argumentsResolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.argumentsResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#argumentsResolved:Boolean", "kind" : "lazy val"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#nullable:Boolean", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/MapTransform.html", "kind" : "object"}, {"name" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen", "shortDescription" : "Replaces NamedLambdaVariables for simple inlined codegen.", "members_case class" : [{"label" : "newInstance", "tail" : "(): NamedExpression", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.newInstance", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#newInstance():org.apache.spark.sql.catalyst.expressions.NamedExpression", "kind" : "def"}, {"label" : "toAttribute", "tail" : "(): Attribute", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.toAttribute", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#toAttribute:org.apache.spark.sql.catalyst.expressions.Attribute", "kind" : "def"}, {"label" : "qualifier", "tail" : "(): Seq[String]", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.qualifier", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#qualifier:Seq[String]", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "haveNotGenerated", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.haveNotGenerated", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#haveNotGenerated:Boolean", "kind" : "var"}, {"label" : "value", "tail" : ": Any", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.value", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#value:Any", "kind" : "var"}, {"member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen#<init>", "error" : "unsupported entity"}, {"label" : "valueRef", "tail" : ": String", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.valueRef", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#valueRef:String", "kind" : "val"}, {"label" : "exprId", "tail" : ": ExprId", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.exprId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#exprId:org.apache.spark.sql.catalyst.expressions.ExprId", "kind" : "val"}, {"label" : "nullable", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#nullable:Boolean", "kind" : "val"}, {"label" : "dataType", "tail" : ": DataType", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "org.apache.spark.sql.qualityFunctions.NamedLambdaVariableCodeGen.name", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#name:String", "kind" : "val"}, {"label" : "typeSuffix", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.NamedExpression.typeSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#typeSuffix:String", "kind" : "def"}, {"label" : "metadata", "tail" : "(): Metadata", "member" : "org.apache.spark.sql.catalyst.expressions.NamedExpression.metadata", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#metadata:org.apache.spark.sql.types.Metadata", "kind" : "def"}, {"label" : "qualifiedName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.NamedExpression.qualifiedName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#qualifiedName:String", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.NamedExpression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/NamedLambdaVariableCodeGen.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.qualityFunctions.PlaceHolderExpression", "shortDescription" : "Only used with Lambda placeholders, defaults to allowing nullable values", "members_case class" : [{"member" : "org.apache.spark.sql.qualityFunctions.PlaceHolderExpression#<init>", "error" : "unsupported entity"}, {"label" : "nullable", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.PlaceHolderExpression.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#nullable:Boolean", "kind" : "val"}, {"label" : "dataType", "tail" : ": DataType", "member" : "org.apache.spark.sql.qualityFunctions.PlaceHolderExpression.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "final def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Unevaluable.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#foldable:Boolean", "kind" : "final def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/PlaceHolderExpression.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.qualityFunctions.RefCodeGen", "members_trait" : [{"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.qualityFunctions.RefCodeGen.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.RefCodeGen.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "org\/apache\/spark\/sql\/qualityFunctions\/RefCodeGen.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.qualityFunctions.RefExpression", "shortDescription" : "Getter, trimmed version of NamedLambdaVariable as it should never be resolved", "members_case class" : [{"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.RefExpression.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.RefExpression.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "value", "tail" : ": Any", "member" : "org.apache.spark.sql.qualityFunctions.RefExpression.value", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#value:Any", "kind" : "var"}, {"member" : "org.apache.spark.sql.qualityFunctions.RefExpression#<init>", "error" : "unsupported entity"}, {"label" : "index", "tail" : ": Int", "member" : "org.apache.spark.sql.qualityFunctions.RefExpression.index", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#index:Int", "kind" : "val"}, {"label" : "nullable", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.RefExpression.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#nullable:Boolean", "kind" : "val"}, {"label" : "dataType", "tail" : ": DataType", "member" : "org.apache.spark.sql.qualityFunctions.RefExpression.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.qualityFunctions.RefCodeGen.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpression.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.qualityFunctions.RefExpressionLazyType", "shortDescription" : "Getter, trimmed version of NamedLambdaVariable as it should never be resolved", "members_case class" : [{"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.RefExpressionLazyType.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.RefExpressionLazyType.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.RefExpressionLazyType.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "value", "tail" : ": Any", "member" : "org.apache.spark.sql.qualityFunctions.RefExpressionLazyType.value", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#value:Any", "kind" : "var"}, {"member" : "org.apache.spark.sql.qualityFunctions.RefExpressionLazyType#<init>", "error" : "unsupported entity"}, {"label" : "nullable", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.RefExpressionLazyType.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#nullable:Boolean", "kind" : "val"}, {"label" : "dataTypeF", "tail" : ": () ⇒ DataType", "member" : "org.apache.spark.sql.qualityFunctions.RefExpressionLazyType.dataTypeF", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#dataTypeF:()=>org.apache.spark.sql.types.DataType", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.qualityFunctions.RefCodeGen.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/RefExpressionLazyType.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression", "shortDescription" : "Wraps other expressions and stores the result in an RefExpression -", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "from", "tail" : ": Expression", "member" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression.from", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#from:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "atomic", "tail" : ": RefExpression", "member" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression.atomic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#atomic:org.apache.spark.sql.qualityFunctions.RefExpression", "kind" : "lazy val"}, {"member" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression#<init>", "error" : "unsupported entity"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.RefSetterExpression.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/RefSetterExpression.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast", "shortDescription" : "Runs all of the children and returns the last's eval result - allows stitching together lambdas with aggregates", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast.dataType", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast.resolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast.nullable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#nullable:Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast.eval", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "ret", "tail" : ": Expression", "member" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast.ret", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#ret:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "runAll", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast.runAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#runAll:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"member" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast#<init>", "error" : "unsupported entity"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.RunAllReturnLast.children", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "org\/apache\/spark\/sql\/qualityFunctions\/RunAllReturnLast.html", "kind" : "case class"}, {"name" : "org.apache.spark.sql.qualityFunctions.SafeUTF8", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html", "members_object" : [{"label" : "safeUT8ByteArray", "tail" : "(s: UTF8String): (Array[Byte], Int, Int)", "member" : "org.apache.spark.sql.qualityFunctions.SafeUTF8.safeUT8ByteArray", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#safeUT8ByteArray(s:org.apache.spark.unsafe.types.UTF8String):(Array[Byte],Int,Int)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SafeUTF8$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "org.apache.spark.sql.qualityFunctions.SeqArgs", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "function", "tail" : "(): Expression", "member" : "org.apache.spark.sql.qualityFunctions.SeqArgs.function", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#function:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract def"}, {"label" : "arguments", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.qualityFunctions.SeqArgs.arguments", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html#arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html", "members_object" : [{"label" : "unapply", "tail" : "(expression: Expression): Option[(Seq[Expression], Expression)]", "member" : "org.apache.spark.sql.qualityFunctions.SeqArgs.unapply", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#unapply(expression:org.apache.spark.sql.catalyst.expressions.Expression):Option[(Seq[org.apache.spark.sql.catalyst.expressions.Expression],org.apache.spark.sql.catalyst.expressions.Expression)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "org\/apache\/spark\/sql\/qualityFunctions\/SeqArgs.html", "kind" : "object"}, {"name" : "org.apache.spark.sql.qualityFunctions.utils", "shortDescription" : "", "object" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html", "members_object" : [{"label" : "defaultMapCompare", "tail" : "(dataType: DataType, extension: (DataType) ⇒ Option[(Any, Any) ⇒ Int]): Option[(Any, Any) ⇒ Int]", "member" : "org.apache.spark.sql.qualityFunctions.utils.defaultMapCompare", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#defaultMapCompare(dataType:org.apache.spark.sql.types.DataType,extension:org.apache.spark.sql.types.DataType=>Option[(Any,Any)=>Int]):Option[(Any,Any)=>Int]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/qualityFunctions\/utils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.sparkutils.quality.impl.id" : [{"name" : "com.sparkutils.quality.impl.id.BaseWithLongs", "members_trait" : [{"label" : "base64", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.base64", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#base64:String", "kind" : "def"}, {"label" : "bitLength", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.bitLength", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#bitLength:Int", "kind" : "def"}, {"label" : "bitset", "tail" : "(): BitSet", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.bitset", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#bitset:scala.collection.immutable.BitSet", "kind" : "def"}, {"label" : "rawDataType", "tail" : "(): StructType", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.rawDataType", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#rawDataType:org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "base", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.base", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#base:Int", "kind" : "def"}, {"label" : "dataType", "tail" : "(prefix: String): StructType", "member" : "com.sparkutils.quality.impl.id.ID.dataType", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#dataType(prefix:String):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "array", "tail" : "(): Array[Long]", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.array", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#array:Array[Long]", "kind" : "abstract def"}, {"label" : "comparableImplementation", "tail" : "(other: ID): Boolean", "member" : "com.sparkutils.quality.impl.id.ID.comparableImplementation", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#comparableImplementation(other:com.sparkutils.quality.impl.id.ID):Boolean", "kind" : "abstract def"}, {"label" : "header", "tail" : ": Byte", "member" : "com.sparkutils.quality.impl.id.ID.header", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#header:Byte", "kind" : "abstract val"}, {"label" : "idType", "tail" : ": IDType", "member" : "com.sparkutils.quality.impl.id.ID.idType", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#idType:com.sparkutils.quality.impl.id.IDType", "kind" : "abstract val"}, {"label" : "isGenericLongBased", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.id.ID.isGenericLongBased", "link" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html#isGenericLongBased:Boolean", "kind" : "abstract val"}], "shortDescription" : "Represents an ID using base with length and 4 bit leading type and an array of longs", "trait" : "com\/sparkutils\/quality\/impl\/id\/BaseWithLongs.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.id.GenericLongBasedID", "shortDescription" : "Represents a GenericLongBasedID", "members_case class" : [{"label" : "header", "tail" : ": Byte", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedID.header", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#header:Byte", "kind" : "val"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedID.equals", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#equals(obj:Any):Boolean", "kind" : "def"}, {"label" : "comparableImplementation", "tail" : "(other: ID): Boolean", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedID.comparableImplementation", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#comparableImplementation(other:com.sparkutils.quality.impl.id.ID):Boolean", "kind" : "def"}, {"label" : "isGenericLongBased", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedID.isGenericLongBased", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#isGenericLongBased:Boolean", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.id.GenericLongBasedID#<init>", "error" : "unsupported entity"}, {"label" : "array", "tail" : ": Array[Long]", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedID.array", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#array:Array[Long]", "kind" : "val"}, {"label" : "idType", "tail" : ": IDType", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedID.idType", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#idType:com.sparkutils.quality.impl.id.IDType", "kind" : "val"}, {"label" : "base64", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.base64", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#base64:String", "kind" : "def"}, {"label" : "bitLength", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.bitLength", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#bitLength:Int", "kind" : "def"}, {"label" : "bitset", "tail" : "(): BitSet", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.bitset", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#bitset:scala.collection.immutable.BitSet", "kind" : "def"}, {"label" : "rawDataType", "tail" : "(): StructType", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.rawDataType", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#rawDataType:org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "base", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.base", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#base:Int", "kind" : "def"}, {"label" : "dataType", "tail" : "(prefix: String): StructType", "member" : "com.sparkutils.quality.impl.id.ID.dataType", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#dataType(prefix:String):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedID.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.id.GenericLongBasedIDExpression", "shortDescription" : "Delegates ID creation to some other expression which must provide an array of longs result.", "object" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html", "members_object" : [{"label" : "longArrayConverter", "tail" : "(expr: Expression): ((Any) ⇒ Array[Long], Int)", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedIDExpression.longArrayConverter", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#longArrayConverter(expr:org.apache.spark.sql.catalyst.expressions.Expression):(Any=>Array[Long],Int)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedIDExpression.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedIDExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedIDExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.id.GenericLongBasedIDExpression#<init>", "error" : "unsupported entity"}, {"label" : "prefix", "tail" : ": String", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedIDExpression.prefix", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#prefix:String", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedIDExpression.child", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "id", "tail" : ": IDType", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedIDExpression.id", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#id:com.sparkutils.quality.impl.id.IDType", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedIDExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.id.GenericLongBasedImports", "members_trait" : [{"label" : "murmur3ID", "tail" : "(prefix: String, child1: Column, restOfchildren: Column*): Column", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedImports.murmur3ID", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#murmur3ID(prefix:String,child1:org.apache.spark.sql.Column,restOfchildren:org.apache.spark.sql.Column*):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "murmur3ID", "tail" : "(prefix: String, children: Seq[Column]): Column", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedImports.murmur3ID", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#murmur3ID(prefix:String,children:Seq[org.apache.spark.sql.Column]):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "hashID", "tail" : "(prefix: String, digestImpl: String, children: Column*): Column", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedImports.hashID", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#hashID(prefix:String,digestImpl:String,children:org.apache.spark.sql.Column*):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "hashID", "tail" : "(prefix: String, children: Seq[Column], digestImpl: String): Column", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedImports.hashID", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#hashID(prefix:String,children:Seq[org.apache.spark.sql.Column],digestImpl:String):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "providedID", "tail" : "(prefix: String, child: Column): Column", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedImports.providedID", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#providedID(prefix:String,child:org.apache.spark.sql.Column):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "fieldBasedID", "tail" : "(prefix: String, digestImpl: String, children: Column*): Column", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedImports.fieldBasedID", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#fieldBasedID(prefix:String,digestImpl:String,children:org.apache.spark.sql.Column*):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "fieldBasedID", "tail" : "(prefix: String, children: Seq[Column], digestImpl: String, digestFactory: (String) ⇒ DigestFactory): Column", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedImports.fieldBasedID", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#fieldBasedID(prefix:String,children:Seq[org.apache.spark.sql.Column],digestImpl:String,digestFactory:String=>org.apache.spark.sql.qualityFunctions.DigestFactory):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "rngID", "tail" : "(prefix: String): Column", "member" : "com.sparkutils.quality.impl.id.GenericLongBasedImports.rngID", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#rngID(prefix:String):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/id\/GenericLongBasedImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID", "shortDescription" : "Represents a Guaranteed globally unique 160 bit ID within spark based on twitters 64bit snowflake id:leading 4 bits - type of idpadded 4 bits for future use \/ ease of codenext 48 bits - MAC address of the drivers host network card (unique for run with no central server \/ service requirement)next 32 bits - partition idnext 41 bits - ms since 20210101padded 7 bits - for future use \/ ease of coderemaining 24 bits - partition specific incremented row id - allowing 16777216 rows per ms, which is unlikely to occurand easy to manage overflow either way", "members_case class" : [{"label" : "header", "tail" : ": Byte", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.header", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#header:Byte", "kind" : "val"}, {"label" : "comparableImplementation", "tail" : "(other: ID): Boolean", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.comparableImplementation", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#comparableImplementation(other:com.sparkutils.quality.impl.id.ID):Boolean", "kind" : "def"}, {"label" : "array", "tail" : ": Array[Long]", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.array", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#array:Array[Long]", "kind" : "val"}, {"label" : "base", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.base", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#base:Int", "kind" : "def"}, {"label" : "uniqueOps", "tail" : "(): GuaranteedUniqueIDOps", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.uniqueOps", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#uniqueOps:com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps", "kind" : "def"}, {"label" : "isGenericLongBased", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.isGenericLongBased", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#isGenericLongBased:Boolean", "kind" : "val"}, {"label" : "idType", "tail" : ": IDType", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.idType", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#idType:com.sparkutils.quality.impl.id.IDType", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID#<init>", "error" : "unsupported entity"}, {"label" : "row", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.row", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#row:Int", "kind" : "val"}, {"label" : "partition", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.partition", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#partition:Int", "kind" : "val"}, {"label" : "ms", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.ms", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#ms:Long", "kind" : "val"}, {"label" : "mac", "tail" : ": Array[Byte]", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueID.mac", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#mac:Array[Byte]", "kind" : "val"}, {"label" : "base64", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.base64", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#base64:String", "kind" : "def"}, {"label" : "bitLength", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.bitLength", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#bitLength:Int", "kind" : "def"}, {"label" : "bitset", "tail" : "(): BitSet", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.bitset", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#bitset:scala.collection.immutable.BitSet", "kind" : "def"}, {"label" : "rawDataType", "tail" : "(): StructType", "member" : "com.sparkutils.quality.impl.id.BaseWithLongs.rawDataType", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#rawDataType:org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "dataType", "tail" : "(prefix: String): StructType", "member" : "com.sparkutils.quality.impl.id.ID.dataType", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#dataType(prefix:String):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueID.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression", "shortDescription" : "Delegates ID creation to some other expression which must provide an array of longs result.", "members_case class" : [{"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "evalInternal", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression.evalInternal", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#evalInternal(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "initializeInternal", "tail" : "(partitionIndex: Int): Unit", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression.initializeInternal", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#initializeInternal(partitionIndex:Int):Unit", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "idOps", "tail" : ": GuaranteedUniqueIDOps", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression.idOps", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#idOps:com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps", "kind" : "var"}, {"label" : "idPartition", "tail" : ": GuaranteedUniqueID", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression.idPartition", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#idPartition:com.sparkutils.quality.impl.id.GuaranteedUniqueID", "kind" : "var"}, {"member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression#<init>", "error" : "unsupported entity"}, {"label" : "prefix", "tail" : ": String", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression.prefix", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#prefix:String", "kind" : "val"}, {"label" : "idBase", "tail" : ": GuaranteedUniqueID", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIdIDExpression.idBase", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#idBase:com.sparkutils.quality.impl.id.GuaranteedUniqueID", "kind" : "val"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.eval", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "initialize", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initialize", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#initialize(partitionIndex:Int):Unit", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.foldable", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#foldable:Boolean", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.deterministic", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#deterministic:Boolean", "kind" : "final lazy val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.LeafLike.children", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#children:Seq[T]", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIdIDExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDImports", "members_trait" : [{"label" : "uniqueID", "tail" : "(prefix: String): Column", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDImports.uniqueID", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#uniqueID(prefix:String):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps", "shortDescription" : "Manipulations on the long values directly for use in expressions etc.", "members_class" : [{"label" : "base64", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps.base64", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#base64:String", "kind" : "def"}, {"label" : "incRow", "tail" : "(): Unit", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps.incRow", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#incRow:Unit", "kind" : "def"}, {"label" : "ms", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps.ms", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#ms:Long", "kind" : "var"}, {"label" : "row", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps.row", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#row:Int", "kind" : "var"}, {"label" : "array", "tail" : ": Array[Long]", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps.array", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#array:Array[Long]", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps#<init>", "error" : "unsupported entity"}, {"label" : "base", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.GuaranteedUniqueIDOps.base", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#base:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/sparkutils\/quality\/impl\/id\/GuaranteedUniqueIDOps.html", "kind" : "class"}, {"name" : "com.sparkutils.quality.impl.id.ID", "members_trait" : [{"label" : "dataType", "tail" : "(prefix: String): StructType", "member" : "com.sparkutils.quality.impl.id.ID.dataType", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#dataType(prefix:String):org.apache.spark.sql.types.StructType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "comparableImplementation", "tail" : "(other: ID): Boolean", "member" : "com.sparkutils.quality.impl.id.ID.comparableImplementation", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#comparableImplementation(other:com.sparkutils.quality.impl.id.ID):Boolean", "kind" : "abstract def"}, {"label" : "rawDataType", "tail" : "(): StructType", "member" : "com.sparkutils.quality.impl.id.ID.rawDataType", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#rawDataType:org.apache.spark.sql.types.StructType", "kind" : "abstract def"}, {"label" : "base64", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.id.ID.base64", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#base64:String", "kind" : "abstract def"}, {"label" : "bitLength", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.id.ID.bitLength", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#bitLength:Int", "kind" : "abstract def"}, {"label" : "bitset", "tail" : "(): BitSet", "member" : "com.sparkutils.quality.impl.id.ID.bitset", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#bitset:scala.collection.immutable.BitSet", "kind" : "abstract def"}, {"label" : "header", "tail" : ": Byte", "member" : "com.sparkutils.quality.impl.id.ID.header", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#header:Byte", "kind" : "abstract val"}, {"label" : "idType", "tail" : ": IDType", "member" : "com.sparkutils.quality.impl.id.ID.idType", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#idType:com.sparkutils.quality.impl.id.IDType", "kind" : "abstract val"}, {"label" : "isGenericLongBased", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.id.ID.isGenericLongBased", "link" : "com\/sparkutils\/quality\/impl\/id\/ID.html#isGenericLongBased:Boolean", "kind" : "abstract val"}], "shortDescription" : "Represents an extensible ID starting with 160bits.", "trait" : "com\/sparkutils\/quality\/impl\/id\/ID.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.id.IDType", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "typeMask", "tail" : ": Byte", "member" : "com.sparkutils.quality.impl.id.IDType.typeMask", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#typeMask:Byte", "kind" : "abstract val"}, {"label" : "isProvided", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.id.IDType.isProvided", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#isProvided:Boolean", "kind" : "abstract val"}, {"label" : "isGuaranteedUnique", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.id.IDType.isGuaranteedUnique", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#isGuaranteedUnique:Boolean", "kind" : "abstract val"}, {"label" : "isFieldBased", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.id.IDType.isFieldBased", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#isFieldBased:Boolean", "kind" : "abstract val"}, {"label" : "isRandom", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.id.IDType.isRandom", "link" : "com\/sparkutils\/quality\/impl\/id\/IDType.html#isRandom:Boolean", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/id\/IDType.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.id.InvalidIDType", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.id.InvalidIDType#<init>", "error" : "unsupported entity"}, {"label" : "idType", "tail" : ": Byte", "member" : "com.sparkutils.quality.impl.id.InvalidIDType.idType", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#idType:Byte", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/id\/InvalidIDType.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.id.model", "shortDescription" : "Model for ID handling", "object" : "com\/sparkutils\/quality\/impl\/id\/model$.html", "members_object" : [{"label" : "base64", "tail" : "(bitLength: Int, base: Int, array: Array[Long]): String", "member" : "com.sparkutils.quality.impl.id.model.base64", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#base64(bitLength:Int,base:Int,array:Array[Long]):String", "kind" : "def"}, {"label" : "parseID", "tail" : "(base64ID: String): ID", "member" : "com.sparkutils.quality.impl.id.model.parseID", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#parseID(base64ID:String):com.sparkutils.quality.impl.id.ID", "kind" : "def"}, {"label" : "ProvidedID", "tail" : ": IDType", "member" : "com.sparkutils.quality.impl.id.model.ProvidedID", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#ProvidedID:com.sparkutils.quality.impl.id.IDType", "kind" : "val"}, {"label" : "GuaranteedUniqueIDType", "tail" : ": IDType", "member" : "com.sparkutils.quality.impl.id.model.GuaranteedUniqueIDType", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#GuaranteedUniqueIDType:com.sparkutils.quality.impl.id.IDType", "kind" : "val"}, {"label" : "FieldBasedID", "tail" : ": IDType", "member" : "com.sparkutils.quality.impl.id.model.FieldBasedID", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#FieldBasedID:com.sparkutils.quality.impl.id.IDType", "kind" : "val"}, {"label" : "RandomID", "tail" : ": IDType", "member" : "com.sparkutils.quality.impl.id.model.RandomID", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#RandomID:com.sparkutils.quality.impl.id.IDType", "kind" : "val"}, {"label" : "guaranteedUniqueEpoch", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.id.model.guaranteedUniqueEpoch", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#guaranteedUniqueEpoch:Long", "kind" : "val"}, {"label" : "guaranteedUniqueMaxRowID", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.model.guaranteedUniqueMaxRowID", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#guaranteedUniqueMaxRowID:Int", "kind" : "val"}, {"label" : "guaranteedUniqueMSLastShifted", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.model.guaranteedUniqueMSLastShifted", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#guaranteedUniqueMSLastShifted:Int", "kind" : "val"}, {"label" : "guaranteedUniqueMSLastIndex", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.model.guaranteedUniqueMSLastIndex", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#guaranteedUniqueMSLastIndex:Int", "kind" : "val"}, {"label" : "all64", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.id.model.all64", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#all64:Long", "kind" : "val"}, {"label" : "allButFirst33", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.id.model.allButFirst33", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#allButFirst33:Long", "kind" : "val"}, {"label" : "allButLast8", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.id.model.allButLast8", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#allButLast8:Long", "kind" : "val"}, {"label" : "allButLast31", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.id.model.allButLast31", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#allButLast31:Long", "kind" : "val"}, {"label" : "guaranteedUniqueMSMask", "tail" : ": Long", "member" : "com.sparkutils.quality.impl.id.model.guaranteedUniqueMSMask", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#guaranteedUniqueMSMask:Long", "kind" : "val"}, {"label" : "guaranteedUniqueMACHeader3rdOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.model.guaranteedUniqueMACHeader3rdOffset", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#guaranteedUniqueMACHeader3rdOffset:Int", "kind" : "val"}, {"label" : "guaranteedUniqueMACHeader2ndOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.model.guaranteedUniqueMACHeader2ndOffset", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#guaranteedUniqueMACHeader2ndOffset:Int", "kind" : "val"}, {"label" : "guaranteedUniqueMACHeader1stOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.model.guaranteedUniqueMACHeader1stOffset", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#guaranteedUniqueMACHeader1stOffset:Int", "kind" : "val"}, {"label" : "byteSize", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.model.byteSize", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#byteSize:Int", "kind" : "val"}, {"label" : "GuaranteedUniqueHeader", "tail" : ": Byte", "member" : "com.sparkutils.quality.impl.id.model.GuaranteedUniqueHeader", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#GuaranteedUniqueHeader:Byte", "kind" : "val"}, {"label" : "GenericLongsHeader", "tail" : ": Byte", "member" : "com.sparkutils.quality.impl.id.model.GenericLongsHeader", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#GenericLongsHeader:Byte", "kind" : "val"}, {"label" : "headerBaseBitsOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.model.headerBaseBitsOffset", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#headerBaseBitsOffset:Int", "kind" : "val"}, {"label" : "lengthOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.id.model.lengthOffset", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#lengthOffset:Int", "kind" : "val"}, {"label" : "localMAC", "tail" : ": Array[Byte]", "member" : "com.sparkutils.quality.impl.id.model.localMAC", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#localMAC:Array[Byte]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/id\/model$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.sparkutils.quality.impl.util" : [{"name" : "com.sparkutils.quality.impl.util.ComparableMapConverter", "shortDescription" : "Convert maps to sorted arrays of key value structs to allow comparison", "object" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html", "members_object" : [{"label" : "mapStruct", "tail" : "(dataType: DataType, compareF: (DataType) ⇒ Option[(Any, Any) ⇒ Int]): (DataType, (Any) ⇒ Any)", "member" : "com.sparkutils.quality.impl.util.ComparableMapConverter.mapStruct", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#mapStruct(dataType:org.apache.spark.sql.types.DataType,compareF:org.apache.spark.sql.types.DataType=>Option[(Any,Any)=>Int]):(org.apache.spark.sql.types.DataType,Any=>Any)", "kind" : "def"}, {"label" : "mapStruct", "tail" : "(key: (DataType, (Any) ⇒ Any), value: (DataType, (Any) ⇒ Any), compareF: (DataType) ⇒ Option[(Any, Any) ⇒ Int]): (DataType, (Any) ⇒ Any)", "member" : "com.sparkutils.quality.impl.util.ComparableMapConverter.mapStruct", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#mapStruct(key:(org.apache.spark.sql.types.DataType,Any=>Any),value:(org.apache.spark.sql.types.DataType,Any=>Any),compareF:org.apache.spark.sql.types.DataType=>Option[(Any,Any)=>Int]):(org.apache.spark.sql.types.DataType,Any=>Any)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.util.ComparableMapConverter.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "com.sparkutils.quality.impl.util.ComparableMapConverter.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.util.ComparableMapConverter.dataType", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "theFunction", "tail" : ": (Any) ⇒ Any", "member" : "com.sparkutils.quality.impl.util.ComparableMapConverter.theFunction", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#theFunction:Any=>Any", "kind" : "lazy val"}, {"label" : "theType", "tail" : ": DataType", "member" : "com.sparkutils.quality.impl.util.ComparableMapConverter.theType", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#theType:org.apache.spark.sql.types.DataType", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.impl.util.ComparableMapConverter#<init>", "error" : "unsupported entity"}, {"label" : "compareF", "tail" : ": (DataType) ⇒ Option[(Any, Any) ⇒ Int]", "member" : "com.sparkutils.quality.impl.util.ComparableMapConverter.compareF", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#compareF:org.apache.spark.sql.types.DataType=>Option[(Any,Any)=>Int]", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.util.ComparableMapConverter.child", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/util\/ComparableMapConverter.html", "kind" : "object"}], "com.sparkutils.quality.simpleVersioning" : [{"name" : "com.sparkutils.quality.simpleVersioning.SameOrNextVersionLower", "shortDescription" : "", "members_case class" : [{"label" : "apply", "tail" : "(id: Id): Option[Seq[T]]", "member" : "com.sparkutils.quality.simpleVersioning.SameOrNextVersionLower.apply", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#apply(id:com.sparkutils.quality.Id):Option[Seq[T]]", "kind" : "def"}, {"label" : "sorted", "tail" : ": TreeMap[Id, Seq[T]]", "member" : "com.sparkutils.quality.simpleVersioning.SameOrNextVersionLower.sorted", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#sorted:scala.collection.immutable.TreeMap[com.sparkutils.quality.Id,Seq[T]]", "kind" : "val"}, {"label" : "ordering", "tail" : ": Ordering[Id]", "member" : "com.sparkutils.quality.simpleVersioning.SameOrNextVersionLower.ordering", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#ordering:Ordering[com.sparkutils.quality.Id]", "kind" : "implicit val"}, {"member" : "com.sparkutils.quality.simpleVersioning.SameOrNextVersionLower#<init>", "error" : "unsupported entity"}, {"label" : "map", "tail" : ": Map[Id, Seq[T]]", "member" : "com.sparkutils.quality.simpleVersioning.SameOrNextVersionLower.map", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#map:Map[com.sparkutils.quality.Id,Seq[T]]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Seq[T]]) ⇒ A): (Id) ⇒ A", "member" : "scala.Function1.andThen", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Id): (A) ⇒ Option[Seq[T]]", "member" : "scala.Function1.compose", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/simpleVersioning\/package$$SameOrNextVersionLower.html", "kind" : "case class"}], "org.apache.spark" : [], "org.apache" : [], "com.sparkutils.quality.impl.aggregates" : [{"name" : "com.sparkutils.quality.impl.aggregates.AggregateExpressions", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html", "members_object" : [{"label" : "apply", "tail" : "(sumType: DataType, ifExpr: Expression, sum: Expression, evaluate: Expression, zero: (DataType) ⇒ Option[Any], add: (DataType) ⇒ Option[(Expression, Expression) ⇒ Expression]): Expression", "member" : "com.sparkutils.quality.impl.aggregates.AggregateExpressions.apply", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#apply(sumType:org.apache.spark.sql.types.DataType,ifExpr:org.apache.spark.sql.catalyst.expressions.Expression,sum:org.apache.spark.sql.catalyst.expressions.Expression,evaluate:org.apache.spark.sql.catalyst.expressions.Expression,zero:org.apache.spark.sql.types.DataType=>Option[Any],add:org.apache.spark.sql.types.DataType=>Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/AggregateExpressions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates", "shortDescription" : "Represents an aggregation expression built from a filter function, a sum lambda and an evaluate lambda which uses thecount of filter hits and the sum as parameters.", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "RichAttribute", "tail" : "", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.RichAttribute", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#RichAttributeextendsAnyRef", "kind" : "implicit class"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.nullable", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#nullable:Boolean", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.dataType", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "aggBufferAttributes", "tail" : ": Seq[AttributeReference]", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.aggBufferAttributes", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#aggBufferAttributes:Seq[org.apache.spark.sql.catalyst.expressions.AttributeReference]", "kind" : "lazy val"}, {"label" : "evaluateExpression", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.evaluateExpression", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#evaluateExpression:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "mergeExpressions", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.mergeExpressions", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#mergeExpressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"label" : "updateExpressions", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.updateExpressions", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#updateExpressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"label" : "initialValues", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.initialValues", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#initialValues:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"label" : "add", "tail" : ": (Expression, Expression) ⇒ Expression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.add", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#add:(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "sumWithEvaluate", "tail" : ": RunAllReturnLast", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.sumWithEvaluate", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#sumWithEvaluate:org.apache.spark.sql.qualityFunctions.RunAllReturnLast", "kind" : "lazy val"}, {"label" : "runEvaluate", "tail" : ": RunAllReturnLast", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.runEvaluate", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#runEvaluate:org.apache.spark.sql.qualityFunctions.RunAllReturnLast", "kind" : "lazy val"}, {"label" : "count", "tail" : ": RefSetterExpression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.count", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#count:org.apache.spark.sql.qualityFunctions.RefSetterExpression", "kind" : "lazy val"}, {"label" : "sumEval", "tail" : ": RefSetterExpression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.sumEval", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#sumEval:org.apache.spark.sql.qualityFunctions.RefSetterExpression", "kind" : "lazy val"}, {"label" : "sum", "tail" : ": RefSetterExpression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.sum", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#sum:org.apache.spark.sql.qualityFunctions.RefSetterExpression", "kind" : "lazy val"}, {"label" : "countRef", "tail" : ": AttributeReference", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.countRef", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#countRef:org.apache.spark.sql.catalyst.expressions.AttributeReference", "kind" : "lazy val"}, {"label" : "sumRef", "tail" : ": AttributeReference", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.sumRef", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#sumRef:org.apache.spark.sql.catalyst.expressions.AttributeReference", "kind" : "lazy val"}, {"label" : "evaluate", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.evaluate", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#evaluate:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "sumWith", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.sumWith", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#sumWith:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "ifExpr", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.ifExpr", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#ifExpr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "evalSumLeaf", "tail" : ": RefExpression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.evalSumLeaf", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#evalSumLeaf:org.apache.spark.sql.qualityFunctions.RefExpression", "kind" : "lazy val"}, {"label" : "sumLeaf", "tail" : ": RefExpression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.sumLeaf", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#sumLeaf:org.apache.spark.sql.qualityFunctions.RefExpression", "kind" : "lazy val"}, {"label" : "countLeaf", "tail" : ": RefExpression", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.countLeaf", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#countLeaf:org.apache.spark.sql.qualityFunctions.RefExpression", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates#<init>", "error" : "unsupported entity"}, {"label" : "addF", "tail" : ": (DataType) ⇒ Option[(Expression, Expression) ⇒ Expression]", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.addF", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#addF:org.apache.spark.sql.types.DataType=>Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "zero", "tail" : ": (DataType) ⇒ Option[Any]", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.zero", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#zero:org.apache.spark.sql.types.DataType=>Option[Any]", "kind" : "val"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.impl.aggregates.ExpressionAggregates.children", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.DeclarativeAggregate.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "final def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.DeclarativeAggregate.eval", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "inputAggBufferAttributes", "tail" : ": Seq[AttributeReference]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.DeclarativeAggregate.inputAggBufferAttributes", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#inputAggBufferAttributes:Seq[org.apache.spark.sql.catalyst.expressions.AttributeReference]", "kind" : "final lazy val"}, {"label" : "aggBufferSchema", "tail" : "(): StructType", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.DeclarativeAggregate.aggBufferSchema", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#aggBufferSchema:org.apache.spark.sql.types.StructType", "kind" : "final def"}, {"label" : "toAggString", "tail" : "(isDistinct: Boolean): String", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#toAggString(isDistinct:Boolean):String", "kind" : "def"}, {"label" : "sql", "tail" : "(isDistinct: Boolean): String", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.sql", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#sql(isDistinct:Boolean):String", "kind" : "def"}, {"label" : "toAggregateExpression", "tail" : "(isDistinct: Boolean, filter: Option[Expression]): AggregateExpression", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggregateExpression", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#toAggregateExpression(isDistinct:Boolean,filter:Option[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression", "kind" : "def"}, {"label" : "toAggregateExpression", "tail" : "(): AggregateExpression", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggregateExpression", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#toAggregateExpression():org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression", "kind" : "def"}, {"label" : "defaultResult", "tail" : "(): Option[Literal]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.defaultResult", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#defaultResult:Option[org.apache.spark.sql.catalyst.expressions.Literal]", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.foldable", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#foldable:Boolean", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/aggregates\/ExpressionAggregates.html", "kind" : "case class"}], "com.sparkutils" : [], "com.sparkutils.quality" : [{"name" : "com.sparkutils.quality.BucketedFiles", "shortDescription" : "Represents the shared file location of a bucked bloom filter.", "object" : "com\/sparkutils\/quality\/BucketedFiles$.html", "members_object" : [{"label" : "deserialize", "tail" : "(storageFormat: Array[Byte]): BucketedFiles", "member" : "com.sparkutils.quality.BucketedFiles.deserialize", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#deserialize(storageFormat:Array[Byte]):com.sparkutils.quality.BucketedFiles", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/BucketedFiles$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "removeThisBloom", "tail" : "(): Unit", "member" : "com.sparkutils.quality.BucketedFiles.removeThisBloom", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#removeThisBloom():Unit", "kind" : "def"}, {"label" : "cleanupOthers", "tail" : "(): Unit", "member" : "com.sparkutils.quality.BucketedFiles.cleanupOthers", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#cleanupOthers():Unit", "kind" : "def"}, {"label" : "read", "tail" : "(): Array[Array[Byte]]", "member" : "com.sparkutils.quality.BucketedFiles.read", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#read:Array[Array[Byte]]", "kind" : "def"}, {"label" : "serialize", "tail" : "(): Array[Byte]", "member" : "com.sparkutils.quality.BucketedFiles.serialize", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#serialize:Array[Byte]", "kind" : "def"}, {"label" : "maps", "tail" : "(): Seq[IntBuffer]", "member" : "com.sparkutils.quality.BucketedFiles.maps", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#maps:Seq[java.nio.IntBuffer]", "kind" : "def"}, {"member" : "com.sparkutils.quality.BucketedFiles#<init>", "error" : "unsupported entity"}, {"label" : "numBuckets", "tail" : ": Int", "member" : "com.sparkutils.quality.BucketedFiles.numBuckets", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#numBuckets:Int", "kind" : "val"}, {"label" : "fpp", "tail" : ": Double", "member" : "com.sparkutils.quality.BucketedFiles.fpp", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#fpp:Double", "kind" : "val"}, {"label" : "rootDir", "tail" : ": String", "member" : "com.sparkutils.quality.BucketedFiles.rootDir", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#rootDir:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/BucketedFiles.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/BucketedFiles.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/BucketedFiles.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.DisabledRule", "shortDescription" : "This shouldn't evaluate to a fail, allows signalling a rule has been disabled", "object" : "com\/sparkutils\/quality\/DisabledRule$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/DisabledRule$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/DisabledRule$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.ExpressionCompiler", "members_trait" : [{"label" : "codegen", "tail" : ": (InternalRow) ⇒ AnyRef", "member" : "com.sparkutils.quality.ExpressionCompiler.codegen", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#codegen:org.apache.spark.sql.catalyst.InternalRow=>AnyRef", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "expr", "tail" : "(): Expression", "member" : "com.sparkutils.quality.HasExpr.expr", "link" : "com\/sparkutils\/quality\/ExpressionCompiler.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/ExpressionCompiler.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.ExpressionLookup", "shortDescription" : "For a given expression it breaks down information useful for documentation and validation for a non-resolved expression.", "members_case class" : [{"member" : "com.sparkutils.quality.ExpressionLookup#<init>", "error" : "unsupported entity"}, {"label" : "sparkFunctions", "tail" : ": Set[String]", "member" : "com.sparkutils.quality.ExpressionLookup.sparkFunctions", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#sparkFunctions:Set[String]", "kind" : "val"}, {"label" : "lambdas", "tail" : ": Set[Id]", "member" : "com.sparkutils.quality.ExpressionLookup.lambdas", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#lambdas:Set[com.sparkutils.quality.Id]", "kind" : "val"}, {"label" : "unknownSparkFunctions", "tail" : ": Identifiers", "member" : "com.sparkutils.quality.ExpressionLookup.unknownSparkFunctions", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#unknownSparkFunctions:com.sparkutils.quality.VariablesLookup.Identifiers", "kind" : "val"}, {"label" : "attributesUsed", "tail" : ": Identifiers", "member" : "com.sparkutils.quality.ExpressionLookup.attributesUsed", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#attributesUsed:com.sparkutils.quality.VariablesLookup.Identifiers", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionLookup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/ExpressionLookup.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.ExpressionRule", "shortDescription" : "The result of serializing or loading rules", "members_case class" : [{"label" : "expr", "tail" : ": Expression", "member" : "com.sparkutils.quality.ExpressionRule.expr", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.ExpressionRule#<init>", "error" : "unsupported entity"}, {"label" : "rule", "tail" : ": String", "member" : "com.sparkutils.quality.ExpressionRule.rule", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#rule:String", "kind" : "val"}, {"label" : "internalEval", "tail" : "(internalRow: InternalRow): Any", "member" : "com.sparkutils.quality.ExprLogic.internalEval", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#internalEval(internalRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "eval", "tail" : "(internalRow: InternalRow): RuleResult", "member" : "com.sparkutils.quality.RuleLogic.eval", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):com.sparkutils.quality.RuleResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/ExpressionRule.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionRule.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/ExpressionRule.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.ExpressionRuleExpr", "shortDescription" : "Used in load postprocessing, e.g.", "members_case class" : [{"member" : "com.sparkutils.quality.ExpressionRuleExpr#<init>", "error" : "unsupported entity"}, {"label" : "expr", "tail" : ": Expression", "member" : "com.sparkutils.quality.ExpressionRuleExpr.expr", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "rule", "tail" : ": String", "member" : "com.sparkutils.quality.ExpressionRuleExpr.rule", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#rule:String", "kind" : "val"}, {"label" : "internalEval", "tail" : "(internalRow: InternalRow): Any", "member" : "com.sparkutils.quality.ExprLogic.internalEval", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#internalEval(internalRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "eval", "tail" : "(internalRow: InternalRow): RuleResult", "member" : "com.sparkutils.quality.RuleLogic.eval", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):com.sparkutils.quality.RuleResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/ExpressionRuleExpr.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.ExpressionWrapper", "shortDescription" : "Rewritten children at eval will be swapped out", "members_case class" : [{"label" : "internalEval", "tail" : "(internalRow: InternalRow): Any", "member" : "com.sparkutils.quality.ExpressionWrapper.internalEval", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#internalEval(internalRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.ExpressionWrapper#<init>", "error" : "unsupported entity"}, {"label" : "compileEval", "tail" : ": Boolean", "member" : "com.sparkutils.quality.ExpressionWrapper.compileEval", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#compileEval:Boolean", "kind" : "val"}, {"label" : "expr", "tail" : ": Expression", "member" : "com.sparkutils.quality.ExpressionWrapper.expr", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "codegen", "tail" : ": (InternalRow) ⇒ AnyRef", "member" : "com.sparkutils.quality.ExpressionCompiler.codegen", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#codegen:org.apache.spark.sql.catalyst.InternalRow=>AnyRef", "kind" : "lazy val"}, {"label" : "eval", "tail" : "(internalRow: InternalRow): RuleResult", "member" : "com.sparkutils.quality.RuleLogic.eval", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):com.sparkutils.quality.RuleResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/ExpressionWrapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/ExpressionWrapper.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.ExprLogic", "members_trait" : [{"label" : "internalEval", "tail" : "(internalRow: InternalRow): Any", "member" : "com.sparkutils.quality.ExprLogic.internalEval", "link" : "com\/sparkutils\/quality\/ExprLogic.html#internalEval(internalRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "eval", "tail" : "(internalRow: InternalRow): RuleResult", "member" : "com.sparkutils.quality.RuleLogic.eval", "link" : "com\/sparkutils\/quality\/ExprLogic.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):com.sparkutils.quality.RuleResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/ExprLogic.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/ExprLogic.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/ExprLogic.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/ExprLogic.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/ExprLogic.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/ExprLogic.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/ExprLogic.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExprLogic.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExprLogic.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/ExprLogic.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/ExprLogic.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/ExprLogic.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/ExprLogic.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/ExprLogic.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/ExprLogic.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/ExprLogic.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/ExprLogic.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/ExprLogic.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/ExprLogic.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "expr", "tail" : "(): Expression", "member" : "com.sparkutils.quality.HasExpr.expr", "link" : "com\/sparkutils\/quality\/ExprLogic.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/ExprLogic.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.Failed", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/Failed$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/Failed$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/Failed$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/Failed$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/Failed$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/Failed$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/Failed$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/Failed$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Failed$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Failed$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Failed$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/Failed$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/Failed$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/Failed$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/Failed$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/Failed$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/Failed$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/Failed$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.HasExpr", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/HasExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/HasExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/HasExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/HasExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/HasExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/HasExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/HasExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/HasExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/HasExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/HasExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/HasExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/HasExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/HasExpr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/HasExpr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/HasExpr.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/HasExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/HasExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/HasExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/HasExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "expr", "tail" : "(): Expression", "member" : "com.sparkutils.quality.HasExpr.expr", "link" : "com\/sparkutils\/quality\/HasExpr.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/HasExpr.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.HasRuleText", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/HasRuleText.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/HasRuleText.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/HasRuleText.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/HasRuleText.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/HasRuleText.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/HasRuleText.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/HasRuleText.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/HasRuleText.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/HasRuleText.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/HasRuleText.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/HasRuleText.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/HasRuleText.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/HasRuleText.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/HasRuleText.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/HasRuleText.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/HasRuleText.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/HasRuleText.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/HasRuleText.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/HasRuleText.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rule", "tail" : ": String", "member" : "com.sparkutils.quality.HasRuleText.rule", "link" : "com\/sparkutils\/quality\/HasRuleText.html#rule:String", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/HasRuleText.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.HolderUsedInsteadIfImpl", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.HolderUsedInsteadIfImpl#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.HolderUsedInsteadIfImpl.id", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/HolderUsedInsteadIfImpl.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.Id", "shortDescription" : "A versioned rule ID - note the name is never persisted in results, the id and version are sufficient to retrieve the name", "members_case class" : [{"member" : "com.sparkutils.quality.Id#<init>", "error" : "unsupported entity"}, {"label" : "version", "tail" : ": Int", "member" : "com.sparkutils.quality.Id.version", "link" : "com\/sparkutils\/quality\/Id.html#version:Int", "kind" : "val"}, {"label" : "id", "tail" : ": Int", "member" : "com.sparkutils.quality.Id.id", "link" : "com\/sparkutils\/quality\/Id.html#id:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/Id.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/Id.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/Id.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/Id.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/Id.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/Id.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/Id.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Id.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Id.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Id.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/Id.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/Id.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/Id.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/Id.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/Id.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/Id.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/Id.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup", "members_trait" : [{"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mightContain", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html#mightContain(any:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "Simple does it contain function to test a bloom", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$BloomLookup.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.SparkBloomFilter", "shortDescription" : "", "members_case class" : [{"label" : "mightContain", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.SparkBloomFilter.mightContain", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#mightContain(any:Any):Boolean", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.SparkBloomFilter#<init>", "error" : "unsupported entity"}, {"label" : "bloom", "tail" : ": BloomFilter", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.SparkBloomFilter.bloom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#bloom:org.apache.spark.util.sketch.BloomFilter", "kind" : "val"}, {"label" : "apply", "tail" : "(any: Any): Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#apply(any:Any):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes$SparkBloomFilter.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.LambdaFunction", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/LambdaFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "parsed", "tail" : "(): LambdaFunctionParsed", "member" : "com.sparkutils.quality.LambdaFunction.parsed", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#parsed:com.sparkutils.quality.LambdaFunctionParsed", "kind" : "abstract def"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.LambdaFunction.id", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#id:com.sparkutils.quality.Id", "kind" : "abstract val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.LambdaFunction.name", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#name:String", "kind" : "abstract val"}, {"label" : "expr", "tail" : "(): Expression", "member" : "com.sparkutils.quality.HasExpr.expr", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract def"}, {"label" : "rule", "tail" : ": String", "member" : "com.sparkutils.quality.HasRuleText.rule", "link" : "com\/sparkutils\/quality\/LambdaFunction.html#rule:String", "kind" : "abstract val"}], "shortDescription" : "Lambda functions are for re-use across rules.", "object" : "com\/sparkutils\/quality\/LambdaFunction$.html", "members_object" : [{"label" : "apply", "tail" : "(name: String, rule: String, id: Id): LambdaFunction", "member" : "com.sparkutils.quality.LambdaFunction.apply", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#apply(name:String,rule:String,id:com.sparkutils.quality.Id):com.sparkutils.quality.LambdaFunction", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/sparkutils\/quality\/LambdaFunction.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.LambdaFunctionImpl", "shortDescription" : "", "members_case class" : [{"label" : "parsed", "tail" : "(): LambdaFunctionParsed", "member" : "com.sparkutils.quality.LambdaFunctionImpl.parsed", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#parsed:com.sparkutils.quality.LambdaFunctionParsed", "kind" : "def"}, {"label" : "expr", "tail" : "(): Expression", "member" : "com.sparkutils.quality.LambdaFunctionImpl.expr", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"member" : "com.sparkutils.quality.LambdaFunctionImpl#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.LambdaFunctionImpl.id", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "rule", "tail" : ": String", "member" : "com.sparkutils.quality.LambdaFunctionImpl.rule", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#rule:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.LambdaFunctionImpl.name", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/LambdaFunctionImpl.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.LambdaFunctionParsed", "shortDescription" : "", "members_case class" : [{"label" : "parsed", "tail" : "(): LambdaFunctionParsed", "member" : "com.sparkutils.quality.LambdaFunctionParsed.parsed", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#parsed:com.sparkutils.quality.LambdaFunctionParsed", "kind" : "def"}, {"member" : "com.sparkutils.quality.LambdaFunctionParsed#<init>", "error" : "unsupported entity"}, {"label" : "expr", "tail" : ": Expression", "member" : "com.sparkutils.quality.LambdaFunctionParsed.expr", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.LambdaFunctionParsed.id", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "rule", "tail" : ": String", "member" : "com.sparkutils.quality.LambdaFunctionParsed.rule", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#rule:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.LambdaFunctionParsed.name", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/LambdaFunctionParsed.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.LambdaFunctionRow", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.LambdaFunctionRow#<init>", "error" : "unsupported entity"}, {"label" : "ruleSuiteVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.LambdaFunctionRow.ruleSuiteVersion", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#ruleSuiteVersion:Int", "kind" : "val"}, {"label" : "ruleSuiteId", "tail" : ": Int", "member" : "com.sparkutils.quality.LambdaFunctionRow.ruleSuiteId", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#ruleSuiteId:Int", "kind" : "val"}, {"label" : "functionVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.LambdaFunctionRow.functionVersion", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#functionVersion:Int", "kind" : "val"}, {"label" : "functionId", "tail" : ": Int", "member" : "com.sparkutils.quality.LambdaFunctionRow.functionId", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#functionId:Int", "kind" : "val"}, {"label" : "ruleExpr", "tail" : ": String", "member" : "com.sparkutils.quality.LambdaFunctionRow.ruleExpr", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#ruleExpr:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.LambdaFunctionRow.name", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunctionRow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/LambdaFunctionRow.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.LambdaFunctions", "members_trait" : [{"label" : "IdTriple", "tail" : "", "member" : "com.sparkutils.quality.LambdaFunctions.IdTriple", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#IdTriple=(com.sparkutils.quality.Id,com.sparkutils.quality.Id,com.sparkutils.quality.Id)", "kind" : "type"}, {"label" : "registerLambdaFunctions", "tail" : "(functions: Seq[LambdaFunction]): Unit", "member" : "com.sparkutils.quality.LambdaFunctions.registerLambdaFunctions", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#registerLambdaFunctions(functions:Seq[com.sparkutils.quality.LambdaFunction]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/LambdaFunctions.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/LambdaFunctions.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.LookupIdFunctionImpl", "shortDescription" : "Allow 2.4 and 3 to co-exist", "object" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html", "members_object" : [{"label" : "identifyLookups", "tail" : "(exp: Expression): Option[ExpressionLookupResult]", "member" : "com.sparkutils.quality.LookupIdFunctionImpl.identifyLookups", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#identifyLookups(exp:org.apache.spark.sql.catalyst.expressions.Expression):Option[com.sparkutils.quality.utils.ExpressionLookupResult]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/LookupIdFunctionImpl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.MetaRuleSetRow", "shortDescription" : "only one arg is supported without brackets etc.", "members_case class" : [{"label" : "generateRuleSet", "tail" : "(dataFrame: DataFrame, stablePosition: (String) ⇒ Int, transform: (DataFrame) ⇒ DataFrame): RuleSet", "member" : "com.sparkutils.quality.MetaRuleSetRow.generateRuleSet", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#generateRuleSet(dataFrame:org.apache.spark.sql.DataFrame,stablePosition:String=>Int,transform:org.apache.spark.sql.DataFrame=>org.apache.spark.sql.DataFrame):com.sparkutils.quality.RuleSet", "kind" : "def"}, {"label" : "createGenerator", "tail" : "(stablePosition: (String) ⇒ Int): MetaRuleGenerator", "member" : "com.sparkutils.quality.MetaRuleSetRow.createGenerator", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#createGenerator(stablePosition:String=>Int):MetaRuleSetRow.this.MetaRuleGenerator", "kind" : "def"}, {"label" : "filterColumns", "tail" : "(dataFrame: DataFrame, transform: (DataFrame) ⇒ DataFrame): Set[String]", "member" : "com.sparkutils.quality.MetaRuleSetRow.filterColumns", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#filterColumns(dataFrame:org.apache.spark.sql.DataFrame,transform:org.apache.spark.sql.DataFrame=>org.apache.spark.sql.DataFrame):Set[String]", "kind" : "def"}, {"label" : "MetaRuleGenerator", "tail" : "", "member" : "com.sparkutils.quality.MetaRuleSetRow.MetaRuleGenerator", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#MetaRuleGeneratorextendsProductwithSerializable", "kind" : "case class"}, {"label" : "rulePart", "tail" : ": String", "member" : "com.sparkutils.quality.MetaRuleSetRow.rulePart", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#rulePart:String", "kind" : "val"}, {"label" : "arg", "tail" : ": String", "member" : "com.sparkutils.quality.MetaRuleSetRow.arg", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#arg:String", "kind" : "val"}, {"member" : "com.sparkutils.quality.MetaRuleSetRow#<init>", "error" : "unsupported entity"}, {"label" : "ruleExpr", "tail" : ": String", "member" : "com.sparkutils.quality.MetaRuleSetRow.ruleExpr", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#ruleExpr:String", "kind" : "val"}, {"label" : "columnFilter", "tail" : ": String", "member" : "com.sparkutils.quality.MetaRuleSetRow.columnFilter", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#columnFilter:String", "kind" : "val"}, {"label" : "ruleSetVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.MetaRuleSetRow.ruleSetVersion", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#ruleSetVersion:Int", "kind" : "val"}, {"label" : "ruleSetId", "tail" : ": Int", "member" : "com.sparkutils.quality.MetaRuleSetRow.ruleSetId", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#ruleSetId:Int", "kind" : "val"}, {"label" : "ruleSuiteVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.MetaRuleSetRow.ruleSuiteVersion", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#ruleSuiteVersion:Int", "kind" : "val"}, {"label" : "ruleSuiteId", "tail" : ": Int", "member" : "com.sparkutils.quality.MetaRuleSetRow.ruleSuiteId", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#ruleSuiteId:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/MetaRuleSetRow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/MetaRuleSetRow.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.NoOpRunOnPassProcessor", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html", "members_object" : [{"label" : "noOp", "tail" : ": RunOnPassProcessorImpl", "member" : "com.sparkutils.quality.NoOpRunOnPassProcessor.noOp", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#noOp:com.sparkutils.quality.RunOnPassProcessorImpl", "kind" : "val"}, {"label" : "noOpId", "tail" : ": Id", "member" : "com.sparkutils.quality.NoOpRunOnPassProcessor.noOpId", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#noOpId:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/NoOpRunOnPassProcessor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.OutputExpression", "shortDescription" : "Used as a result of serializing", "members_case class" : [{"label" : "expr", "tail" : ": Expression", "member" : "com.sparkutils.quality.OutputExpression.expr", "link" : "com\/sparkutils\/quality\/OutputExpression.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.OutputExpression#<init>", "error" : "unsupported entity"}, {"label" : "rule", "tail" : ": String", "member" : "com.sparkutils.quality.OutputExpression.rule", "link" : "com\/sparkutils\/quality\/OutputExpression.html#rule:String", "kind" : "val"}, {"label" : "eval", "tail" : "(internalRow: InternalRow): Any", "member" : "com.sparkutils.quality.OutputExprLogic.eval", "link" : "com\/sparkutils\/quality\/OutputExpression.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/OutputExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/OutputExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/OutputExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/OutputExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/OutputExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/OutputExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/OutputExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/OutputExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/OutputExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/OutputExpression.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/OutputExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/OutputExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.OutputExpressionExpr", "shortDescription" : "Used in post serializing processing to keep the rule around", "members_case class" : [{"member" : "com.sparkutils.quality.OutputExpressionExpr#<init>", "error" : "unsupported entity"}, {"label" : "expr", "tail" : ": Expression", "member" : "com.sparkutils.quality.OutputExpressionExpr.expr", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "rule", "tail" : ": String", "member" : "com.sparkutils.quality.OutputExpressionExpr.rule", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#rule:String", "kind" : "val"}, {"label" : "eval", "tail" : "(internalRow: InternalRow): Any", "member" : "com.sparkutils.quality.OutputExprLogic.eval", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExpressionExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/OutputExpressionExpr.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.OutputExpressionRow", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.OutputExpressionRow#<init>", "error" : "unsupported entity"}, {"label" : "ruleSuiteVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.OutputExpressionRow.ruleSuiteVersion", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#ruleSuiteVersion:Int", "kind" : "val"}, {"label" : "ruleSuiteId", "tail" : ": Int", "member" : "com.sparkutils.quality.OutputExpressionRow.ruleSuiteId", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#ruleSuiteId:Int", "kind" : "val"}, {"label" : "functionVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.OutputExpressionRow.functionVersion", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#functionVersion:Int", "kind" : "val"}, {"label" : "functionId", "tail" : ": Int", "member" : "com.sparkutils.quality.OutputExpressionRow.functionId", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#functionId:Int", "kind" : "val"}, {"label" : "ruleExpr", "tail" : ": String", "member" : "com.sparkutils.quality.OutputExpressionRow.ruleExpr", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#ruleExpr:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExpressionRow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/OutputExpressionRow.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.OutputExpressionWrapper", "shortDescription" : "", "members_case class" : [{"label" : "eval", "tail" : "(internalRow: InternalRow): Any", "member" : "com.sparkutils.quality.OutputExpressionWrapper.eval", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.OutputExpressionWrapper#<init>", "error" : "unsupported entity"}, {"label" : "compileEval", "tail" : ": Boolean", "member" : "com.sparkutils.quality.OutputExpressionWrapper.compileEval", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#compileEval:Boolean", "kind" : "val"}, {"label" : "expr", "tail" : ": Expression", "member" : "com.sparkutils.quality.OutputExpressionWrapper.expr", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "codegen", "tail" : ": (InternalRow) ⇒ AnyRef", "member" : "com.sparkutils.quality.ExpressionCompiler.codegen", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#codegen:org.apache.spark.sql.catalyst.InternalRow=>AnyRef", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/OutputExpressionWrapper.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.OutputExprLogic", "members_trait" : [{"label" : "eval", "tail" : "(internalRow: InternalRow): Any", "member" : "com.sparkutils.quality.OutputExprLogic.eval", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "expr", "tail" : "(): Expression", "member" : "com.sparkutils.quality.HasExpr.expr", "link" : "com\/sparkutils\/quality\/OutputExprLogic.html#expr:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/OutputExprLogic.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.OverallResult", "shortDescription" : "Probability is evaluated at over probablePass percent, defaults to 80% 0.8.", "members_case class" : [{"label" : "process", "tail" : "(ruleResult: RuleResult): OverallResult", "member" : "com.sparkutils.quality.OverallResult.process", "link" : "com\/sparkutils\/quality\/OverallResult.html#process(ruleResult:com.sparkutils.quality.RuleResult):com.sparkutils.quality.OverallResult", "kind" : "def"}, {"member" : "com.sparkutils.quality.OverallResult#<init>", "error" : "unsupported entity"}, {"label" : "currentResult", "tail" : ": RuleResult", "member" : "com.sparkutils.quality.OverallResult.currentResult", "link" : "com\/sparkutils\/quality\/OverallResult.html#currentResult:com.sparkutils.quality.RuleResult", "kind" : "val"}, {"label" : "probablePass", "tail" : ": Double", "member" : "com.sparkutils.quality.OverallResult.probablePass", "link" : "com\/sparkutils\/quality\/OverallResult.html#probablePass:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/OverallResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/OverallResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/OverallResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/OverallResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/OverallResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/OverallResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/OverallResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OverallResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OverallResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/OverallResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/OverallResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/OverallResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/OverallResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/OverallResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/OverallResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/OverallResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/OverallResult.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.Passed", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/Passed$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/Passed$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/Passed$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/Passed$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/Passed$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/Passed$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/Passed$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/Passed$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Passed$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Passed$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Passed$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/Passed$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/Passed$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/Passed$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/Passed$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/Passed$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/Passed$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/Passed$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.Probability", "shortDescription" : "0-1 with 1 being absolutely likely a pass", "members_case class" : [{"member" : "com.sparkutils.quality.Probability#<init>", "error" : "unsupported entity"}, {"label" : "percentage", "tail" : ": Double", "member" : "com.sparkutils.quality.Probability.percentage", "link" : "com\/sparkutils\/quality\/Probability.html#percentage:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/Probability.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/Probability.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/Probability.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/Probability.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/Probability.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/Probability.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/Probability.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Probability.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Probability.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Probability.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/Probability.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/Probability.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/Probability.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/Probability.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/Probability.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/Probability.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/Probability.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.QualityException", "shortDescription" : "Simple marker instead of sys.error", "object" : "com\/sparkutils\/quality\/QualityException$.html", "members_object" : [{"label" : "qualityException", "tail" : "(msg: String, cause: Exception): Nothing", "member" : "com.sparkutils.quality.QualityException.qualityException", "link" : "com\/sparkutils\/quality\/QualityException$.html#qualityException(msg:String,cause:Exception):Nothing", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/QualityException$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/QualityException$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/QualityException$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/QualityException$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/QualityException$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/QualityException$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/QualityException$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/QualityException$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/QualityException$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/QualityException$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/QualityException$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/QualityException$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/QualityException$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/QualityException$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/QualityException$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/QualityException$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/QualityException$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/QualityException$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/QualityException$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.sparkutils.quality.QualityException#<init>", "error" : "unsupported entity"}, {"label" : "cause", "tail" : ": Exception", "member" : "com.sparkutils.quality.QualityException.cause", "link" : "com\/sparkutils\/quality\/QualityException.html#cause:Exception", "kind" : "val"}, {"label" : "msg", "tail" : ": String", "member" : "com.sparkutils.quality.QualityException.msg", "link" : "com\/sparkutils\/quality\/QualityException.html#msg:String", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "com\/sparkutils\/quality\/QualityException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "com\/sparkutils\/quality\/QualityException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "com\/sparkutils\/quality\/QualityException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "com\/sparkutils\/quality\/QualityException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "com\/sparkutils\/quality\/QualityException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/quality\/QualityException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/quality\/QualityException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/sparkutils\/quality\/QualityException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "com\/sparkutils\/quality\/QualityException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "com\/sparkutils\/quality\/QualityException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "com\/sparkutils\/quality\/QualityException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "com\/sparkutils\/quality\/QualityException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "com\/sparkutils\/quality\/QualityException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/QualityException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/QualityException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/QualityException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/QualityException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/QualityException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/QualityException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/QualityException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/QualityException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/QualityException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/QualityException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/QualityException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/QualityException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/QualityException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/QualityException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/QualityException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/QualityException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/QualityException.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.Rule", "shortDescription" : "A rule to run over a row", "members_case class" : [{"member" : "com.sparkutils.quality.Rule#<init>", "error" : "unsupported entity"}, {"label" : "runOnPassProcessor", "tail" : ": RunOnPassProcessor", "member" : "com.sparkutils.quality.Rule.runOnPassProcessor", "link" : "com\/sparkutils\/quality\/Rule.html#runOnPassProcessor:com.sparkutils.quality.RunOnPassProcessor", "kind" : "val"}, {"label" : "expression", "tail" : ": RuleLogic", "member" : "com.sparkutils.quality.Rule.expression", "link" : "com\/sparkutils\/quality\/Rule.html#expression:com.sparkutils.quality.RuleLogic", "kind" : "val"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.Rule.id", "link" : "com\/sparkutils\/quality\/Rule.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/Rule.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/Rule.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/Rule.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/Rule.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/Rule.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/Rule.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/Rule.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Rule.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Rule.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/Rule.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/Rule.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/Rule.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/Rule.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/Rule.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/Rule.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/Rule.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/Rule.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleEngineResult", "shortDescription" : "Results for all rules run against a DataFrame.", "members_case class" : [{"member" : "com.sparkutils.quality.RuleEngineResult#<init>", "error" : "unsupported entity"}, {"label" : "result", "tail" : ": Option[T]", "member" : "com.sparkutils.quality.RuleEngineResult.result", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#result:Option[T]", "kind" : "val"}, {"label" : "salientRule", "tail" : ": Option[SalientRule]", "member" : "com.sparkutils.quality.RuleEngineResult.salientRule", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#salientRule:Option[com.sparkutils.quality.SalientRule]", "kind" : "val"}, {"label" : "ruleSuiteResults", "tail" : ": RuleSuiteResult", "member" : "com.sparkutils.quality.RuleEngineResult.ruleSuiteResults", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#ruleSuiteResults:com.sparkutils.quality.RuleSuiteResult", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleEngineResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleEngineResult.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleFolderResult", "shortDescription" : "Results for all rules run against a DataFrame.", "members_case class" : [{"member" : "com.sparkutils.quality.RuleFolderResult#<init>", "error" : "unsupported entity"}, {"label" : "result", "tail" : ": Option[T]", "member" : "com.sparkutils.quality.RuleFolderResult.result", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#result:Option[T]", "kind" : "val"}, {"label" : "ruleSuiteResults", "tail" : ": RuleSuiteResult", "member" : "com.sparkutils.quality.RuleFolderResult.ruleSuiteResults", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#ruleSuiteResults:com.sparkutils.quality.RuleSuiteResult", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleFolderResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleFolderResult.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleLogic", "members_trait" : [{"label" : "eval", "tail" : "(internalRow: InternalRow): RuleResult", "member" : "com.sparkutils.quality.RuleLogic.eval", "link" : "com\/sparkutils\/quality\/RuleLogic.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):com.sparkutils.quality.RuleResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleLogic.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleLogic.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleLogic.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleLogic.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleLogic.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleLogic.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleLogic.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleLogic.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleLogic.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleLogic.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleLogic.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleLogic.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/RuleLogic.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleLogic.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/RuleLogic.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/RuleLogic.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleLogic.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleLogic.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleLogic.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "internalEval", "tail" : "(internalRow: InternalRow): Any", "member" : "com.sparkutils.quality.RuleLogic.internalEval", "link" : "com\/sparkutils\/quality\/RuleLogic.html#internalEval(internalRow:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/RuleLogic.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.RuleLogicUtils", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/RuleLogicUtils$.html", "members_object" : [{"label" : "anyToRuleResultInt", "tail" : "(any: Any): Int", "member" : "com.sparkutils.quality.RuleLogicUtils.anyToRuleResultInt", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#anyToRuleResultInt(any:Any):Int", "kind" : "def"}, {"label" : "anyToRuleResult", "tail" : "(any: Any): RuleResult", "member" : "com.sparkutils.quality.RuleLogicUtils.anyToRuleResult", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#anyToRuleResult(any:Any):com.sparkutils.quality.RuleResult", "kind" : "def"}, {"label" : "expr", "tail" : "(rule: String): Expression", "member" : "com.sparkutils.quality.RuleLogicUtils.expr", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#expr(rule:String):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "mapRules", "tail" : "(ruleSuite: RuleSuite)(f: (Rule) ⇒ Rule): RuleSuite", "member" : "com.sparkutils.quality.RuleLogicUtils.mapRules", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#mapRules(ruleSuite:com.sparkutils.quality.RuleSuite)(f:com.sparkutils.quality.Rule=>com.sparkutils.quality.Rule):com.sparkutils.quality.RuleSuite", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleLogicUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.RuleModel", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/RuleModel$.html", "members_object" : [{"label" : "RuleSuiteMap", "tail" : "", "member" : "com.sparkutils.quality.RuleModel.RuleSuiteMap", "link" : "com\/sparkutils\/quality\/RuleModel$.html#RuleSuiteMap=Map[com.sparkutils.quality.VersionedId,com.sparkutils.quality.RuleSuite]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleModel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleModel$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleModel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleModel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleModel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleModel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleModel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleModel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleModel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleModel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleModel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleModel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/RuleModel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleModel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/RuleModel$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/RuleModel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleModel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleModel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleModel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.RuleResult", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/RuleResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/RuleResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/RuleResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/RuleResult.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.RuleResultRow", "shortDescription" : "Flattened results for aggregation \/ display \/ use by the explodeResults expression", "members_case class" : [{"member" : "com.sparkutils.quality.RuleResultRow#<init>", "error" : "unsupported entity"}, {"label" : "ruleResult", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleResultRow.ruleResult", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ruleResult:Int", "kind" : "val"}, {"label" : "ruleVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleResultRow.ruleVersion", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ruleVersion:Int", "kind" : "val"}, {"label" : "ruleId", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleResultRow.ruleId", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ruleId:Int", "kind" : "val"}, {"label" : "ruleSetVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleResultRow.ruleSetVersion", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ruleSetVersion:Int", "kind" : "val"}, {"label" : "ruleSetId", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleResultRow.ruleSetId", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ruleSetId:Int", "kind" : "val"}, {"label" : "ruleSetResult", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleResultRow.ruleSetResult", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ruleSetResult:Int", "kind" : "val"}, {"label" : "ruleSuiteResult", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleResultRow.ruleSuiteResult", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ruleSuiteResult:Int", "kind" : "val"}, {"label" : "ruleSuiteVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleResultRow.ruleSuiteVersion", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ruleSuiteVersion:Int", "kind" : "val"}, {"label" : "ruleSuiteId", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleResultRow.ruleSuiteId", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ruleSuiteId:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleResultRow.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleResultRow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleResultRow.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleResultWithProcessor", "shortDescription" : "Packs a rule result with a RunOnPassProcessor processor", "members_case class" : [{"member" : "com.sparkutils.quality.RuleResultWithProcessor#<init>", "error" : "unsupported entity"}, {"label" : "runOnPassProcessor", "tail" : ": RunOnPassProcessor", "member" : "com.sparkutils.quality.RuleResultWithProcessor.runOnPassProcessor", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#runOnPassProcessor:com.sparkutils.quality.RunOnPassProcessor", "kind" : "val"}, {"label" : "ruleResult", "tail" : ": RuleResult", "member" : "com.sparkutils.quality.RuleResultWithProcessor.ruleResult", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#ruleResult:com.sparkutils.quality.RuleResult", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleResultWithProcessor.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleRow", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.RuleRow#<init>", "error" : "unsupported entity"}, {"label" : "ruleEngineVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleRow.ruleEngineVersion", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleEngineVersion:Int", "kind" : "val"}, {"label" : "ruleEngineId", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleRow.ruleEngineId", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleEngineId:Int", "kind" : "val"}, {"label" : "ruleEngineSalience", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleRow.ruleEngineSalience", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleEngineSalience:Int", "kind" : "val"}, {"label" : "ruleExpr", "tail" : ": String", "member" : "com.sparkutils.quality.RuleRow.ruleExpr", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleExpr:String", "kind" : "val"}, {"label" : "ruleVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleRow.ruleVersion", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleVersion:Int", "kind" : "val"}, {"label" : "ruleId", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleRow.ruleId", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleId:Int", "kind" : "val"}, {"label" : "ruleSetVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleRow.ruleSetVersion", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleSetVersion:Int", "kind" : "val"}, {"label" : "ruleSetId", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleRow.ruleSetId", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleSetId:Int", "kind" : "val"}, {"label" : "ruleSuiteVersion", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleRow.ruleSuiteVersion", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleSuiteVersion:Int", "kind" : "val"}, {"label" : "ruleSuiteId", "tail" : ": Int", "member" : "com.sparkutils.quality.RuleRow.ruleSuiteId", "link" : "com\/sparkutils\/quality\/RuleRow.html#ruleSuiteId:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleRow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleRow.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleRow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleRow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleRow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleRow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleRow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleRow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleRow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleRow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleRow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleRow.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleRow.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleRow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleRow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleRow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleRow.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleSet", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.RuleSet#<init>", "error" : "unsupported entity"}, {"label" : "rules", "tail" : ": Seq[Rule]", "member" : "com.sparkutils.quality.RuleSet.rules", "link" : "com\/sparkutils\/quality\/RuleSet.html#rules:Seq[com.sparkutils.quality.Rule]", "kind" : "val"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.RuleSet.id", "link" : "com\/sparkutils\/quality\/RuleSet.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleSet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleSet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleSet.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleSetResult", "shortDescription" : "Result collection for a number of named rules", "members_case class" : [{"member" : "com.sparkutils.quality.RuleSetResult#<init>", "error" : "unsupported entity"}, {"label" : "ruleResults", "tail" : ": Map[VersionedId, RuleResult]", "member" : "com.sparkutils.quality.RuleSetResult.ruleResults", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#ruleResults:Map[com.sparkutils.quality.VersionedId,com.sparkutils.quality.RuleResult]", "kind" : "val"}, {"label" : "overallResult", "tail" : ": RuleResult", "member" : "com.sparkutils.quality.RuleSetResult.overallResult", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#overallResult:com.sparkutils.quality.RuleResult", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleSetResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSetResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleSetResult.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleSuite", "shortDescription" : "Represents a versioned collection of RuleSet's", "members_case class" : [{"label" : "withProbablePass", "tail" : "(probablePass: Double): RuleSuite", "member" : "com.sparkutils.quality.RuleSuite.withProbablePass", "link" : "com\/sparkutils\/quality\/RuleSuite.html#withProbablePass(probablePass:Double):com.sparkutils.quality.RuleSuite", "kind" : "def"}, {"label" : "foldWithProcessors", "tail" : "(inputRow: InternalRow, starter: InternalRow, debugMode: Boolean): (RuleSuiteResult, Any)", "member" : "com.sparkutils.quality.RuleSuite.foldWithProcessors", "link" : "com\/sparkutils\/quality\/RuleSuite.html#foldWithProcessors(inputRow:org.apache.spark.sql.catalyst.InternalRow,starter:org.apache.spark.sql.catalyst.InternalRow,debugMode:Boolean):(com.sparkutils.quality.RuleSuiteResult,Any)", "kind" : "def"}, {"label" : "evalWithProcessors", "tail" : "(internalRow: InternalRow, debugMode: Boolean): (RuleSuiteResult, quality.IdTriple, Any)", "member" : "com.sparkutils.quality.RuleSuite.evalWithProcessors", "link" : "com\/sparkutils\/quality\/RuleSuite.html#evalWithProcessors(internalRow:org.apache.spark.sql.catalyst.InternalRow,debugMode:Boolean):(com.sparkutils.quality.RuleSuiteResult,com.sparkutils.quality.IdTriple,Any)", "kind" : "def"}, {"label" : "eval", "tail" : "(internalRow: InternalRow): RuleSuiteResult", "member" : "com.sparkutils.quality.RuleSuite.eval", "link" : "com\/sparkutils\/quality\/RuleSuite.html#eval(internalRow:org.apache.spark.sql.catalyst.InternalRow):com.sparkutils.quality.RuleSuiteResult", "kind" : "def"}, {"member" : "com.sparkutils.quality.RuleSuite#<init>", "error" : "unsupported entity"}, {"label" : "probablePass", "tail" : ": Double", "member" : "com.sparkutils.quality.RuleSuite.probablePass", "link" : "com\/sparkutils\/quality\/RuleSuite.html#probablePass:Double", "kind" : "val"}, {"label" : "lambdaFunctions", "tail" : ": Seq[LambdaFunction]", "member" : "com.sparkutils.quality.RuleSuite.lambdaFunctions", "link" : "com\/sparkutils\/quality\/RuleSuite.html#lambdaFunctions:Seq[com.sparkutils.quality.LambdaFunction]", "kind" : "val"}, {"label" : "ruleSets", "tail" : ": Seq[RuleSet]", "member" : "com.sparkutils.quality.RuleSuite.ruleSets", "link" : "com\/sparkutils\/quality\/RuleSuite.html#ruleSets:Seq[com.sparkutils.quality.RuleSet]", "kind" : "val"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.RuleSuite.id", "link" : "com\/sparkutils\/quality\/RuleSuite.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleSuite.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleSuite.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleSuite.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleSuite.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleSuite.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleSuite.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleSuite.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSuite.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSuite.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSuite.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleSuite.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleSuite.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleSuite.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleSuite.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSuite.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSuite.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleSuite.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleSuiteResult", "shortDescription" : "Results for all rules run against a dataframe", "members_case class" : [{"label" : "details", "tail" : "(): RuleSuiteResultDetails", "member" : "com.sparkutils.quality.RuleSuiteResult.details", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#details:com.sparkutils.quality.RuleSuiteResultDetails", "kind" : "def"}, {"member" : "com.sparkutils.quality.RuleSuiteResult#<init>", "error" : "unsupported entity"}, {"label" : "ruleSetResults", "tail" : ": Map[VersionedId, RuleSetResult]", "member" : "com.sparkutils.quality.RuleSuiteResult.ruleSetResults", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#ruleSetResults:Map[com.sparkutils.quality.VersionedId,com.sparkutils.quality.RuleSetResult]", "kind" : "val"}, {"label" : "overallResult", "tail" : ": RuleResult", "member" : "com.sparkutils.quality.RuleSuiteResult.overallResult", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#overallResult:com.sparkutils.quality.RuleResult", "kind" : "val"}, {"label" : "id", "tail" : ": VersionedId", "member" : "com.sparkutils.quality.RuleSuiteResult.id", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#id:com.sparkutils.quality.VersionedId", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSuiteResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleSuiteResult.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RuleSuiteResultDetails", "shortDescription" : "Results for all rules run against a dataframe without the overallResult.", "members_case class" : [{"member" : "com.sparkutils.quality.RuleSuiteResultDetails#<init>", "error" : "unsupported entity"}, {"label" : "ruleSetResults", "tail" : ": Map[VersionedId, RuleSetResult]", "member" : "com.sparkutils.quality.RuleSuiteResultDetails.ruleSetResults", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#ruleSetResults:Map[com.sparkutils.quality.VersionedId,com.sparkutils.quality.RuleSetResult]", "kind" : "val"}, {"label" : "id", "tail" : ": VersionedId", "member" : "com.sparkutils.quality.RuleSuiteResultDetails.id", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#id:com.sparkutils.quality.VersionedId", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RuleSuiteResultDetails.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RunOnPassProcessor", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "withExpr", "tail" : "(expr: OutputExprLogic): RunOnPassProcessor", "member" : "com.sparkutils.quality.RunOnPassProcessor.withExpr", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#withExpr(expr:com.sparkutils.quality.OutputExprLogic):com.sparkutils.quality.RunOnPassProcessor", "kind" : "abstract def"}, {"label" : "withExpr", "tail" : "(expr: OutputExpression): RunOnPassProcessor", "member" : "com.sparkutils.quality.RunOnPassProcessor.withExpr", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#withExpr(expr:com.sparkutils.quality.OutputExpression):com.sparkutils.quality.RunOnPassProcessor", "kind" : "abstract def"}, {"label" : "returnIfPassed", "tail" : "(): OutputExprLogic", "member" : "com.sparkutils.quality.RunOnPassProcessor.returnIfPassed", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#returnIfPassed:com.sparkutils.quality.OutputExprLogic", "kind" : "abstract def"}, {"label" : "rule", "tail" : "(): String", "member" : "com.sparkutils.quality.RunOnPassProcessor.rule", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#rule:String", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): Id", "member" : "com.sparkutils.quality.RunOnPassProcessor.id", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#id:com.sparkutils.quality.Id", "kind" : "abstract def"}, {"label" : "salience", "tail" : "(): Int", "member" : "com.sparkutils.quality.RunOnPassProcessor.salience", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor.html#salience:Int", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html", "members_object" : [{"label" : "apply", "tail" : "(salience: Int, id: Id, e: OutputExpression): RunOnPassProcessorImpl", "member" : "com.sparkutils.quality.RunOnPassProcessor.apply", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#apply(salience:Int,id:com.sparkutils.quality.Id,e:com.sparkutils.quality.OutputExpression):com.sparkutils.quality.RunOnPassProcessorImpl", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RunOnPassProcessor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/sparkutils\/quality\/RunOnPassProcessor.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.RunOnPassProcessorHolder", "shortDescription" : "Until output expressions are re-integrated this will throw unimplemented", "members_case class" : [{"label" : "withExpr", "tail" : "(expr: OutputExprLogic): RunOnPassProcessor", "member" : "com.sparkutils.quality.RunOnPassProcessorHolder.withExpr", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#withExpr(expr:com.sparkutils.quality.OutputExprLogic):com.sparkutils.quality.RunOnPassProcessor", "kind" : "def"}, {"label" : "withExpr", "tail" : "(expr: OutputExpression): RunOnPassProcessor", "member" : "com.sparkutils.quality.RunOnPassProcessorHolder.withExpr", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#withExpr(expr:com.sparkutils.quality.OutputExpression):com.sparkutils.quality.RunOnPassProcessor", "kind" : "def"}, {"label" : "rule", "tail" : "(): String", "member" : "com.sparkutils.quality.RunOnPassProcessorHolder.rule", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#rule:String", "kind" : "def"}, {"label" : "returnIfPassed", "tail" : "(): OutputExprLogic", "member" : "com.sparkutils.quality.RunOnPassProcessorHolder.returnIfPassed", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#returnIfPassed:com.sparkutils.quality.OutputExprLogic", "kind" : "def"}, {"member" : "com.sparkutils.quality.RunOnPassProcessorHolder#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.RunOnPassProcessorHolder.id", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "salience", "tail" : ": Int", "member" : "com.sparkutils.quality.RunOnPassProcessorHolder.salience", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#salience:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RunOnPassProcessorHolder.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.RunOnPassProcessorImpl", "shortDescription" : "Generates a result upon a pass, it is not evaluated otherwise and only evaluated if no other rule has higher salience.", "members_case class" : [{"label" : "withExpr", "tail" : "(expr: OutputExprLogic): RunOnPassProcessor", "member" : "com.sparkutils.quality.RunOnPassProcessorImpl.withExpr", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#withExpr(expr:com.sparkutils.quality.OutputExprLogic):com.sparkutils.quality.RunOnPassProcessor", "kind" : "def"}, {"label" : "withExpr", "tail" : "(expr: OutputExpression): RunOnPassProcessor", "member" : "com.sparkutils.quality.RunOnPassProcessorImpl.withExpr", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#withExpr(expr:com.sparkutils.quality.OutputExpression):com.sparkutils.quality.RunOnPassProcessor", "kind" : "def"}, {"member" : "com.sparkutils.quality.RunOnPassProcessorImpl#<init>", "error" : "unsupported entity"}, {"label" : "returnIfPassed", "tail" : ": OutputExprLogic", "member" : "com.sparkutils.quality.RunOnPassProcessorImpl.returnIfPassed", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#returnIfPassed:com.sparkutils.quality.OutputExprLogic", "kind" : "val"}, {"label" : "rule", "tail" : ": String", "member" : "com.sparkutils.quality.RunOnPassProcessorImpl.rule", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#rule:String", "kind" : "val"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.RunOnPassProcessorImpl.id", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "salience", "tail" : ": Int", "member" : "com.sparkutils.quality.RunOnPassProcessorImpl.salience", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#salience:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/RunOnPassProcessorImpl.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.SalientRule", "shortDescription" : "Represents the rule that matched a given RuleEngine result", "members_case class" : [{"member" : "com.sparkutils.quality.SalientRule#<init>", "error" : "unsupported entity"}, {"label" : "ruleId", "tail" : ": VersionedId", "member" : "com.sparkutils.quality.SalientRule.ruleId", "link" : "com\/sparkutils\/quality\/SalientRule.html#ruleId:com.sparkutils.quality.VersionedId", "kind" : "val"}, {"label" : "ruleSetId", "tail" : ": VersionedId", "member" : "com.sparkutils.quality.SalientRule.ruleSetId", "link" : "com\/sparkutils\/quality\/SalientRule.html#ruleSetId:com.sparkutils.quality.VersionedId", "kind" : "val"}, {"label" : "ruleSuiteId", "tail" : ": VersionedId", "member" : "com.sparkutils.quality.SalientRule.ruleSuiteId", "link" : "com\/sparkutils\/quality\/SalientRule.html#ruleSuiteId:com.sparkutils.quality.VersionedId", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/SalientRule.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/SalientRule.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/SalientRule.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/SalientRule.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/SalientRule.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/SalientRule.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/SalientRule.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/SalientRule.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/SalientRule.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/SalientRule.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/SalientRule.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/SalientRule.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/SalientRule.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/SalientRule.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/SalientRule.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/SalientRule.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/SalientRule.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.SimpleField", "shortDescription" : "Used to filter columns for meta RuleSets", "members_case class" : [{"member" : "com.sparkutils.quality.SimpleField#<init>", "error" : "unsupported entity"}, {"label" : "nullable", "tail" : ": Boolean", "member" : "com.sparkutils.quality.SimpleField.nullable", "link" : "com\/sparkutils\/quality\/SimpleField.html#nullable:Boolean", "kind" : "val"}, {"label" : "dataType", "tail" : ": String", "member" : "com.sparkutils.quality.SimpleField.dataType", "link" : "com\/sparkutils\/quality\/SimpleField.html#dataType:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.SimpleField.name", "link" : "com\/sparkutils\/quality\/SimpleField.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/SimpleField.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/SimpleField.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/SimpleField.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/SimpleField.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/SimpleField.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/SimpleField.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/SimpleField.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/SimpleField.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/SimpleField.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/SimpleField.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/SimpleField.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/SimpleField.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/SimpleField.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/SimpleField.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/SimpleField.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/SimpleField.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/SimpleField.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.SoftFailed", "shortDescription" : "This shouldn't evaluate to a fail, think of it as Amber \/ Warn", "object" : "com\/sparkutils\/quality\/SoftFailed$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/SoftFailed$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/SoftFailed$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.VariablesLookup", "shortDescription" : "Provides a variable lookup function, after using the sql parser it will return all the fields used in an expression,allowing sanity checks on rules to use only expected fields but also to attribute how much a rule does - does it checkjust one field or use 20 of them.", "object" : "com\/sparkutils\/quality\/VariablesLookup$.html", "members_object" : [{"label" : "fieldsFromExpression", "tail" : "(expr: Expression, knownLambdaLookups: ProcessedLambdas): ExpressionLookup", "member" : "com.sparkutils.quality.VariablesLookup.fieldsFromExpression", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#fieldsFromExpression(expr:org.apache.spark.sql.catalyst.expressions.Expression,knownLambdaLookups:com.sparkutils.quality.VariablesLookup.ProcessedLambdas):com.sparkutils.quality.ExpressionLookup", "kind" : "def"}, {"label" : "fieldsFromLambda", "tail" : "(name: String, exprMap: Map[Id, Expression], m: ProcessedLambdas, lambdaExpressions: Map[String, Map[Id, Expression]]): (ProcessedLambdas, PossibleOverflowIds, UnknownSparkFunctions)", "member" : "com.sparkutils.quality.VariablesLookup.fieldsFromLambda", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#fieldsFromLambda(name:String,exprMap:Map[com.sparkutils.quality.Id,org.apache.spark.sql.catalyst.expressions.Expression],m:com.sparkutils.quality.VariablesLookup.ProcessedLambdas,lambdaExpressions:Map[String,Map[com.sparkutils.quality.Id,org.apache.spark.sql.catalyst.expressions.Expression]]):(com.sparkutils.quality.VariablesLookup.ProcessedLambdas,com.sparkutils.quality.VariablesLookup.PossibleOverflowIds,com.sparkutils.quality.VariablesLookup.UnknownSparkFunctions)", "kind" : "def"}, {"label" : "processLambdas", "tail" : "(m: Map[String, Map[Id, Expression]]): (ProcessedLambdas, PossibleOverflowIds, UnknownSparkFunctions)", "member" : "com.sparkutils.quality.VariablesLookup.processLambdas", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#processLambdas(m:Map[String,Map[com.sparkutils.quality.Id,org.apache.spark.sql.catalyst.expressions.Expression]]):(com.sparkutils.quality.VariablesLookup.ProcessedLambdas,com.sparkutils.quality.VariablesLookup.PossibleOverflowIds,com.sparkutils.quality.VariablesLookup.UnknownSparkFunctions)", "kind" : "def"}, {"label" : "toName", "tail" : "(unresolvedFunction: UnresolvedFunction): String", "member" : "com.sparkutils.quality.VariablesLookup.toName", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#toName(unresolvedFunction:org.apache.spark.sql.catalyst.analysis.UnresolvedFunction):String", "kind" : "def"}, {"label" : "toName", "tail" : "(parts: Seq[String]): String", "member" : "com.sparkutils.quality.VariablesLookup.toName", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#toName(parts:Seq[String]):String", "kind" : "def"}, {"label" : "toName", "tail" : "(nv: UnresolvedNamedLambdaVariable): String", "member" : "com.sparkutils.quality.VariablesLookup.toName", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#toName(nv:org.apache.spark.sql.catalyst.expressions.UnresolvedNamedLambdaVariable):String", "kind" : "def"}, {"label" : "toName", "tail" : "(ne: NamedExpression): String", "member" : "com.sparkutils.quality.VariablesLookup.toName", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#toName(ne:org.apache.spark.sql.catalyst.expressions.NamedExpression):String", "kind" : "def"}, {"label" : "UnknownSparkFunctions", "tail" : "", "member" : "com.sparkutils.quality.VariablesLookup.UnknownSparkFunctions", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#UnknownSparkFunctions=Map[com.sparkutils.quality.Id,Set[String]]", "kind" : "type"}, {"label" : "PossibleOverflowIds", "tail" : "", "member" : "com.sparkutils.quality.VariablesLookup.PossibleOverflowIds", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#PossibleOverflowIds=Set[com.sparkutils.quality.Id]", "kind" : "type"}, {"label" : "ProcessedLambdas", "tail" : "", "member" : "com.sparkutils.quality.VariablesLookup.ProcessedLambdas", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#ProcessedLambdas=Map[String,Map[com.sparkutils.quality.Id,com.sparkutils.quality.VariablesLookup.Identifiers]]", "kind" : "type"}, {"label" : "Identifiers", "tail" : "", "member" : "com.sparkutils.quality.VariablesLookup.Identifiers", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#Identifiers=Set[com.sparkutils.quality.VariablesLookup.Identifier]", "kind" : "type"}, {"label" : "Identifier", "tail" : "", "member" : "com.sparkutils.quality.VariablesLookup.Identifier", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#Identifier=String", "kind" : "type"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.sparkutils.quality.VariablesLookup.logger", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#logger:org.slf4j.Logger", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/VariablesLookup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.VersionedId", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/VersionedId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/VersionedId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/VersionedId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/VersionedId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/VersionedId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/VersionedId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/VersionedId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/VersionedId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/VersionedId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/VersionedId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/VersionedId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/VersionedId.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/VersionedId.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/VersionedId.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/VersionedId.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/VersionedId.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/VersionedId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/VersionedId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/VersionedId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "version", "tail" : ": Int", "member" : "com.sparkutils.quality.VersionedId.version", "link" : "com\/sparkutils\/quality\/VersionedId.html#version:Int", "kind" : "abstract val"}, {"label" : "id", "tail" : ": Int", "member" : "com.sparkutils.quality.VersionedId.id", "link" : "com\/sparkutils\/quality\/VersionedId.html#id:Int", "kind" : "abstract val"}], "shortDescription" : "base for storage of rule or ruleset ids, must be a trait to force frameless to use lookup and stop anyaccidental auto product treatment", "trait" : "com\/sparkutils\/quality\/VersionedId.html", "kind" : "trait"}], "com.sparkutils.quality.impl.bloom" : [{"name" : "com.sparkutils.quality.impl.bloom.BloomArrayRaw", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html", "members_object" : [{"label" : "enc", "tail" : ": Encoder[BloomArrayRaw]", "member" : "com.sparkutils.quality.impl.bloom.BloomArrayRaw.enc", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#enc:org.apache.spark.sql.Encoder[com.sparkutils.quality.impl.bloom.BloomArrayRaw]", "kind" : "implicit val"}, {"label" : "typedEnc", "tail" : ": TypedEncoder[BloomArrayRaw]", "member" : "com.sparkutils.quality.impl.bloom.BloomArrayRaw.typedEnc", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#typedEnc:frameless.TypedEncoder[com.sparkutils.quality.impl.bloom.BloomArrayRaw]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.sparkutils.quality.impl.bloom.BloomArrayRaw#<init>", "error" : "unsupported entity"}, {"label" : "bloom", "tail" : ": BloomStruct", "member" : "com.sparkutils.quality.impl.bloom.BloomArrayRaw.bloom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#bloom:com.sparkutils.quality.impl.bloom.BloomStruct", "kind" : "val"}, {"label" : "bloom_id", "tail" : ": String", "member" : "com.sparkutils.quality.impl.bloom.BloomArrayRaw.bloom_id", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#bloom_id:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/BloomArrayRaw.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomDeserializer", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "deserialize", "tail" : "(storageFormat: Array[Byte]): T", "member" : "com.sparkutils.quality.impl.bloom.BloomDeserializer.deserialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html#deserialize(storageFormat:Array[Byte]):T", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/BloomDeserializer.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomExpressionLookup", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html", "members_object" : [{"label" : "bloomLookupValueConverter", "tail" : "(expr: Expression): (Any) ⇒ Any", "member" : "com.sparkutils.quality.impl.bloom.BloomExpressionLookup.bloomLookupValueConverter", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#bloomLookupValueConverter(expr:org.apache.spark.sql.catalyst.expressions.Expression):Any=>Any", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomExpressionLookup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomFilterLookup", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html", "members_object" : [{"label" : "getBlooms", "tail" : "(expression: Expression): Seq[String]", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookup.getBlooms", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#getBlooms(expression:org.apache.spark.sql.catalyst.expressions.Expression):Seq[String]", "kind" : "def"}, {"label" : "bloomDoesNotExistJ", "tail" : "(bloom: String): () ⇒ Nothing", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookup.bloomDoesNotExistJ", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#bloomDoesNotExistJ(bloom:String):()=>Nothing", "kind" : "def"}, {"label" : "apply", "tail" : "(bloomFilterName: Column, lookupValue: Column, bloomMap: Broadcast[quality.BloomFilterMap]): Column", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookup.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#apply(bloomFilterName:org.apache.spark.sql.Column,lookupValue:org.apache.spark.sql.Column,bloomMap:org.apache.spark.broadcast.Broadcast[com.sparkutils.quality.BloomFilterMap]):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression", "shortDescription" : "Returns a 0.0 for not present or 1 - FPP value for probably present (i.e.", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newLeft: Expression, newRight: Expression): Expression", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#withNewChildrenInternal(newLeft:org.apache.spark.sql.catalyst.expressions.Expression,newRight:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.sql", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#sql:String", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(left: Any, right: Any): Any", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#nullSafeEval(left:Any,right:Any):Any", "kind" : "def"}, {"label" : "isPrimitive", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.isPrimitive", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#isPrimitive:Boolean", "kind" : "lazy val"}, {"label" : "converter", "tail" : ": (Any) ⇒ Any", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.converter", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#converter:Any=>Any", "kind" : "lazy val"}, {"label" : "bloomF", "tail" : "(right: Any): (quality.BloomLookup, Double)", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.bloomF", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#bloomF(right:Any):(com.sparkutils.quality.BloomLookup,Double)", "kind" : "final def"}, {"label" : "bloom", "tail" : ": (quality.BloomLookup, Double)", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.bloom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#bloom:(com.sparkutils.quality.BloomLookup,Double)", "kind" : "lazy val"}, {"label" : "map", "tail" : ": quality.BloomFilterMap", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.map", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#map:com.sparkutils.quality.BloomFilterMap", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression#<init>", "error" : "unsupported entity"}, {"label" : "bloomMap", "tail" : ": Broadcast[quality.BloomFilterMap]", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.bloomMap", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#bloomMap:org.apache.spark.broadcast.Broadcast[com.sparkutils.quality.BloomFilterMap]", "kind" : "val"}, {"label" : "right", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.right", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#right:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "left", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupExpression.left", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#left:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupImports", "members_trait" : [{"label" : "bloomFilterLookup", "tail" : "(bloomFilterName: Column, lookupValue: Column, bloomMap: Broadcast[quality.BloomFilterMap]): Column", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupImports.bloomFilterLookup", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#bloomFilterLookup(bloomFilterName:org.apache.spark.sql.Column,lookupValue:org.apache.spark.sql.Column,bloomMap:org.apache.spark.broadcast.Broadcast[com.sparkutils.quality.BloomFilterMap]):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "getBlooms", "tail" : "(ruleSuite: RuleSuite): Seq[String]", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupImports.getBlooms", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#getBlooms(ruleSuite:com.sparkutils.quality.RuleSuite):Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupSparkVersionSpecific", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html", "members_object" : [{"label" : "getBlooms", "tail" : "(expression: Expression): Seq[String]", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterLookupSparkVersionSpecific.getBlooms", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#getBlooms(expression:org.apache.spark.sql.catalyst.expressions.Expression):Seq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterLookupSparkVersionSpecific$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomFilterRegistration", "members_trait" : [{"label" : "registerBloomMapAndFunction", "tail" : "(bloomFilterMap: Broadcast[quality.BloomFilterMap]): Unit", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterRegistration.registerBloomMapAndFunction", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#registerBloomMapAndFunction(bloomFilterMap:org.apache.spark.broadcast.Broadcast[com.sparkutils.quality.BloomFilterMap]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterRegistration.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes", "members_trait" : [{"label" : "SparkBloomFilter", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.SparkBloomFilter", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#SparkBloomFilterextendsBloomFilterTypes.this.BloomLookupwithProductwithSerializable", "kind" : "case class"}, {"label" : "BloomLookup", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomLookup", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#BloomLookupextendsAnyRef", "kind" : "trait"}, {"label" : "BloomFilterMap", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.BloomFilterTypes.BloomFilterMap", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#BloomFilterMap=Map[String,(BloomFilterTypes.this.BloomLookup,Double)]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/BloomFilterTypes.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomRaw", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.bloom.BloomRaw#<init>", "error" : "unsupported entity"}, {"label" : "bloom", "tail" : ": Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.BloomRaw.bloom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#bloom:Array[Byte]", "kind" : "val"}, {"label" : "bloom_id", "tail" : ": String", "member" : "com.sparkutils.quality.impl.bloom.BloomRaw.bloom_id", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#bloom_id:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/BloomRaw.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomSerializer", "members_trait" : [{"label" : "Serialized", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.BloomSerializer.Serialized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#Serialized=(String,(com.sparkutils.quality.BloomLookup,Double))", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toType", "tail" : "(bloomFilter: Serialized): SerType", "member" : "com.sparkutils.quality.impl.bloom.BloomSerializer.toType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#toType(bloomFilter:BloomSerializer.this.Serialized):BloomSerializer.this.SerType", "kind" : "abstract def"}, {"label" : "fromType", "tail" : "(ser: SerType): Serialized", "member" : "com.sparkutils.quality.impl.bloom.BloomSerializer.fromType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#fromType(ser:BloomSerializer.this.SerType):BloomSerializer.this.Serialized", "kind" : "abstract def"}, {"label" : "enc", "tail" : "(sparkSession: SparkSession): Encoder[SerType]", "member" : "com.sparkutils.quality.impl.bloom.BloomSerializer.enc", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html#enc(sparkSession:org.apache.spark.sql.SparkSession):org.apache.spark.sql.Encoder[BloomSerializer.this.SerType]", "kind" : "implicit abstract def"}, {"member" : "com.sparkutils.quality.impl.bloom.BloomSerializer.SerType", "error" : "unsupported entity"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/BloomSerializer.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.BloomStruct", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html", "members_object" : [{"label" : "enc", "tail" : ": Encoder[BloomStruct]", "member" : "com.sparkutils.quality.impl.bloom.BloomStruct.enc", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#enc:org.apache.spark.sql.Encoder[com.sparkutils.quality.impl.bloom.BloomStruct]", "kind" : "implicit val"}, {"label" : "typedEnc", "tail" : ": TypedEncoder[BloomStruct]", "member" : "com.sparkutils.quality.impl.bloom.BloomStruct.typedEnc", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#typedEnc:frameless.TypedEncoder[com.sparkutils.quality.impl.bloom.BloomStruct]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.sparkutils.quality.impl.bloom.BloomStruct#<init>", "error" : "unsupported entity"}, {"label" : "blooms", "tail" : ": Array[Array[Byte]]", "member" : "com.sparkutils.quality.impl.bloom.BloomStruct.blooms", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#blooms:Array[Array[Byte]]", "kind" : "val"}, {"label" : "fpp", "tail" : ": Double", "member" : "com.sparkutils.quality.impl.bloom.BloomStruct.fpp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#fpp:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/BloomStruct.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.children", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.dataType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "eval", "tail" : "(buffer: BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]): Any", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.eval", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#eval(buffer:com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot,Array[Array[Byte]]]):Any", "kind" : "def"}, {"label" : "bloomDes", "tail" : "(): BloomDeserializer[BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]]", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.bloomDes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#bloomDes:com.sparkutils.quality.impl.bloom.BloomDeserializer[com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot,Array[Array[Byte]]]]", "kind" : "implicit def"}, {"label" : "createAggregationBuffer", "tail" : "(): BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.createAggregationBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#createAggregationBuffer():com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot,Array[Array[Byte]]]", "kind" : "def"}, {"label" : "withNewInputAggBufferOffset", "tail" : "(newInputAggBufferOffset: Int): ImperativeAggregate", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.withNewInputAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#withNewInputAggBufferOffset(newInputAggBufferOffset:Int):org.apache.spark.sql.catalyst.expressions.aggregate.ImperativeAggregate", "kind" : "def"}, {"label" : "withNewMutableAggBufferOffset", "tail" : "(newMutableAggBufferOffset: Int): ImperativeAggregate", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.withNewMutableAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#withNewMutableAggBufferOffset(newMutableAggBufferOffset:Int):org.apache.spark.sql.catalyst.expressions.aggregate.ImperativeAggregate", "kind" : "def"}, {"label" : "root", "tail" : ": BucketedFilesRoot", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.root", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#root:com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot", "kind" : "lazy val"}, {"label" : "numBuckets", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.numBuckets", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#numBuckets:Int", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator#<init>", "error" : "unsupported entity"}, {"label" : "bucketedFilesRoot", "tail" : ": BucketedFilesRoot", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.bucketedFilesRoot", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#bucketedFilesRoot:com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot", "kind" : "val"}, {"label" : "inputAggBufferOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.inputAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#inputAggBufferOffset:Int", "kind" : "val"}, {"label" : "mutableAggBufferOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.mutableAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#mutableAggBufferOffset:Int", "kind" : "val"}, {"label" : "id", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.id", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#id:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "expectedFPPE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.expectedFPPE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#expectedFPPE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "expectedSizeE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.expectedSizeE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#expectedSizeE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.BucketedArrayParquetAggregator.child", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "fpp", "tail" : ": Double", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomFPP.fpp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#fpp:Double", "kind" : "lazy val"}, {"label" : "deserialize", "tail" : "(storageFormat: Array[Byte]): BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.deserialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#deserialize(storageFormat:Array[Byte]):T", "kind" : "def"}, {"label" : "serialize", "tail" : "(buffer: BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]): Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.serialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#serialize(buffer:T):Array[Byte]", "kind" : "def"}, {"label" : "merge", "tail" : "(buffer: BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]], input: BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]): BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.merge", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#merge(buffer:T,input:T):T", "kind" : "def"}, {"label" : "update", "tail" : "(buffer: BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]], input: InternalRow): BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.update", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#update(buffer:T,input:org.apache.spark.sql.catalyst.InternalRow):T", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.nullable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#nullable:Boolean", "kind" : "def"}, {"label" : "converter", "tail" : ": (Any) ⇒ Any", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.converter", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#converter:Any=>Any", "kind" : "lazy val"}, {"label" : "expectedSize", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.expectedSize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#expectedSize:Int", "kind" : "lazy val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "mergeBuffersObjects", "tail" : "(buffer: InternalRow, inputBuffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.mergeBuffersObjects", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#mergeBuffersObjects(buffer:org.apache.spark.sql.catalyst.InternalRow,inputBuffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "serializeAggregateBufferInPlace", "tail" : "(buffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.serializeAggregateBufferInPlace", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#serializeAggregateBufferInPlace(buffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "aggBufferSchema", "tail" : "(): StructType", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.aggBufferSchema", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#aggBufferSchema:org.apache.spark.sql.types.StructType", "kind" : "final def"}, {"label" : "inputAggBufferAttributes", "tail" : ": Seq[AttributeReference]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.inputAggBufferAttributes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#inputAggBufferAttributes:Seq[org.apache.spark.sql.catalyst.expressions.AttributeReference]", "kind" : "final lazy val"}, {"label" : "aggBufferAttributes", "tail" : ": Seq[AttributeReference]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.aggBufferAttributes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#aggBufferAttributes:Seq[org.apache.spark.sql.catalyst.expressions.AttributeReference]", "kind" : "final lazy val"}, {"label" : "eval", "tail" : "(buffer: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.eval", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#eval(buffer:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "merge", "tail" : "(buffer: InternalRow, inputBuffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.merge", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#merge(buffer:org.apache.spark.sql.catalyst.InternalRow,inputBuffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "update", "tail" : "(buffer: InternalRow, input: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.update", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#update(buffer:org.apache.spark.sql.catalyst.InternalRow,input:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "initialize", "tail" : "(buffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.initialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#initialize(buffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "toAggString", "tail" : "(isDistinct: Boolean): String", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#toAggString(isDistinct:Boolean):String", "kind" : "def"}, {"label" : "sql", "tail" : "(isDistinct: Boolean): String", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.sql", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#sql(isDistinct:Boolean):String", "kind" : "def"}, {"label" : "toAggregateExpression", "tail" : "(isDistinct: Boolean, filter: Option[Expression]): AggregateExpression", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggregateExpression", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#toAggregateExpression(isDistinct:Boolean,filter:Option[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression", "kind" : "def"}, {"label" : "toAggregateExpression", "tail" : "(): AggregateExpression", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggregateExpression", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#toAggregateExpression():org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression", "kind" : "def"}, {"label" : "defaultResult", "tail" : "(): Option[Literal]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.defaultResult", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#defaultResult:Option[org.apache.spark.sql.catalyst.expressions.Literal]", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.foldable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#foldable:Boolean", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/BucketedArrayParquetAggregator.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.Parquet", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html", "members_object" : [{"label" : "deserialize", "tail" : "(storageFormat: Array[Byte])(arg0: BloomDeserializer[T]): T", "member" : "com.sparkutils.quality.impl.bloom.Parquet.deserialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#deserialize[T](storageFormat:Array[Byte])(implicitevidence$1:com.sparkutils.quality.impl.bloom.BloomDeserializer[T]):T", "kind" : "def"}, {"label" : "largeBucketFileDes", "tail" : ": BloomDeserializer[BucketedCreator[BucketedFilesRoot, Array[Array[Byte]]]]", "member" : "com.sparkutils.quality.impl.bloom.Parquet.largeBucketFileDes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#largeBucketFileDes:com.sparkutils.quality.impl.bloom.BloomDeserializer[com.sparkutils.quality.impl.bloom.parquet.BucketedCreator[com.sparkutils.quality.impl.bloom.parquet.BucketedFilesRoot,Array[Array[Byte]]]]", "kind" : "implicit val"}, {"label" : "blockDes", "tail" : ": BloomDeserializer[BlockSplitBloomFilterImpl]", "member" : "com.sparkutils.quality.impl.bloom.Parquet.blockDes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#blockDes:com.sparkutils.quality.impl.bloom.BloomDeserializer[com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Parquet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.ParquetAggregator", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#withNewChildrenInternal(newChildren:IndexedSeq[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "bloomDes", "tail" : "(): BloomDeserializer[BlockSplitBloomFilterImpl]", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.bloomDes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#bloomDes:com.sparkutils.quality.impl.bloom.BloomDeserializer[com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl]", "kind" : "implicit def"}, {"label" : "createAggregationBuffer", "tail" : "(): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.createAggregationBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#createAggregationBuffer():com.sparkutils.quality.impl.bloom.parquet.BlockSplitBloomFilterImpl", "kind" : "def"}, {"label" : "withNewInputAggBufferOffset", "tail" : "(newInputAggBufferOffset: Int): ImperativeAggregate", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.withNewInputAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#withNewInputAggBufferOffset(newInputAggBufferOffset:Int):org.apache.spark.sql.catalyst.expressions.aggregate.ImperativeAggregate", "kind" : "def"}, {"label" : "withNewMutableAggBufferOffset", "tail" : "(newMutableAggBufferOffset: Int): ImperativeAggregate", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.withNewMutableAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#withNewMutableAggBufferOffset(newMutableAggBufferOffset:Int):org.apache.spark.sql.catalyst.expressions.aggregate.ImperativeAggregate", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator#<init>", "error" : "unsupported entity"}, {"label" : "inputAggBufferOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.inputAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#inputAggBufferOffset:Int", "kind" : "val"}, {"label" : "mutableAggBufferOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.mutableAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#mutableAggBufferOffset:Int", "kind" : "val"}, {"label" : "expectedFPPE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.expectedFPPE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#expectedFPPE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "expectedSizeE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.expectedSizeE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#expectedSizeE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetAggregator.child", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "deserialize", "tail" : "(storageFormat: Array[Byte]): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.deserialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#deserialize(storageFormat:Array[Byte]):T", "kind" : "def"}, {"label" : "serialize", "tail" : "(buffer: BlockSplitBloomFilterImpl): Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.serialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#serialize(buffer:T):Array[Byte]", "kind" : "def"}, {"label" : "eval", "tail" : "(buffer: BlockSplitBloomFilterImpl): Any", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.eval", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#eval(buffer:T):Any", "kind" : "def"}, {"label" : "merge", "tail" : "(buffer: BlockSplitBloomFilterImpl, input: BlockSplitBloomFilterImpl): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.merge", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#merge(buffer:T,input:T):T", "kind" : "def"}, {"label" : "update", "tail" : "(buffer: BlockSplitBloomFilterImpl, input: InternalRow): BlockSplitBloomFilterImpl", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.update", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#update(buffer:T,input:org.apache.spark.sql.catalyst.InternalRow):T", "kind" : "def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.children", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.dataType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.nullable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#nullable:Boolean", "kind" : "def"}, {"label" : "converter", "tail" : ": (Any) ⇒ Any", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.converter", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#converter:Any=>Any", "kind" : "lazy val"}, {"label" : "expectedSize", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.expectedSize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#expectedSize:Int", "kind" : "lazy val"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "mergeBuffersObjects", "tail" : "(buffer: InternalRow, inputBuffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.mergeBuffersObjects", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#mergeBuffersObjects(buffer:org.apache.spark.sql.catalyst.InternalRow,inputBuffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "serializeAggregateBufferInPlace", "tail" : "(buffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.serializeAggregateBufferInPlace", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#serializeAggregateBufferInPlace(buffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "aggBufferSchema", "tail" : "(): StructType", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.aggBufferSchema", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#aggBufferSchema:org.apache.spark.sql.types.StructType", "kind" : "final def"}, {"label" : "inputAggBufferAttributes", "tail" : ": Seq[AttributeReference]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.inputAggBufferAttributes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#inputAggBufferAttributes:Seq[org.apache.spark.sql.catalyst.expressions.AttributeReference]", "kind" : "final lazy val"}, {"label" : "aggBufferAttributes", "tail" : ": Seq[AttributeReference]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.aggBufferAttributes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#aggBufferAttributes:Seq[org.apache.spark.sql.catalyst.expressions.AttributeReference]", "kind" : "final lazy val"}, {"label" : "eval", "tail" : "(buffer: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.eval", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#eval(buffer:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "merge", "tail" : "(buffer: InternalRow, inputBuffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.merge", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#merge(buffer:org.apache.spark.sql.catalyst.InternalRow,inputBuffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "update", "tail" : "(buffer: InternalRow, input: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.update", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#update(buffer:org.apache.spark.sql.catalyst.InternalRow,input:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "initialize", "tail" : "(buffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.initialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#initialize(buffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "toAggString", "tail" : "(isDistinct: Boolean): String", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#toAggString(isDistinct:Boolean):String", "kind" : "def"}, {"label" : "sql", "tail" : "(isDistinct: Boolean): String", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.sql", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#sql(isDistinct:Boolean):String", "kind" : "def"}, {"label" : "toAggregateExpression", "tail" : "(isDistinct: Boolean, filter: Option[Expression]): AggregateExpression", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggregateExpression", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#toAggregateExpression(isDistinct:Boolean,filter:Option[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression", "kind" : "def"}, {"label" : "toAggregateExpression", "tail" : "(): AggregateExpression", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggregateExpression", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#toAggregateExpression():org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression", "kind" : "def"}, {"label" : "defaultResult", "tail" : "(): Option[Literal]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.defaultResult", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#defaultResult:Option[org.apache.spark.sql.catalyst.expressions.Literal]", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.foldable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#foldable:Boolean", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetAggregator.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator", "members_trait" : [{"label" : "children", "tail" : "(): Seq[Expression]", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.children", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.dataType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.nullable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#nullable:Boolean", "kind" : "def"}, {"label" : "converter", "tail" : ": (Any) ⇒ Any", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.converter", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#converter:Any=>Any", "kind" : "lazy val"}, {"label" : "expectedSize", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.expectedSize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#expectedSize:Int", "kind" : "lazy val"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "inputAggBufferOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.inputAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#inputAggBufferOffset:Int", "kind" : "val"}, {"label" : "mutableAggBufferOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.mutableAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#mutableAggBufferOffset:Int", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "expectedFPPE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.expectedFPPE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#expectedFPPE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract val"}, {"label" : "expectedSizeE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.expectedSizeE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#expectedSizeE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.child", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "abstract def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.eval", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomAggregator.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.ParquetBloomFPP", "members_trait" : [{"label" : "fpp", "tail" : ": Double", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomFPP.fpp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#fpp:Double", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "expectedFPPE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomFPP.expectedFPPE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#expectedFPPE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract val"}, {"label" : "expectedSizeE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomFPP.expectedSizeE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html#expectedSizeE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/ParquetBloomFPP.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.bloom.Serializing", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html", "members_object" : [{"label" : "toDF", "tail" : "(bloomFilterMap: quality.BloomFilterMap)(arg0: BloomSerializer[SerializedType, T]): Dataset[SerType]", "member" : "com.sparkutils.quality.impl.bloom.Serializing.toDF", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#toDF[SerializedType,T](bloomFilterMap:com.sparkutils.quality.BloomFilterMap)(implicitevidence$2:com.sparkutils.quality.impl.bloom.BloomSerializer[SerializedType,T]):org.apache.spark.sql.Dataset[com.sparkutils.quality.impl.bloom.BloomSerializer[SerializedType,T]#SerType]", "kind" : "def"}, {"label" : "fromDF", "tail" : "(df: DataFrame, id: Column, bloom: Column)(arg0: BloomSerializer[SerializedType, T]): quality.BloomFilterMap", "member" : "com.sparkutils.quality.impl.bloom.Serializing.fromDF", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#fromDF[SerializedType,T](df:org.apache.spark.sql.DataFrame,id:org.apache.spark.sql.Column,bloom:org.apache.spark.sql.Column)(implicitevidence$1:com.sparkutils.quality.impl.bloom.BloomSerializer[SerializedType,T]):com.sparkutils.quality.BloomFilterMap", "kind" : "def"}, {"label" : "sparkBloomFilterSerializer", "tail" : ": SparkBloomFilterSerializer.type", "member" : "com.sparkutils.quality.impl.bloom.Serializing.sparkBloomFilterSerializer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#sparkBloomFilterSerializer:com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer.type", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/Serializing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html", "members_object" : [{"label" : "toType", "tail" : "(bloomFilter: Serialized): SerType", "member" : "com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer.toType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#toType(bloomFilter:com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer.Serialized):com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer.SerType", "kind" : "def"}, {"label" : "fromType", "tail" : "(bloomRaw: BloomRaw): Serialized", "member" : "com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer.fromType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#fromType(bloomRaw:com.sparkutils.quality.impl.bloom.BloomRaw):com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer.Serialized", "kind" : "def"}, {"label" : "enc", "tail" : "(sparkSession: SparkSession): Encoder[SerType]", "member" : "com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer.enc", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#enc(sparkSession:org.apache.spark.sql.SparkSession):org.apache.spark.sql.Encoder[com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer.SerType]", "kind" : "implicit def"}, {"label" : "SerType", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.SparkBloomFilterSerializer.SerType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#SerType=com.sparkutils.quality.impl.bloom.BloomRaw", "kind" : "type"}, {"label" : "Serialized", "tail" : "", "member" : "com.sparkutils.quality.impl.bloom.BloomSerializer.Serialized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#Serialized=(String,(com.sparkutils.quality.BloomLookup,Double))", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/SparkBloomFilterSerializer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator", "members_trait" : [{"label" : "deserialize", "tail" : "(storageFormat: Array[Byte]): T", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.deserialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#deserialize(storageFormat:Array[Byte]):T", "kind" : "def"}, {"label" : "serialize", "tail" : "(buffer: T): Array[Byte]", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.serialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#serialize(buffer:T):Array[Byte]", "kind" : "def"}, {"label" : "eval", "tail" : "(buffer: T): Any", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.eval", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#eval(buffer:T):Any", "kind" : "def"}, {"label" : "merge", "tail" : "(buffer: T, input: T): T", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.merge", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#merge(buffer:T,input:T):T", "kind" : "def"}, {"label" : "update", "tail" : "(buffer: T, input: InternalRow): T", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.update", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#update(buffer:T,input:org.apache.spark.sql.catalyst.InternalRow):T", "kind" : "def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.children", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#children:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.dataType", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.nullable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#nullable:Boolean", "kind" : "def"}, {"label" : "converter", "tail" : ": (Any) ⇒ Any", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.converter", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#converter:Any=>Any", "kind" : "lazy val"}, {"label" : "expectedSize", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.expectedSize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#expectedSize:Int", "kind" : "lazy val"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "inputAggBufferOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.inputAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#inputAggBufferOffset:Int", "kind" : "val"}, {"label" : "mutableAggBufferOffset", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.mutableAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#mutableAggBufferOffset:Int", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "mergeBuffersObjects", "tail" : "(buffer: InternalRow, inputBuffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.mergeBuffersObjects", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#mergeBuffersObjects(buffer:org.apache.spark.sql.catalyst.InternalRow,inputBuffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "serializeAggregateBufferInPlace", "tail" : "(buffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.serializeAggregateBufferInPlace", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#serializeAggregateBufferInPlace(buffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "aggBufferSchema", "tail" : "(): StructType", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.aggBufferSchema", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#aggBufferSchema:org.apache.spark.sql.types.StructType", "kind" : "final def"}, {"label" : "inputAggBufferAttributes", "tail" : ": Seq[AttributeReference]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.inputAggBufferAttributes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#inputAggBufferAttributes:Seq[org.apache.spark.sql.catalyst.expressions.AttributeReference]", "kind" : "final lazy val"}, {"label" : "aggBufferAttributes", "tail" : ": Seq[AttributeReference]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.aggBufferAttributes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#aggBufferAttributes:Seq[org.apache.spark.sql.catalyst.expressions.AttributeReference]", "kind" : "final lazy val"}, {"label" : "eval", "tail" : "(buffer: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.eval", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#eval(buffer:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "merge", "tail" : "(buffer: InternalRow, inputBuffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.merge", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#merge(buffer:org.apache.spark.sql.catalyst.InternalRow,inputBuffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "update", "tail" : "(buffer: InternalRow, input: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.update", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#update(buffer:org.apache.spark.sql.catalyst.InternalRow,input:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "initialize", "tail" : "(buffer: InternalRow): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.initialize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#initialize(buffer:org.apache.spark.sql.catalyst.InternalRow):Unit", "kind" : "final def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "toAggString", "tail" : "(isDistinct: Boolean): String", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#toAggString(isDistinct:Boolean):String", "kind" : "def"}, {"label" : "sql", "tail" : "(isDistinct: Boolean): String", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.sql", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#sql(isDistinct:Boolean):String", "kind" : "def"}, {"label" : "toAggregateExpression", "tail" : "(isDistinct: Boolean, filter: Option[Expression]): AggregateExpression", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggregateExpression", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#toAggregateExpression(isDistinct:Boolean,filter:Option[org.apache.spark.sql.catalyst.expressions.Expression]):org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression", "kind" : "def"}, {"label" : "toAggregateExpression", "tail" : "(): AggregateExpression", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.toAggregateExpression", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#toAggregateExpression():org.apache.spark.sql.catalyst.expressions.aggregate.AggregateExpression", "kind" : "def"}, {"label" : "defaultResult", "tail" : "(): Option[Literal]", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.defaultResult", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#defaultResult:Option[org.apache.spark.sql.catalyst.expressions.Literal]", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction.foldable", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#foldable:Boolean", "kind" : "final def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "bloomDes", "tail" : "(): BloomDeserializer[T]", "member" : "com.sparkutils.quality.impl.bloom.TypedParquetBloomAggregator.bloomDes", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#bloomDes:com.sparkutils.quality.impl.bloom.BloomDeserializer[T]", "kind" : "implicit abstract def"}, {"label" : "expectedFPPE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.expectedFPPE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#expectedFPPE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract val"}, {"label" : "expectedSizeE", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.expectedSizeE", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#expectedSizeE:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.bloom.ParquetBloomAggregator.child", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "abstract val"}, {"label" : "createAggregationBuffer", "tail" : "(): T", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.TypedImperativeAggregate.createAggregationBuffer", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#createAggregationBuffer():T", "kind" : "abstract def"}, {"label" : "withNewInputAggBufferOffset", "tail" : "(newInputAggBufferOffset: Int): ImperativeAggregate", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.ImperativeAggregate.withNewInputAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#withNewInputAggBufferOffset(newInputAggBufferOffset:Int):org.apache.spark.sql.catalyst.expressions.aggregate.ImperativeAggregate", "kind" : "abstract def"}, {"label" : "withNewMutableAggBufferOffset", "tail" : "(newMutableAggBufferOffset: Int): ImperativeAggregate", "member" : "org.apache.spark.sql.catalyst.expressions.aggregate.ImperativeAggregate.withNewMutableAggBufferOffset", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#withNewMutableAggBufferOffset(newMutableAggBufferOffset:Int):org.apache.spark.sql.catalyst.expressions.aggregate.ImperativeAggregate", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/bloom\/TypedParquetBloomAggregator.html", "kind" : "trait"}], "com.sparkutils.quality.impl" : [{"name" : "com.sparkutils.quality.impl.DataFrameSyntaxError", "shortDescription" : "", "members_case class" : [{"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.DataFrameSyntaxError.id", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.DataFrameSyntaxError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.sparkutils.quality.impl.DataFrameSyntaxError.error", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#error:String", "kind" : "val"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxError.syntax", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#errorText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/DataFrameSyntaxError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.EmptyMap", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html", "members_object" : [{"label" : "toString", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.EmptyMap.toString", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#toString():String", "kind" : "def"}, {"label" : "copy", "tail" : "(): MapData", "member" : "com.sparkutils.quality.impl.EmptyMap.copy", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#copy():org.apache.spark.sql.catalyst.util.MapData", "kind" : "def"}, {"label" : "numElements", "tail" : "(): Int", "member" : "com.sparkutils.quality.impl.EmptyMap.numElements", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#numElements():Int", "kind" : "def"}, {"label" : "valueArray", "tail" : ": ArrayData", "member" : "com.sparkutils.quality.impl.EmptyMap.valueArray", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#valueArray:org.apache.spark.sql.catalyst.util.ArrayData", "kind" : "val"}, {"label" : "keyArray", "tail" : ": ArrayData", "member" : "com.sparkutils.quality.impl.EmptyMap.keyArray", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#keyArray:org.apache.spark.sql.catalyst.util.ArrayData", "kind" : "val"}, {"label" : "foreach", "tail" : "(keyType: DataType, valueType: DataType, f: (Any, Any) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.util.MapData.foreach", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#foreach(keyType:org.apache.spark.sql.types.DataType,valueType:org.apache.spark.sql.types.DataType,f:(Any,Any)=>Unit):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/EmptyMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.Encoders", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/Encoders$.html", "members_object" : [{"label" : "ruleFolderResultExpEnc", "tail" : "(arg0: TypedEncoder[T]): Encoder[RuleFolderResult[T]]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleFolderResultExpEnc", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#ruleFolderResultExpEnc[T](implicitevidence$4:frameless.TypedEncoder[T]):org.apache.spark.sql.Encoder[com.sparkutils.quality.RuleFolderResult[T]]", "kind" : "implicit def"}, {"label" : "ruleFolderResultTypedEnc", "tail" : "(arg0: TypedEncoder[T], i0: Aux[RuleFolderResult[T], G], i1: Aux[G, H], i2: IsHCons[H], i3: Lazy[RecordEncoderFields[H]], i4: Lazy[NewInstanceExprs[G]], i5: ClassTag[RuleFolderResult[T]]): TypedEncoder[RuleFolderResult[T]]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleFolderResultTypedEnc", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#ruleFolderResultTypedEnc[T,G<:shapeless.HList,H<:shapeless.HList](implicitevidence$3:frameless.TypedEncoder[T],impliciti0:shapeless.LabelledGeneric.Aux[com.sparkutils.quality.RuleFolderResult[T],G],impliciti1:frameless.DropUnitValues.Aux[G,H],impliciti2:shapeless.ops.hlist.IsHCons[H],impliciti3:shapeless.Lazy[frameless.RecordEncoderFields[H]],impliciti4:shapeless.Lazy[frameless.NewInstanceExprs[G]],impliciti5:scala.reflect.ClassTag[com.sparkutils.quality.RuleFolderResult[T]]):frameless.TypedEncoder[com.sparkutils.quality.RuleFolderResult[T]]", "kind" : "implicit def"}, {"label" : "ruleEngineResultExpEnc", "tail" : "(arg0: TypedEncoder[T]): Encoder[RuleEngineResult[T]]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleEngineResultExpEnc", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#ruleEngineResultExpEnc[T](implicitevidence$2:frameless.TypedEncoder[T]):org.apache.spark.sql.Encoder[com.sparkutils.quality.RuleEngineResult[T]]", "kind" : "implicit def"}, {"label" : "ruleEngineResultTypedEnc", "tail" : "(arg0: TypedEncoder[T], i0: Aux[RuleEngineResult[T], G], i1: Aux[G, H], i2: IsHCons[H], i3: Lazy[RecordEncoderFields[H]], i4: Lazy[NewInstanceExprs[G]], i5: ClassTag[RuleEngineResult[T]]): TypedEncoder[RuleEngineResult[T]]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleEngineResultTypedEnc", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#ruleEngineResultTypedEnc[T,G<:shapeless.HList,H<:shapeless.HList](implicitevidence$1:frameless.TypedEncoder[T],impliciti0:shapeless.LabelledGeneric.Aux[com.sparkutils.quality.RuleEngineResult[T],G],impliciti1:frameless.DropUnitValues.Aux[G,H],impliciti2:shapeless.ops.hlist.IsHCons[H],impliciti3:shapeless.Lazy[frameless.RecordEncoderFields[H]],impliciti4:shapeless.Lazy[frameless.NewInstanceExprs[G]],impliciti5:scala.reflect.ClassTag[com.sparkutils.quality.RuleEngineResult[T]]):frameless.TypedEncoder[com.sparkutils.quality.RuleEngineResult[T]]", "kind" : "implicit def"}, {"label" : "ruleSuiteResultDetailsExpEnc", "tail" : ": Encoder[quality.RuleSuiteResultDetails]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleSuiteResultDetailsExpEnc", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#ruleSuiteResultDetailsExpEnc:org.apache.spark.sql.Encoder[com.sparkutils.quality.RuleSuiteResultDetails]", "kind" : "implicit val"}, {"label" : "ruleSuiteResultDetailsTypedEnc", "tail" : ": TypedEncoder[quality.RuleSuiteResultDetails]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleSuiteResultDetailsTypedEnc", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#ruleSuiteResultDetailsTypedEnc:frameless.TypedEncoder[com.sparkutils.quality.RuleSuiteResultDetails]", "kind" : "implicit val"}, {"label" : "ruleSuiteResultExpEnc", "tail" : ": Encoder[RuleSuiteResult]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleSuiteResultExpEnc", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#ruleSuiteResultExpEnc:org.apache.spark.sql.Encoder[com.sparkutils.quality.RuleSuiteResult]", "kind" : "implicit val"}, {"label" : "ruleSuiteResultTypedEnc", "tail" : ": TypedEncoder[RuleSuiteResult]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleSuiteResultTypedEnc", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#ruleSuiteResultTypedEnc:frameless.TypedEncoder[com.sparkutils.quality.RuleSuiteResult]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/Encoders$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.EncodersImplicits", "members_trait" : [{"label" : "ruleFolderResultExpEnc", "tail" : "(arg0: TypedEncoder[T]): Encoder[RuleFolderResult[T]]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleFolderResultExpEnc", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#ruleFolderResultExpEnc[T](implicitevidence$4:frameless.TypedEncoder[T]):org.apache.spark.sql.Encoder[com.sparkutils.quality.RuleFolderResult[T]]", "kind" : "implicit def"}, {"label" : "ruleFolderResultTypedEnc", "tail" : "(arg0: TypedEncoder[T], i0: Aux[RuleFolderResult[T], G], i1: Aux[G, H], i2: IsHCons[H], i3: Lazy[RecordEncoderFields[H]], i4: Lazy[NewInstanceExprs[G]], i5: ClassTag[RuleFolderResult[T]]): TypedEncoder[RuleFolderResult[T]]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleFolderResultTypedEnc", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#ruleFolderResultTypedEnc[T,G<:shapeless.HList,H<:shapeless.HList](implicitevidence$3:frameless.TypedEncoder[T],impliciti0:shapeless.LabelledGeneric.Aux[com.sparkutils.quality.RuleFolderResult[T],G],impliciti1:frameless.DropUnitValues.Aux[G,H],impliciti2:shapeless.ops.hlist.IsHCons[H],impliciti3:shapeless.Lazy[frameless.RecordEncoderFields[H]],impliciti4:shapeless.Lazy[frameless.NewInstanceExprs[G]],impliciti5:scala.reflect.ClassTag[com.sparkutils.quality.RuleFolderResult[T]]):frameless.TypedEncoder[com.sparkutils.quality.RuleFolderResult[T]]", "kind" : "implicit def"}, {"label" : "ruleEngineResultExpEnc", "tail" : "(arg0: TypedEncoder[T]): Encoder[RuleEngineResult[T]]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleEngineResultExpEnc", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#ruleEngineResultExpEnc[T](implicitevidence$2:frameless.TypedEncoder[T]):org.apache.spark.sql.Encoder[com.sparkutils.quality.RuleEngineResult[T]]", "kind" : "implicit def"}, {"label" : "ruleEngineResultTypedEnc", "tail" : "(arg0: TypedEncoder[T], i0: Aux[RuleEngineResult[T], G], i1: Aux[G, H], i2: IsHCons[H], i3: Lazy[RecordEncoderFields[H]], i4: Lazy[NewInstanceExprs[G]], i5: ClassTag[RuleEngineResult[T]]): TypedEncoder[RuleEngineResult[T]]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleEngineResultTypedEnc", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#ruleEngineResultTypedEnc[T,G<:shapeless.HList,H<:shapeless.HList](implicitevidence$1:frameless.TypedEncoder[T],impliciti0:shapeless.LabelledGeneric.Aux[com.sparkutils.quality.RuleEngineResult[T],G],impliciti1:frameless.DropUnitValues.Aux[G,H],impliciti2:shapeless.ops.hlist.IsHCons[H],impliciti3:shapeless.Lazy[frameless.RecordEncoderFields[H]],impliciti4:shapeless.Lazy[frameless.NewInstanceExprs[G]],impliciti5:scala.reflect.ClassTag[com.sparkutils.quality.RuleEngineResult[T]]):frameless.TypedEncoder[com.sparkutils.quality.RuleEngineResult[T]]", "kind" : "implicit def"}, {"label" : "ruleSuiteResultDetailsExpEnc", "tail" : ": Encoder[quality.RuleSuiteResultDetails]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleSuiteResultDetailsExpEnc", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#ruleSuiteResultDetailsExpEnc:org.apache.spark.sql.Encoder[com.sparkutils.quality.RuleSuiteResultDetails]", "kind" : "implicit val"}, {"label" : "ruleSuiteResultDetailsTypedEnc", "tail" : ": TypedEncoder[quality.RuleSuiteResultDetails]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleSuiteResultDetailsTypedEnc", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#ruleSuiteResultDetailsTypedEnc:frameless.TypedEncoder[com.sparkutils.quality.RuleSuiteResultDetails]", "kind" : "implicit val"}, {"label" : "ruleSuiteResultExpEnc", "tail" : ": Encoder[RuleSuiteResult]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleSuiteResultExpEnc", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#ruleSuiteResultExpEnc:org.apache.spark.sql.Encoder[com.sparkutils.quality.RuleSuiteResult]", "kind" : "implicit val"}, {"label" : "ruleSuiteResultTypedEnc", "tail" : ": TypedEncoder[RuleSuiteResult]", "member" : "com.sparkutils.quality.impl.EncodersImplicits.ruleSuiteResultTypedEnc", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#ruleSuiteResultTypedEnc:frameless.TypedEncoder[com.sparkutils.quality.RuleSuiteResult]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/EncodersImplicits.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.ExtraDocParameter", "shortDescription" : "", "members_case class" : [{"label" : "warning", "tail" : ": String", "member" : "com.sparkutils.quality.impl.ExtraDocParameter.warning", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#warning:String", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.ExtraDocParameter#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.impl.ExtraDocParameter.name", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#name:String", "kind" : "val"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.ExtraDocParameter.id", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxWarning.syntax", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.outputText", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#outputText:String", "kind" : "def"}, {"label" : "warningText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.warningText", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#warningText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/ExtraDocParameter.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.FlattenFolderResultsExpression", "shortDescription" : "NB this doesn't make much sense for folder unless in debug", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.FlattenFolderResultsExpression.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.FlattenFolderResultsExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.FlattenFolderResultsExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.FlattenFolderResultsExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "ruleProductType", "tail" : ": DataType", "member" : "com.sparkutils.quality.impl.FlattenFolderResultsExpression.ruleProductType", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#ruleProductType:org.apache.spark.sql.types.DataType", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.impl.FlattenFolderResultsExpression#<init>", "error" : "unsupported entity"}, {"label" : "deserializer", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.FlattenFolderResultsExpression.deserializer", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#deserializer:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.FlattenFolderResultsExpression.child", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/FlattenFolderResultsExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.FlattenResultsExpression", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.FlattenResultsExpression.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.FlattenResultsExpression.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.FlattenResultsExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.FlattenResultsExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(col: Any): Any", "member" : "com.sparkutils.quality.impl.FlattenResultsExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#nullSafeEval(col:Any):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.FlattenResultsExpression#<init>", "error" : "unsupported entity"}, {"label" : "deserializer", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.FlattenResultsExpression.deserializer", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#deserializer:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.FlattenResultsExpression.child", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/FlattenResultsExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.FlattenRulesResultsExpression", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.FlattenRulesResultsExpression.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.FlattenRulesResultsExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.FlattenRulesResultsExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.FlattenRulesResultsExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "ruleProductType", "tail" : ": DataType", "member" : "com.sparkutils.quality.impl.FlattenRulesResultsExpression.ruleProductType", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#ruleProductType:org.apache.spark.sql.types.DataType", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.impl.FlattenRulesResultsExpression#<init>", "error" : "unsupported entity"}, {"label" : "deserializer", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.FlattenRulesResultsExpression.deserializer", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#deserializer:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.FlattenRulesResultsExpression.child", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.codegen.CodegenFallback.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/FlattenRulesResultsExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.FlattenStruct", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html", "members_object" : [{"label" : "ruleSuiteDeserializer", "tail" : "(): Expression", "member" : "com.sparkutils.quality.impl.FlattenStruct.ruleSuiteDeserializer", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#ruleSuiteDeserializer:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : ": StructType", "member" : "com.sparkutils.quality.impl.FlattenStruct.dataType", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#dataType:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/FlattenStruct$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.HasId", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/HasId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "id", "tail" : "(): Id", "member" : "com.sparkutils.quality.impl.HasId.id", "link" : "com\/sparkutils\/quality\/impl\/HasId.html#id:com.sparkutils.quality.Id", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/HasId.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.HasNonIdText", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.HasNonIdText.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html#nonIdText:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/HasNonIdText.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.HasOutputText", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.HasOutputText.outputText", "link" : "com\/sparkutils\/quality\/impl\/HasOutputText.html#outputText:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/HasOutputText.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.HigherOrderFunctionLike", "members_trait" : [{"label" : "bind", "tail" : "(f: (Expression, Seq[(DataType, Boolean)]) ⇒ org.apache.spark.sql.catalyst.expressions.LambdaFunction): HigherOrderFunction", "member" : "com.sparkutils.quality.impl.HigherOrderFunctionLike.bind", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#bind(f:(org.apache.spark.sql.catalyst.expressions.Expression,Seq[(org.apache.spark.sql.types.DataType,Boolean)])=>org.apache.spark.sql.catalyst.expressions.LambdaFunction):org.apache.spark.sql.catalyst.expressions.HigherOrderFunction", "kind" : "def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "functionsForEval", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.functionsForEval", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#functionsForEval:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.resolved", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkArgumentDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.checkArgumentDataTypes", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#checkArgumentDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "argumentsResolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.argumentsResolved", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#argumentsResolved:Boolean", "kind" : "lazy val"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "final val"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.nullable", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#nullable:Boolean", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "bindInternal", "tail" : "(f: (Expression, Seq[(DataType, Boolean)]) ⇒ org.apache.spark.sql.catalyst.expressions.LambdaFunction): HigherOrderFunction", "member" : "com.sparkutils.quality.impl.HigherOrderFunctionLike.bindInternal", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#bindInternal(f:(org.apache.spark.sql.catalyst.expressions.Expression,Seq[(org.apache.spark.sql.types.DataType,Boolean)])=>org.apache.spark.sql.catalyst.expressions.LambdaFunction):org.apache.spark.sql.catalyst.expressions.HigherOrderFunction", "kind" : "abstract def"}, {"label" : "functionTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.functionTypes", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#functionTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "abstract def"}, {"label" : "functions", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.functions", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#functions:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "abstract def"}, {"label" : "argumentTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.argumentTypes", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#argumentTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "abstract def"}, {"label" : "arguments", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.expressions.HigherOrderFunction.arguments", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#arguments:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "abstract def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.dataType", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "abstract def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.eval", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/HigherOrderFunctionLike.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.IdEncoders", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html", "members_object" : [{"label" : "versionedIdTo", "tail" : ": Injection[VersionedId, Long]", "member" : "com.sparkutils.quality.impl.IdEncodersImplicits.versionedIdTo", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#versionedIdTo:frameless.Injection[com.sparkutils.quality.VersionedId,Long]", "kind" : "implicit val"}, {"label" : "versionedIdNotNullable", "tail" : ": NotCatalystNullable[VersionedId]", "member" : "com.sparkutils.quality.impl.IdEncodersImplicits.versionedIdNotNullable", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#versionedIdNotNullable:frameless.NotCatalystNullable[com.sparkutils.quality.VersionedId]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/IdEncoders$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.IdEncodersImplicits", "members_trait" : [{"label" : "versionedIdTo", "tail" : ": Injection[VersionedId, Long]", "member" : "com.sparkutils.quality.impl.IdEncodersImplicits.versionedIdTo", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#versionedIdTo:frameless.Injection[com.sparkutils.quality.VersionedId,Long]", "kind" : "implicit val"}, {"label" : "versionedIdNotNullable", "tail" : ": NotCatalystNullable[VersionedId]", "member" : "com.sparkutils.quality.impl.IdEncodersImplicits.versionedIdNotNullable", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#versionedIdNotNullable:frameless.NotCatalystNullable[com.sparkutils.quality.VersionedId]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/IdEncodersImplicits.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.IntEncoders", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html", "members_object" : [{"label" : "ruleResultToInt", "tail" : ": Injection[RuleResult, Int]", "member" : "com.sparkutils.quality.impl.IntEncodersImplicits.ruleResultToInt", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#ruleResultToInt:frameless.Injection[com.sparkutils.quality.RuleResult,Int]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/IntEncoders$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.IntEncodersImplicits", "members_trait" : [{"label" : "ruleResultToInt", "tail" : ": Injection[RuleResult, Int]", "member" : "com.sparkutils.quality.impl.IntEncodersImplicits.ruleResultToInt", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#ruleResultToInt:frameless.Injection[com.sparkutils.quality.RuleResult,Int]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/IntEncodersImplicits.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.LambdaMultipleImplementationWithSameArityError", "shortDescription" : "", "members_case class" : [{"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.LambdaMultipleImplementationWithSameArityError.id", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "error", "tail" : ": String", "member" : "com.sparkutils.quality.impl.LambdaMultipleImplementationWithSameArityError.error", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#error:String", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.LambdaMultipleImplementationWithSameArityError#<init>", "error" : "unsupported entity"}, {"label" : "ids", "tail" : ": Set[Id]", "member" : "com.sparkutils.quality.impl.LambdaMultipleImplementationWithSameArityError.ids", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#ids:Set[com.sparkutils.quality.Id]", "kind" : "val"}, {"label" : "argLength", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.LambdaMultipleImplementationWithSameArityError.argLength", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#argLength:Int", "kind" : "val"}, {"label" : "count", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.LambdaMultipleImplementationWithSameArityError.count", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#count:Int", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.impl.LambdaMultipleImplementationWithSameArityError.name", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#name:String", "kind" : "val"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxError.syntax", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#errorText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/LambdaMultipleImplementationWithSameArityError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.LambdaNameError", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.LambdaNameError#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.LambdaNameError.id", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.impl.LambdaNameError.name", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#name:String", "kind" : "val"}, {"label" : "error", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.NameMissingError.error", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#error:String", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#errorText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleError.syntax", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/LambdaNameError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.LambdaPossibleSOE", "shortDescription" : "", "members_case class" : [{"label" : "warning", "tail" : ": String", "member" : "com.sparkutils.quality.impl.LambdaPossibleSOE.warning", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#warning:String", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.LambdaPossibleSOE#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.LambdaPossibleSOE.id", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.outputText", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#outputText:String", "kind" : "def"}, {"label" : "warningText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.warningText", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#warningText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleWarning.syntax", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/LambdaPossibleSOE.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.LambdaRelevant", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/LambdaRelevant.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.LambdaSparkFunctionNameError", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.LambdaSparkFunctionNameError#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.LambdaSparkFunctionNameError.id", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.impl.LambdaSparkFunctionNameError.name", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#name:String", "kind" : "val"}, {"label" : "error", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.NameMissingError.error", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#error:String", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#errorText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleError.syntax", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/LambdaSparkFunctionNameError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.LambdaStackOverflowError", "shortDescription" : "", "members_case class" : [{"label" : "error", "tail" : ": String", "member" : "com.sparkutils.quality.impl.LambdaStackOverflowError.error", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#error:String", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.LambdaStackOverflowError#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.LambdaStackOverflowError.id", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxError.syntax", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#errorText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/LambdaStackOverflowError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.LambdaSyntaxError", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.LambdaSyntaxError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.sparkutils.quality.impl.LambdaSyntaxError.error", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#error:String", "kind" : "val"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.LambdaSyntaxError.id", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxError.syntax", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#errorText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/LambdaSyntaxError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.MapUtils", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/MapUtils$.html", "members_object" : [{"label" : "toScalaMap", "tail" : "(map: MapData, keyType: DataType, valueType: DataType): Map[Any, Any]", "member" : "com.sparkutils.quality.impl.MapUtils.toScalaMap", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#toScalaMap(map:org.apache.spark.sql.catalyst.util.MapData,keyType:org.apache.spark.sql.types.DataType,valueType:org.apache.spark.sql.types.DataType):Map[Any,Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/MapUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.NameMissingError", "members_trait" : [{"label" : "error", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.NameMissingError.error", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#error:String", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#errorText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleError.syntax", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.NameMissingError.name", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#name:String", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): Id", "member" : "com.sparkutils.quality.impl.HasId.id", "link" : "com\/sparkutils\/quality\/impl\/NameMissingError.html#id:com.sparkutils.quality.Id", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/NameMissingError.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.NonLambdaDocParameters", "shortDescription" : "", "members_case class" : [{"label" : "warning", "tail" : ": String", "member" : "com.sparkutils.quality.impl.NonLambdaDocParameters.warning", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#warning:String", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.NonLambdaDocParameters#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.NonLambdaDocParameters.id", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxWarning.syntax", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.outputText", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#outputText:String", "kind" : "def"}, {"label" : "warningText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.warningText", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#warningText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/NonLambdaDocParameters.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.OuputSparkFunctionNameError", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.OuputSparkFunctionNameError#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.OuputSparkFunctionNameError.id", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.impl.OuputSparkFunctionNameError.name", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#name:String", "kind" : "val"}, {"label" : "error", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.NameMissingError.error", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#error:String", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#errorText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleError.syntax", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/OuputSparkFunctionNameError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.OutputExpressionRelevant", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/OutputExpressionRelevant.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.OutputRuleNameError", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.OutputRuleNameError#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.OutputRuleNameError.id", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.impl.OutputRuleNameError.name", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#name:String", "kind" : "val"}, {"label" : "error", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.NameMissingError.error", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#error:String", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#errorText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleError.syntax", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/OutputRuleNameError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.OutputRuleSyntaxError", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.OutputRuleSyntaxError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.sparkutils.quality.impl.OutputRuleSyntaxError.error", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#error:String", "kind" : "val"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.OutputRuleSyntaxError.id", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxError.syntax", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#errorText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/OutputRuleSyntaxError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.OverallResult", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/OverallResult$.html", "members_object" : [{"label" : "inplaceInt", "tail" : "(ruleResult: Int, currentResult: Int, probablePass: Double): Int", "member" : "com.sparkutils.quality.impl.OverallResult.inplaceInt", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#inplaceInt(ruleResult:Int,currentResult:Int,probablePass:Double):Int", "kind" : "def"}, {"label" : "inplace", "tail" : "(ruleResult: RuleResult, currentResult: RuleResult, probablePass: Double): RuleResult", "member" : "com.sparkutils.quality.impl.OverallResult.inplace", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#inplace(ruleResult:com.sparkutils.quality.RuleResult,currentResult:com.sparkutils.quality.RuleResult,probablePass:Double):com.sparkutils.quality.RuleResult", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/OverallResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.Pack", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/Pack$.html", "members_object" : [{"label" : "apply", "tail" : "(id: Expression, version: Expression): PackExpression", "member" : "com.sparkutils.quality.impl.Pack.apply", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#apply(id:org.apache.spark.sql.catalyst.expressions.Expression,version:org.apache.spark.sql.catalyst.expressions.Expression):com.sparkutils.quality.impl.PackExpression", "kind" : "def"}, {"label" : "apply", "tail" : "(id: Column, version: Column): Column", "member" : "com.sparkutils.quality.impl.Pack.apply", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#apply(id:org.apache.spark.sql.Column,version:org.apache.spark.sql.Column):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/Pack$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.PackExpression", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newLeft: Expression, newRight: Expression): Expression", "member" : "com.sparkutils.quality.impl.PackExpression.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#withNewChildrenInternal(newLeft:org.apache.spark.sql.catalyst.expressions.Expression,newRight:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.PackExpression.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.PackExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.PackExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.PackExpression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(id: Any, version: Any): Any", "member" : "com.sparkutils.quality.impl.PackExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#nullSafeEval(id:Any,version:Any):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.PackExpression#<init>", "error" : "unsupported entity"}, {"label" : "right", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.PackExpression.right", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#right:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "left", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.PackExpression.left", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#left:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/PackExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/PackExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.PackId", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/PackId$.html", "members_object" : [{"label" : "unpack", "tail" : "(a: Long): Id", "member" : "com.sparkutils.quality.impl.PackId.unpack", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#unpack(a:Long):com.sparkutils.quality.Id", "kind" : "def"}, {"label" : "unpack", "tail" : "(a: Any): Id", "member" : "com.sparkutils.quality.impl.PackId.unpack", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#unpack(a:Any):com.sparkutils.quality.Id", "kind" : "def"}, {"label" : "packId", "tail" : "(anyId: Any): Long", "member" : "com.sparkutils.quality.impl.PackId.packId", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#packId(anyId:Any):Long", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/PackId$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.ProbabilityExpr", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.ProbabilityExpr.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.ProbabilityExpr.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.ProbabilityExpr.dataType", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.ProbabilityExpr.nullable", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#nullable:Boolean", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.ProbabilityExpr.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(res: Any): Any", "member" : "com.sparkutils.quality.impl.ProbabilityExpr.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#nullSafeEval(res:Any):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.ProbabilityExpr#<init>", "error" : "unsupported entity"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.ProbabilityExpr.child", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/ProbabilityExpr.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.ProcessDisableIfMissingImports", "members_trait" : [{"label" : "processCoalesceIfAttributeMissing", "tail" : "(rule: Rule, names: Set[String]): Rule", "member" : "com.sparkutils.quality.impl.ProcessDisableIfMissingImports.processCoalesceIfAttributeMissing", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#processCoalesceIfAttributeMissing(rule:com.sparkutils.quality.Rule,names:Set[String]):com.sparkutils.quality.Rule", "kind" : "def"}, {"label" : "processCoalesceIfAttributeMissing", "tail" : "(expressions: Seq[Expression], names: Set[String], isDisabled: Boolean): Expression", "member" : "com.sparkutils.quality.impl.ProcessDisableIfMissingImports.processCoalesceIfAttributeMissing", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#processCoalesceIfAttributeMissing(expressions:Seq[org.apache.spark.sql.catalyst.expressions.Expression],names:Set[String],isDisabled:Boolean):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "processCoalesceIfAttributeMissing", "tail" : "(expression: Expression, names: Set[String]): Expression", "member" : "com.sparkutils.quality.impl.ProcessDisableIfMissingImports.processCoalesceIfAttributeMissing", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#processCoalesceIfAttributeMissing(expression:org.apache.spark.sql.catalyst.expressions.Expression,names:Set[String]):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "isCoalesceDisabled", "tail" : "(unresolvedFunction: UnresolvedFunction): Boolean", "member" : "com.sparkutils.quality.impl.ProcessDisableIfMissingImports.isCoalesceDisabled", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#isCoalesceDisabled(unresolvedFunction:org.apache.spark.sql.catalyst.analysis.UnresolvedFunction):Boolean", "kind" : "def"}, {"label" : "isReplaceCoalesceName", "tail" : "(unresolvedFunction: UnresolvedFunction): Boolean", "member" : "com.sparkutils.quality.impl.ProcessDisableIfMissingImports.isReplaceCoalesceName", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#isReplaceCoalesceName(unresolvedFunction:org.apache.spark.sql.catalyst.analysis.UnresolvedFunction):Boolean", "kind" : "def"}, {"label" : "processIfMissingLambdaCoalesce", "tail" : "(rule: LambdaFunctionParsed, names: Set[String]): LambdaFunction", "member" : "com.sparkutils.quality.impl.ProcessDisableIfMissingImports.processIfMissingLambdaCoalesce", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#processIfMissingLambdaCoalesce(rule:com.sparkutils.quality.LambdaFunctionParsed,names:Set[String]):com.sparkutils.quality.LambdaFunction", "kind" : "def"}, {"label" : "processIfAttributeMissing", "tail" : "(ruleSuite: RuleSuite, schema: StructType): RuleSuite", "member" : "com.sparkutils.quality.impl.ProcessDisableIfMissingImports.processIfAttributeMissing", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#processIfAttributeMissing(ruleSuite:com.sparkutils.quality.RuleSuite,schema:org.apache.spark.sql.types.StructType):com.sparkutils.quality.RuleSuite", "kind" : "def"}, {"label" : "FailedExpr", "tail" : ": Literal", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.FailedExpr", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#FailedExpr:org.apache.spark.sql.catalyst.expressions.Literal", "kind" : "val"}, {"label" : "FailedInt", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.FailedInt", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#FailedInt:Int", "kind" : "val"}, {"label" : "PassedExpr", "tail" : ": Literal", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.PassedExpr", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#PassedExpr:org.apache.spark.sql.catalyst.expressions.Literal", "kind" : "val"}, {"label" : "PassedInt", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.PassedInt", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#PassedInt:Int", "kind" : "val"}, {"label" : "DisabledRuleExpr", "tail" : ": Literal", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.DisabledRuleExpr", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#DisabledRuleExpr:org.apache.spark.sql.catalyst.expressions.Literal", "kind" : "val"}, {"label" : "DisabledRuleInt", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.DisabledRuleInt", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#DisabledRuleInt:Int", "kind" : "val"}, {"label" : "SoftFailedExpr", "tail" : ": Literal", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.SoftFailedExpr", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#SoftFailedExpr:org.apache.spark.sql.catalyst.expressions.Literal", "kind" : "val"}, {"label" : "SoftFailedInt", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.SoftFailedInt", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#SoftFailedInt:Int", "kind" : "val"}, {"label" : "unpackId", "tail" : ": (Long) ⇒ Id", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.unpackId", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#unpackId:Long=>com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "packId", "tail" : ": (Any) ⇒ Long", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.packId", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#packId:Any=>Long", "kind" : "val"}, {"label" : "strLitA", "tail" : ": (Any) ⇒ UTF8String", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.strLitA", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#strLitA:Any=>org.apache.spark.unsafe.types.UTF8String", "kind" : "val"}, {"label" : "strLit", "tail" : "(str: String): UTF8String", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.strLit", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#strLit(str:String):org.apache.spark.unsafe.types.UTF8String", "kind" : "def"}, {"label" : "ruleRunner", "tail" : "(ruleSuite: RuleSuite, compileEvals: Boolean, resolveWith: Option[DataFrame], variablesPerFunc: Int, variableFuncGroup: Int, forceRunnerEval: Boolean): Column", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.ruleRunner", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#ruleRunner(ruleSuite:com.sparkutils.quality.RuleSuite,compileEvals:Boolean,resolveWith:Option[org.apache.spark.sql.DataFrame],variablesPerFunc:Int,variableFuncGroup:Int,forceRunnerEval:Boolean):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/ProcessDisableIfMissingImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.RngUUIDExpression", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html", "members_object" : [{"label" : "getNextUUIDString", "tail" : "(most: Long, least: Long): UTF8String", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.getNextUUIDString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#getNextUUIDString(most:Long,least:Long):org.apache.spark.unsafe.types.UTF8String", "kind" : "def"}, {"label" : "getNextUUIDString", "tail" : "(bytes: Array[Byte]): UTF8String", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.getNextUUIDString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#getNextUUIDString(bytes:Array[Byte]):org.apache.spark.unsafe.types.UTF8String", "kind" : "def"}, {"label" : "getNextUUID", "tail" : "(most: Long, least: Long): UUID", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.getNextUUID", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#getNextUUID(most:Long,least:Long):java.util.UUID", "kind" : "def"}, {"label" : "getLongs", "tail" : "(b: Array[Byte]): (Long, Long)", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.getLongs", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#getLongs(b:Array[Byte]):(Long,Long)", "kind" : "def"}, {"label" : "struct", "tail" : "(input: Any): UTF8String", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.struct", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#struct(input:Any):org.apache.spark.unsafe.types.UTF8String", "kind" : "def"}, {"label" : "binary", "tail" : "(input: Any): UTF8String", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.binary", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#binary(input:Any):org.apache.spark.unsafe.types.UTF8String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "evalF", "tail" : ": (Any) ⇒ UTF8String", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.evalF", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#evalF:Any=>org.apache.spark.unsafe.types.UTF8String", "kind" : "lazy val"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.RngUUIDExpression#<init>", "error" : "unsupported entity"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.RngUUIDExpression.child", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/RngUUIDExpression.html", "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.RuleEngineRunner", "shortDescription" : "Children will be rewritten by the plan, it's then re-incorporated into ruleSuiteexpressionOffsets.length is the length of the trigger expressions in realChildren, realChildren(expressionOffsets.length + expressionOffsets(x)) will be the correct OutputExpression", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.dataType", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.eval", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "reincorporated", "tail" : ": RuleSuite", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.reincorporated", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#reincorporated:com.sparkutils.quality.RuleSuite", "kind" : "lazy val"}, {"label" : "toString", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#toString():String", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.nullable", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#nullable:Boolean", "kind" : "def"}, {"label" : "compiledRealChildren", "tail" : ": Array[ExpressionWrapper]", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.compiledRealChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#compiledRealChildren:Array[com.sparkutils.quality.ExpressionWrapper]", "kind" : "lazy val"}, {"label" : "realChildren", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.realChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#realChildren:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.impl.RuleEngineRunner#<init>", "error" : "unsupported entity"}, {"label" : "forceTriggerEval", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.forceTriggerEval", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#forceTriggerEval:Boolean", "kind" : "val"}, {"label" : "expressionOffsets", "tail" : ": Array[Int]", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.expressionOffsets", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#expressionOffsets:Array[Int]", "kind" : "val"}, {"label" : "forceRunnerEval", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.forceRunnerEval", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#forceRunnerEval:Boolean", "kind" : "val"}, {"label" : "variableFuncGroup", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.variableFuncGroup", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#variableFuncGroup:Int", "kind" : "val"}, {"label" : "variablesPerFunc", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.variablesPerFunc", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#variablesPerFunc:Int", "kind" : "val"}, {"label" : "debugMode", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.debugMode", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#debugMode:Boolean", "kind" : "val"}, {"label" : "compileEvals", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.compileEvals", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#compileEvals:Boolean", "kind" : "val"}, {"label" : "resultDataType", "tail" : ": DataType", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.resultDataType", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#resultDataType:org.apache.spark.sql.types.DataType", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.child", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "ruleSuite", "tail" : ": RuleSuite", "member" : "com.sparkutils.quality.impl.RuleEngineRunner.ruleSuite", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#ruleSuite:com.sparkutils.quality.RuleSuite", "kind" : "val"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.NonSQLExpression.sql", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#sql:String", "kind" : "final def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/RuleEngineRunner.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.RuleEngineRunnerImports", "members_trait" : [{"label" : "ruleEngineRunner", "tail" : "(ruleSuite: RuleSuite, resultDataType: DataType, compileEvals: Boolean, debugMode: Boolean, resolveWith: Option[DataFrame], variablesPerFunc: Int, variableFuncGroup: Int, forceRunnerEval: Boolean, forceTriggerEval: Boolean): Column", "member" : "com.sparkutils.quality.impl.RuleEngineRunnerImports.ruleEngineRunner", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#ruleEngineRunner(ruleSuite:com.sparkutils.quality.RuleSuite,resultDataType:org.apache.spark.sql.types.DataType,compileEvals:Boolean,debugMode:Boolean,resolveWith:Option[org.apache.spark.sql.DataFrame],variablesPerFunc:Int,variableFuncGroup:Int,forceRunnerEval:Boolean,forceTriggerEval:Boolean):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/RuleEngineRunnerImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.RuleError", "members_trait" : [{"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#errorText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleError.syntax", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "error", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.error", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#error:String", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): Id", "member" : "com.sparkutils.quality.impl.HasId.id", "link" : "com\/sparkutils\/quality\/impl\/RuleError.html#id:com.sparkutils.quality.Id", "kind" : "abstract def"}], "shortDescription" : "Base for RuleErrors", "trait" : "com\/sparkutils\/quality\/impl\/RuleError.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.RuleFolderRunner", "shortDescription" : "Children will be rewritten by the plan, it's then re-incorporated into ruleSuiteexpressionOffsets.length is the length of the trigger expressions in realChildren, realChildren(expressionOffsets.length + expressionOffsets(x)) will be the correct OutputExpression", "members_case class" : [{"label" : "withNewChildrenInternal", "tail" : "(newLeft: Expression, newRight: Expression): Expression", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#withNewChildrenInternal(newLeft:org.apache.spark.sql.catalyst.expressions.Expression,newRight:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.dataType", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.eval", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "reincorporated", "tail" : ": RuleSuite", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.reincorporated", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#reincorporated:com.sparkutils.quality.RuleSuite", "kind" : "lazy val"}, {"label" : "toString", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#toString():String", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.nullable", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#nullable:Boolean", "kind" : "def"}, {"label" : "compiledRealChildren", "tail" : ": Array[ExpressionWrapper]", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.compiledRealChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#compiledRealChildren:Array[com.sparkutils.quality.ExpressionWrapper]", "kind" : "lazy val"}, {"label" : "realChildren", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.realChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#realChildren:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"label" : "startingStruct", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.startingStruct", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#startingStruct:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"member" : "com.sparkutils.quality.impl.RuleFolderRunner#<init>", "error" : "unsupported entity"}, {"label" : "forceTriggerEval", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.forceTriggerEval", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#forceTriggerEval:Boolean", "kind" : "val"}, {"label" : "dataRef", "tail" : ": AtomicReference[DataType]", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.dataRef", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#dataRef:java.util.concurrent.atomic.AtomicReference[org.apache.spark.sql.types.DataType]", "kind" : "val"}, {"label" : "expressionOffsets", "tail" : ": Array[Int]", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.expressionOffsets", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#expressionOffsets:Array[Int]", "kind" : "val"}, {"label" : "forceRunnerEval", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.forceRunnerEval", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#forceRunnerEval:Boolean", "kind" : "val"}, {"label" : "variableFuncGroup", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.variableFuncGroup", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#variableFuncGroup:Int", "kind" : "val"}, {"label" : "variablesPerFunc", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.variablesPerFunc", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#variablesPerFunc:Int", "kind" : "val"}, {"label" : "debugMode", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.debugMode", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#debugMode:Boolean", "kind" : "val"}, {"label" : "compileEvals", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.compileEvals", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#compileEvals:Boolean", "kind" : "val"}, {"label" : "resultDataType", "tail" : ": () ⇒ DataType", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.resultDataType", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#resultDataType:()=>org.apache.spark.sql.types.DataType", "kind" : "val"}, {"label" : "right", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.right", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#right:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "left", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.left", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#left:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "ruleSuite", "tail" : ": RuleSuite", "member" : "com.sparkutils.quality.impl.RuleFolderRunner.ruleSuite", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#ruleSuite:com.sparkutils.quality.RuleSuite", "kind" : "val"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.NonSQLExpression.sql", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#sql:String", "kind" : "final def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String, String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:(String,String)=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input1: Any, input2: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#nullSafeEval(input1:Any,input2:Any):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.BinaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.BinaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/RuleFolderRunner.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.RuleFolderRunnerImports", "members_trait" : [{"label" : "ruleFolderRunner", "tail" : "(ruleSuite: RuleSuite, startingStruct: Column, compileEvals: Boolean, debugMode: Boolean, resolveWith: Option[DataFrame], variablesPerFunc: Int, variableFuncGroup: Int, forceRunnerEval: Boolean, useType: Option[StructType], forceTriggerEval: Boolean): Column", "member" : "com.sparkutils.quality.impl.RuleFolderRunnerImports.ruleFolderRunner", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#ruleFolderRunner(ruleSuite:com.sparkutils.quality.RuleSuite,startingStruct:org.apache.spark.sql.Column,compileEvals:Boolean,debugMode:Boolean,resolveWith:Option[org.apache.spark.sql.DataFrame],variablesPerFunc:Int,variableFuncGroup:Int,forceRunnerEval:Boolean,useType:Option[org.apache.spark.sql.types.StructType],forceTriggerEval:Boolean):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/RuleFolderRunnerImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.RuleNameError", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.RuleNameError#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.RuleNameError.id", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.impl.RuleNameError.name", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#name:String", "kind" : "val"}, {"label" : "error", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.NameMissingError.error", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#error:String", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#errorText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleError.syntax", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleNameError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/RuleNameError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.RuleRelevant", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/RuleRelevant.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.RuleRunner", "shortDescription" : "Children will be rewritten by the plan, either by resolveWith, it's then re-incorporated into ruleSuite", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.RuleRunner.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.RuleRunner.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.RuleRunner.dataType", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "com.sparkutils.quality.impl.RuleRunner.eval", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "reincorporated", "tail" : ": RuleSuite", "member" : "com.sparkutils.quality.impl.RuleRunner.reincorporated", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#reincorporated:com.sparkutils.quality.RuleSuite", "kind" : "lazy val"}, {"label" : "toString", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleRunner.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#toString():String", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleRunner.nullable", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#nullable:Boolean", "kind" : "def"}, {"label" : "realChildren", "tail" : ": Seq[Expression]", "member" : "com.sparkutils.quality.impl.RuleRunner.realChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#realChildren:Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "lazy val"}, {"member" : "com.sparkutils.quality.impl.RuleRunner#<init>", "error" : "unsupported entity"}, {"label" : "forceRunnerEval", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleRunner.forceRunnerEval", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#forceRunnerEval:Boolean", "kind" : "val"}, {"label" : "variableFuncGroup", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunner.variableFuncGroup", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#variableFuncGroup:Int", "kind" : "val"}, {"label" : "variablesPerFunc", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunner.variablesPerFunc", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#variablesPerFunc:Int", "kind" : "val"}, {"label" : "compileEvals", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.RuleRunner.compileEvals", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#compileEvals:Boolean", "kind" : "val"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.RuleRunner.child", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "ruleSuite", "tail" : ": RuleSuite", "member" : "com.sparkutils.quality.impl.RuleRunner.ruleSuite", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#ruleSuite:com.sparkutils.quality.RuleSuite", "kind" : "val"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.NonSQLExpression.sql", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#sql:String", "kind" : "final def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRunner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/RuleRunner.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.RuleRunnerFunctions", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html", "members_object" : [{"label" : "qualityFunctions", "tail" : ": Set[String]", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctions.qualityFunctions", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#qualityFunctions:scala.collection.immutable.Set[String]", "kind" : "val"}, {"label" : "flattenExpressions", "tail" : "(ruleSuite: RuleSuite): Seq[Expression]", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctions.flattenExpressions", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#flattenExpressions(ruleSuite:com.sparkutils.quality.RuleSuite):Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "getString", "tail" : "(exp: Expression): String", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctions.getString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#getString(exp:org.apache.spark.sql.catalyst.expressions.Expression):String", "kind" : "def"}, {"label" : "getLong", "tail" : "(exp: Expression): Long", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctions.getLong", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#getLong(exp:org.apache.spark.sql.catalyst.expressions.Expression):Long", "kind" : "def"}, {"label" : "literalsNeeded", "tail" : "(): Nothing", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctions.literalsNeeded", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#literalsNeeded:Nothing", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.RuleRunnerFunctionsImport", "members_trait" : [{"label" : "registerQualityFunctions", "tail" : "(parseTypes: (String) ⇒ Option[DataType], zero: (DataType) ⇒ Option[Any], add: (DataType) ⇒ Option[(Expression, Expression) ⇒ Expression], mapCompare: (DataType) ⇒ Option[(Any, Any) ⇒ Int], writer: (String) ⇒ Unit): Unit", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctionsImport.registerQualityFunctions", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#registerQualityFunctions(parseTypes:String=>Option[org.apache.spark.sql.types.DataType],zero:org.apache.spark.sql.types.DataType=>Option[Any],add:org.apache.spark.sql.types.DataType=>Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression],mapCompare:org.apache.spark.sql.types.DataType=>Option[(Any,Any)=>Int],writer:String=>Unit):Unit", "kind" : "def"}, {"label" : "INC_REWRITE_GENEXP_ERR_MSG", "tail" : ": String", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctionsImport.INC_REWRITE_GENEXP_ERR_MSG", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#INC_REWRITE_GENEXP_ERR_MSG:String", "kind" : "val"}, {"label" : "defaultParseTypes", "tail" : "(string: String): Option[DataType]", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctionsImport.defaultParseTypes", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#defaultParseTypes(string:String):Option[org.apache.spark.sql.types.DataType]", "kind" : "def"}, {"label" : "defaultZero", "tail" : "(dataType: DataType): Option[Any]", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctionsImport.defaultZero", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#defaultZero(dataType:org.apache.spark.sql.types.DataType):Option[Any]", "kind" : "def"}, {"label" : "defaultAdd", "tail" : "(dataType: DataType, extension: (DataType) ⇒ Option[(Expression, Expression) ⇒ Expression]): Option[(Expression, Expression) ⇒ Expression]", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctionsImport.defaultAdd", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#defaultAdd(dataType:org.apache.spark.sql.types.DataType,extension:org.apache.spark.sql.types.DataType=>Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression]):Option[(org.apache.spark.sql.catalyst.expressions.Expression,org.apache.spark.sql.catalyst.expressions.Expression)=>org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "maxDec", "tail" : ": DecimalType", "member" : "com.sparkutils.quality.impl.RuleRunnerFunctionsImport.maxDec", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#maxDec:org.apache.spark.sql.types.DecimalType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/RuleRunnerFunctionsImport.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.RuleRunnerImports", "members_trait" : [{"label" : "FailedExpr", "tail" : ": Literal", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.FailedExpr", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#FailedExpr:org.apache.spark.sql.catalyst.expressions.Literal", "kind" : "val"}, {"label" : "FailedInt", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.FailedInt", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#FailedInt:Int", "kind" : "val"}, {"label" : "PassedExpr", "tail" : ": Literal", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.PassedExpr", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#PassedExpr:org.apache.spark.sql.catalyst.expressions.Literal", "kind" : "val"}, {"label" : "PassedInt", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.PassedInt", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#PassedInt:Int", "kind" : "val"}, {"label" : "DisabledRuleExpr", "tail" : ": Literal", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.DisabledRuleExpr", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#DisabledRuleExpr:org.apache.spark.sql.catalyst.expressions.Literal", "kind" : "val"}, {"label" : "DisabledRuleInt", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.DisabledRuleInt", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#DisabledRuleInt:Int", "kind" : "val"}, {"label" : "SoftFailedExpr", "tail" : ": Literal", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.SoftFailedExpr", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#SoftFailedExpr:org.apache.spark.sql.catalyst.expressions.Literal", "kind" : "val"}, {"label" : "SoftFailedInt", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.SoftFailedInt", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#SoftFailedInt:Int", "kind" : "val"}, {"label" : "unpackId", "tail" : ": (Long) ⇒ Id", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.unpackId", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#unpackId:Long=>com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "packId", "tail" : ": (Any) ⇒ Long", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.packId", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#packId:Any=>Long", "kind" : "val"}, {"label" : "strLitA", "tail" : ": (Any) ⇒ UTF8String", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.strLitA", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#strLitA:Any=>org.apache.spark.unsafe.types.UTF8String", "kind" : "val"}, {"label" : "strLit", "tail" : "(str: String): UTF8String", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.strLit", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#strLit(str:String):org.apache.spark.unsafe.types.UTF8String", "kind" : "def"}, {"label" : "ruleRunner", "tail" : "(ruleSuite: RuleSuite, compileEvals: Boolean, resolveWith: Option[DataFrame], variablesPerFunc: Int, variableFuncGroup: Int, forceRunnerEval: Boolean): Column", "member" : "com.sparkutils.quality.impl.RuleRunnerImports.ruleRunner", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#ruleRunner(ruleSuite:com.sparkutils.quality.RuleSuite,compileEvals:Boolean,resolveWith:Option[org.apache.spark.sql.DataFrame],variablesPerFunc:Int,variableFuncGroup:Int,forceRunnerEval:Boolean):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/RuleRunnerImports.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.RuleSparkTypes", "members_trait" : [{"label" : "ruleSuiteDetailsResultType", "tail" : ": StructType", "member" : "com.sparkutils.quality.impl.RuleSparkTypes.ruleSuiteDetailsResultType", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#ruleSuiteDetailsResultType:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "fullRuleIdType", "tail" : ": StructType", "member" : "com.sparkutils.quality.impl.RuleSparkTypes.fullRuleIdType", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#fullRuleIdType:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "ruleSuiteResultType", "tail" : ": StructType", "member" : "com.sparkutils.quality.impl.RuleSparkTypes.ruleSuiteResultType", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#ruleSuiteResultType:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "ruleSetsType", "tail" : ": StructField", "member" : "com.sparkutils.quality.impl.RuleSparkTypes.ruleSetsType", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#ruleSetsType:org.apache.spark.sql.types.StructField", "kind" : "val"}, {"label" : "ruleSetResultsType", "tail" : ": MapType", "member" : "com.sparkutils.quality.impl.RuleSparkTypes.ruleSetResultsType", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#ruleSetResultsType:org.apache.spark.sql.types.MapType", "kind" : "val"}, {"label" : "ruleSetType", "tail" : ": StructType", "member" : "com.sparkutils.quality.impl.RuleSparkTypes.ruleSetType", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#ruleSetType:org.apache.spark.sql.types.StructType", "kind" : "val"}, {"label" : "overallResultType", "tail" : ": StructField", "member" : "com.sparkutils.quality.impl.RuleSparkTypes.overallResultType", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#overallResultType:org.apache.spark.sql.types.StructField", "kind" : "val"}, {"label" : "packedIdType", "tail" : ": LongType.type", "member" : "com.sparkutils.quality.impl.RuleSparkTypes.packedIdType", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#packedIdType:org.apache.spark.sql.types.LongType.type", "kind" : "val"}, {"label" : "ruleResultType", "tail" : ": IntegerType.type", "member" : "com.sparkutils.quality.impl.RuleSparkTypes.ruleResultType", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#ruleResultType:org.apache.spark.sql.types.IntegerType.type", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/RuleSparkTypes.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.RuleSuiteResultDetails", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html", "members_object" : [{"label" : "getDetails", "tail" : "(input: Any): InternalRow", "member" : "com.sparkutils.quality.impl.RuleSuiteResultDetails.getDetails", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#getDetails(input:Any):org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.RuleSuiteResultDetails.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.RuleSuiteResultDetails.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.RuleSuiteResultDetails.dataType", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "com.sparkutils.quality.impl.RuleSuiteResultDetails.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.RuleSuiteResultDetails.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.RuleSuiteResultDetails#<init>", "error" : "unsupported entity"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.RuleSuiteResultDetails.child", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.NonSQLExpression.sql", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#sql:String", "kind" : "final def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/RuleSuiteResultDetails.html", "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.RuleSyntaxError", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.RuleSyntaxError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.sparkutils.quality.impl.RuleSyntaxError.error", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#error:String", "kind" : "val"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.RuleSyntaxError.id", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxError.syntax", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#errorText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/RuleSyntaxError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.RuleWarning", "members_trait" : [{"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.outputText", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#outputText:String", "kind" : "def"}, {"label" : "warningText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.warningText", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#warningText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleWarning.syntax", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "warning", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.warning", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#warning:String", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): Id", "member" : "com.sparkutils.quality.impl.HasId.id", "link" : "com\/sparkutils\/quality\/impl\/RuleWarning.html#id:com.sparkutils.quality.Id", "kind" : "abstract def"}], "shortDescription" : "Base for RuleWarnings", "trait" : "com\/sparkutils\/quality\/impl\/RuleWarning.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.ShowParams", "shortDescription" : "Paramters to pass into showString for debugging \/ validation", "members_case class" : [{"member" : "com.sparkutils.quality.impl.ShowParams#<init>", "error" : "unsupported entity"}, {"label" : "vertical", "tail" : ": Boolean", "member" : "com.sparkutils.quality.impl.ShowParams.vertical", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#vertical:Boolean", "kind" : "val"}, {"label" : "truncate", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.ShowParams.truncate", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#truncate:Int", "kind" : "val"}, {"label" : "numRows", "tail" : ": Int", "member" : "com.sparkutils.quality.impl.ShowParams.numRows", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#numRows:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/ShowParams.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/ShowParams.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.SoftFailedUtils", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html", "members_object" : [{"label" : "softFail", "tail" : "(res: Any): Integer", "member" : "com.sparkutils.quality.impl.SoftFailedUtils.softFail", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#softFail(res:Any):Integer", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SoftFailedUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.SoftFailExpr", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.SoftFailExpr.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.SoftFailExpr.dataType", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SoftFailExpr.nullable", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#nullable:Boolean", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.SoftFailExpr.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(res: Any): Any", "member" : "com.sparkutils.quality.impl.SoftFailExpr.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#nullSafeEval(res:Any):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.SoftFailExpr#<init>", "error" : "unsupported entity"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.SoftFailExpr.child", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/SoftFailExpr.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.SparkFunctionNameError", "shortDescription" : "", "members_case class" : [{"member" : "com.sparkutils.quality.impl.SparkFunctionNameError#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.SparkFunctionNameError.id", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#id:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.sparkutils.quality.impl.SparkFunctionNameError.name", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#name:String", "kind" : "val"}, {"label" : "error", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.NameMissingError.error", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#error:String", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#errorText:String", "kind" : "def"}, {"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.RuleError.syntax", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#syntax:Boolean", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/SparkFunctionNameError.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.StatefulLike", "members_trait" : [{"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Stateful.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.eval", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "final def"}, {"label" : "initialize", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initialize", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#initialize(partitionIndex:Int):Unit", "kind" : "final def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.foldable", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#foldable:Boolean", "kind" : "final def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.deterministic", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#deterministic:Boolean", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#prettyName:String", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "freshCopy", "tail" : "(): Stateful", "member" : "org.apache.spark.sql.catalyst.expressions.Stateful.freshCopy", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#freshCopy():org.apache.spark.sql.catalyst.expressions.Stateful", "kind" : "abstract def"}, {"label" : "evalInternal", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.evalInternal", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#evalInternal(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "abstract def"}, {"label" : "initializeInternal", "tail" : "(partitionIndex: Int): Unit", "member" : "org.apache.spark.sql.catalyst.expressions.Nondeterministic.initializeInternal", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#initializeInternal(partitionIndex:Int):Unit", "kind" : "abstract def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.dataType", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "abstract def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.nullable", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#nullable:Boolean", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "com\/sparkutils\/quality\/impl\/StatefulLike.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/StatefulLike.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.SyntaxError", "members_trait" : [{"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxError.syntax", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.outputText", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#outputText:String", "kind" : "def"}, {"label" : "errorText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.errorText", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#errorText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "error", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleError.error", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#error:String", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): Id", "member" : "com.sparkutils.quality.impl.HasId.id", "link" : "com\/sparkutils\/quality\/impl\/SyntaxError.html#id:com.sparkutils.quality.Id", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/SyntaxError.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.SyntaxNameWarning", "members_trait" : [{"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxWarning.syntax", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.outputText", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#outputText:String", "kind" : "def"}, {"label" : "warningText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.warningText", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#warningText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "name", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.SyntaxNameWarning.name", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#name:String", "kind" : "abstract def"}, {"label" : "warning", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.warning", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#warning:String", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): Id", "member" : "com.sparkutils.quality.impl.HasId.id", "link" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html#id:com.sparkutils.quality.Id", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/SyntaxNameWarning.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.SyntaxWarning", "members_trait" : [{"label" : "syntax", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.SyntaxWarning.syntax", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#syntax:Boolean", "kind" : "final def"}, {"label" : "outputText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.outputText", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#outputText:String", "kind" : "def"}, {"label" : "warningText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.warningText", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#warningText:String", "kind" : "def"}, {"label" : "nonIdText", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.nonIdText", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#nonIdText:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "warning", "tail" : "(): String", "member" : "com.sparkutils.quality.impl.RuleWarning.warning", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#warning:String", "kind" : "abstract def"}, {"label" : "id", "tail" : "(): Id", "member" : "com.sparkutils.quality.impl.HasId.id", "link" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html#id:com.sparkutils.quality.Id", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/sparkutils\/quality\/impl\/SyntaxWarning.html", "kind" : "trait"}, {"name" : "com.sparkutils.quality.impl.UnPack", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/UnPack$.html", "members_object" : [{"label" : "toRow", "tail" : "(id: Id): InternalRow", "member" : "com.sparkutils.quality.impl.UnPack.toRow", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#toRow(id:com.sparkutils.quality.Id):org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "apply", "tail" : "(packed: Expression): UnPackExpression", "member" : "com.sparkutils.quality.impl.UnPack.apply", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#apply(packed:org.apache.spark.sql.catalyst.expressions.Expression):com.sparkutils.quality.impl.UnPackExpression", "kind" : "def"}, {"label" : "apply", "tail" : "(packed: Column): Column", "member" : "com.sparkutils.quality.impl.UnPack.apply", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#apply(packed:org.apache.spark.sql.Column):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UnPack$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.UnPackExpression", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.UnPackExpression.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.UnPackExpression.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.UnPackExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.UnPackExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.UnPackExpression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(packed: Any): Any", "member" : "com.sparkutils.quality.impl.UnPackExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#nullSafeEval(packed:Any):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.UnPackExpression#<init>", "error" : "unsupported entity"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.UnPackExpression.child", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/UnPackExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.UnPackIdTriple", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html", "members_object" : [{"label" : "toRow", "tail" : "(packed: Any): InternalRow", "member" : "com.sparkutils.quality.impl.UnPackIdTriple.toRow", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#toRow(packed:Any):org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "apply", "tail" : "(packed: Expression): UnPackIdTripleExpression", "member" : "com.sparkutils.quality.impl.UnPackIdTriple.apply", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#apply(packed:org.apache.spark.sql.catalyst.expressions.Expression):com.sparkutils.quality.impl.UnPackIdTripleExpression", "kind" : "def"}, {"label" : "apply", "tail" : "(packed: Column): Column", "member" : "com.sparkutils.quality.impl.UnPackIdTriple.apply", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#apply(packed:org.apache.spark.sql.Column):org.apache.spark.sql.Column", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTriple$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.UnPackIdTripleExpression", "shortDescription" : "", "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.UnPackIdTripleExpression.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.UnPackIdTripleExpression.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.UnPackIdTripleExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "com.sparkutils.quality.impl.UnPackIdTripleExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.UnPackIdTripleExpression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(packed: Any): Any", "member" : "com.sparkutils.quality.impl.UnPackIdTripleExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#nullSafeEval(packed:Any):Any", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.UnPackIdTripleExpression#<init>", "error" : "unsupported entity"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.UnPackIdTripleExpression.child", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/UnPackIdTripleExpression.html", "kind" : "case class"}, {"name" : "com.sparkutils.quality.impl.UUIDToLongsExpression", "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html", "members_object" : [{"label" : "toLongs", "tail" : "(input: Any): InternalRow", "member" : "com.sparkutils.quality.impl.UUIDToLongsExpression.toLongs", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#toLongs(input:Any):org.apache.spark.sql.catalyst.InternalRow", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "withNewChildInternal", "tail" : "(newChild: Expression): Expression", "member" : "com.sparkutils.quality.impl.UUIDToLongsExpression.withNewChildInternal", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#withNewChildInternal(newChild:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "com.sparkutils.quality.impl.UUIDToLongsExpression.inputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "com.sparkutils.quality.impl.UUIDToLongsExpression.doGenCode", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "nullSafeEval", "tail" : "(input: Any): Any", "member" : "com.sparkutils.quality.impl.UUIDToLongsExpression.nullSafeEval", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#nullSafeEval(input:Any):Any", "kind" : "def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "com.sparkutils.quality.impl.UUIDToLongsExpression.dataType", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "def"}, {"member" : "com.sparkutils.quality.impl.UUIDToLongsExpression#<init>", "error" : "unsupported entity"}, {"label" : "child", "tail" : ": Expression", "member" : "com.sparkutils.quality.impl.UUIDToLongsExpression.child", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#child:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "val"}, {"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "nullSafeCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullSafeCodeGen", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#nullSafeCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "defineCodeGen", "tail" : "(ctx: CodegenContext, ev: ExprCode, f: (String) ⇒ String): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.defineCodeGen", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#defineCodeGen(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode,f:String=>String):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.eval", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.nullable", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#nullable:Boolean", "kind" : "def"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.UnaryExpression.foldable", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#foldable:Boolean", "kind" : "def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.withNewChildrenInternal", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#withNewChildrenInternal(newChildren:IndexedSeq[T]):T", "kind" : "final def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.mapChildren", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#mapChildren(f:T=>T):T", "kind" : "final def"}, {"label" : "children", "tail" : ": Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.UnaryLike.children", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#children:Seq[T]", "kind" : "final lazy val"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/sparkutils\/quality\/impl\/UUIDToLongsExpression.html", "kind" : "object"}, {"name" : "com.sparkutils.quality.impl.Validation", "members_trait" : [{"label" : "validateRule", "tail" : "(lambdaLookups: Map[String, Map[Id, Set[String]]], names: Set[String])(id: Id, exprThunk: ⇒ Expression, outputRule: Boolean): (Set[RuleError], ExpressionLookup)", "member" : "com.sparkutils.quality.impl.Validation.validateRule", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#validateRule(lambdaLookups:Map[String,Map[com.sparkutils.quality.Id,Set[String]]],names:Set[String])(id:com.sparkutils.quality.Id,exprThunk:=>org.apache.spark.sql.catalyst.expressions.Expression,outputRule:Boolean):(Set[com.sparkutils.quality.impl.RuleError],com.sparkutils.quality.ExpressionLookup)", "kind" : "def"}, {"label" : "validateLambdas", "tail" : "(ruleSuite: RuleSuite, recursiveLambdasSOEIsOk: Boolean, names: Set[String]): Either[(Set[RuleError], Set[RuleWarning], String, RuleSuiteDocs, Map[IdTrEither, ExpressionLookup]), (Seq[(String, Either[(Id, Expression), LambdaSyntaxError])], Map[String, Map[Id, Set[String]]], Set[Id], Set[LambdaSparkFunctionNameError], Set[LambdaMultipleImplementationWithSameArityError], Set[LambdaNameError], Map[Id, WithDocs[LambdaFunction]], Set[RuleWarning], Map[IdTrEither, ExpressionLookup])]", "member" : "com.sparkutils.quality.impl.Validation.validateLambdas", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#validateLambdas(ruleSuite:com.sparkutils.quality.RuleSuite,recursiveLambdasSOEIsOk:Boolean,names:Set[String]):Either[(Set[com.sparkutils.quality.impl.RuleError],Set[com.sparkutils.quality.impl.RuleWarning],String,com.sparkutils.quality.utils.RuleSuiteDocs,Map[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,com.sparkutils.quality.ExpressionLookup]),(Seq[(String,Either[(com.sparkutils.quality.Id,org.apache.spark.sql.catalyst.expressions.Expression),com.sparkutils.quality.impl.LambdaSyntaxError])],Map[String,Map[com.sparkutils.quality.Id,Set[String]]],Set[com.sparkutils.quality.Id],Set[com.sparkutils.quality.impl.LambdaSparkFunctionNameError],Set[com.sparkutils.quality.impl.LambdaMultipleImplementationWithSameArityError],Set[com.sparkutils.quality.impl.LambdaNameError],Map[com.sparkutils.quality.Id,com.sparkutils.quality.utils.WithDocs[com.sparkutils.quality.LambdaFunction]],Set[com.sparkutils.quality.impl.RuleWarning],Map[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,com.sparkutils.quality.ExpressionLookup])]", "kind" : "def"}, {"label" : "validateRules", "tail" : "(ruleSuite: RuleSuite, lambdaLookups: Map[String, Map[Id, Set[String]]], names: Set[String]): (Set[RuleError], Set[RuleWarning], Map[Id, WithDocs[Rule]], Map[Id, WithDocs[RunOnPassProcessor]], Map[IdTrEither, ExpressionLookup])", "member" : "com.sparkutils.quality.impl.Validation.validateRules", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#validateRules(ruleSuite:com.sparkutils.quality.RuleSuite,lambdaLookups:Map[String,Map[com.sparkutils.quality.Id,Set[String]]],names:Set[String]):(scala.collection.immutable.Set[com.sparkutils.quality.impl.RuleError],scala.collection.immutable.Set[com.sparkutils.quality.impl.RuleWarning],scala.collection.immutable.Map[com.sparkutils.quality.Id,com.sparkutils.quality.utils.WithDocs[com.sparkutils.quality.Rule]],scala.collection.immutable.Map[com.sparkutils.quality.Id,com.sparkutils.quality.utils.WithDocs[com.sparkutils.quality.RunOnPassProcessor]],scala.collection.immutable.Map[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,com.sparkutils.quality.ExpressionLookup])", "kind" : "def"}, {"label" : "validateAgainstDataFrame", "tail" : "(schemaOrFrame: Either[StructType, DataFrame], showParams: ShowParams, runnerFunction: Option[(DataFrame) ⇒ Column], qualityName: String, transformBeforeShow: (DataFrame) ⇒ DataFrame, schema: StructType): (String, Set[RuleError])", "member" : "com.sparkutils.quality.impl.Validation.validateAgainstDataFrame", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#validateAgainstDataFrame(schemaOrFrame:Either[org.apache.spark.sql.types.StructType,org.apache.spark.sql.DataFrame],showParams:com.sparkutils.quality.impl.ShowParams,runnerFunction:Option[org.apache.spark.sql.DataFrame=>org.apache.spark.sql.Column],qualityName:String,transformBeforeShow:org.apache.spark.sql.DataFrame=>org.apache.spark.sql.DataFrame,schema:org.apache.spark.sql.types.StructType):(String,scala.collection.immutable.Set[com.sparkutils.quality.impl.RuleError])", "kind" : "def"}, {"label" : "validate", "tail" : "(schemaOrFrame: Either[StructType, DataFrame], ruleSuite: RuleSuite, showParams: ShowParams, runnerFunction: Option[(DataFrame) ⇒ Column], qualityName: String, recursiveLambdasSOEIsOk: Boolean, transformBeforeShow: (DataFrame) ⇒ DataFrame): (Set[RuleError], Set[RuleWarning], String, RuleSuiteDocs, Map[IdTrEither, ExpressionLookup])", "member" : "com.sparkutils.quality.impl.Validation.validate", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#validate(schemaOrFrame:Either[org.apache.spark.sql.types.StructType,org.apache.spark.sql.DataFrame],ruleSuite:com.sparkutils.quality.RuleSuite,showParams:com.sparkutils.quality.impl.ShowParams,runnerFunction:Option[org.apache.spark.sql.DataFrame=>org.apache.spark.sql.Column],qualityName:String,recursiveLambdasSOEIsOk:Boolean,transformBeforeShow:org.apache.spark.sql.DataFrame=>org.apache.spark.sql.DataFrame):(Set[com.sparkutils.quality.impl.RuleError],Set[com.sparkutils.quality.impl.RuleWarning],String,com.sparkutils.quality.utils.RuleSuiteDocs,Map[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,com.sparkutils.quality.ExpressionLookup])", "kind" : "def"}, {"label" : "emptyDocs", "tail" : ": Docs", "member" : "com.sparkutils.quality.impl.Validation.emptyDocs", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#emptyDocs:com.sparkutils.quality.utils.Docs", "kind" : "val"}, {"label" : "validate", "tail" : "(frame: DataFrame, ruleSuite: RuleSuite, runnerFunction: (DataFrame) ⇒ Column, transformBeforeShow: (DataFrame) ⇒ DataFrame): (Set[RuleError], Set[RuleWarning], String, RuleSuiteDocs, Map[IdTrEither, ExpressionLookup])", "member" : "com.sparkutils.quality.impl.Validation.validate", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#validate(frame:org.apache.spark.sql.DataFrame,ruleSuite:com.sparkutils.quality.RuleSuite,runnerFunction:org.apache.spark.sql.DataFrame=>org.apache.spark.sql.Column,transformBeforeShow:org.apache.spark.sql.DataFrame=>org.apache.spark.sql.DataFrame):(Set[com.sparkutils.quality.impl.RuleError],Set[com.sparkutils.quality.impl.RuleWarning],String,com.sparkutils.quality.utils.RuleSuiteDocs,Map[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,com.sparkutils.quality.ExpressionLookup])", "kind" : "def"}, {"label" : "validate", "tail" : "(frame: DataFrame, ruleSuite: RuleSuite, runnerFunction: (DataFrame) ⇒ Column): (Set[RuleError], Set[RuleWarning], String, RuleSuiteDocs, Map[IdTrEither, ExpressionLookup])", "member" : "com.sparkutils.quality.impl.Validation.validate", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#validate(frame:org.apache.spark.sql.DataFrame,ruleSuite:com.sparkutils.quality.RuleSuite,runnerFunction:org.apache.spark.sql.DataFrame=>org.apache.spark.sql.Column):(Set[com.sparkutils.quality.impl.RuleError],Set[com.sparkutils.quality.impl.RuleWarning],String,com.sparkutils.quality.utils.RuleSuiteDocs,Map[com.sparkutils.quality.utils.RuleSuiteDocs.IdTrEither,com.sparkutils.quality.ExpressionLookup])", "kind" : "def"}, {"label" : "validate", "tail" : "(frame: DataFrame, ruleSuite: RuleSuite): (Set[RuleError], Set[RuleWarning])", "member" : "com.sparkutils.quality.impl.Validation.validate", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#validate(frame:org.apache.spark.sql.DataFrame,ruleSuite:com.sparkutils.quality.RuleSuite):(Set[com.sparkutils.quality.impl.RuleError],Set[com.sparkutils.quality.impl.RuleWarning])", "kind" : "def"}, {"label" : "validate", "tail" : "(schema: StructType, ruleSuite: RuleSuite): (Set[RuleError], Set[RuleWarning])", "member" : "com.sparkutils.quality.impl.Validation.validate", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#validate(schema:org.apache.spark.sql.types.StructType,ruleSuite:com.sparkutils.quality.RuleSuite):(Set[com.sparkutils.quality.impl.RuleError],Set[com.sparkutils.quality.impl.RuleWarning])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/Validation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/Validation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/sparkutils\/quality\/impl\/Validation$.html", "members_object" : [{"label" : "dataFrameSyntaxErrorId", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.Validation.dataFrameSyntaxErrorId", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#dataFrameSyntaxErrorId:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "unknownSOEId", "tail" : ": Id", "member" : "com.sparkutils.quality.impl.Validation.unknownSOEId", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#unknownSOEId:com.sparkutils.quality.Id", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/sparkutils\/quality\/impl\/Validation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/sparkutils\/quality\/impl\/Validation.html", "kind" : "object"}], "org.apache.spark.sql" : [{"name" : "org.apache.spark.sql.InputTypeChecks", "members_trait" : [{"label" : "inputTypes", "tail" : "(): Seq[AbstractDataType]", "member" : "org.apache.spark.sql.InputTypeChecks.inputTypes", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#inputTypes:Seq[org.apache.spark.sql.types.AbstractDataType]", "kind" : "def"}, {"label" : "checkInputDataTypes", "tail" : "(): TypeCheckResult", "member" : "org.apache.spark.sql.catalyst.expressions.ExpectsInputTypes.checkInputDataTypes", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#checkInputDataTypes():org.apache.spark.sql.catalyst.analysis.TypeCheckResult", "kind" : "def"}, {"label" : "simpleStringWithNodeId", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleStringWithNodeId", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#simpleStringWithNodeId():String", "kind" : "def"}, {"label" : "sql", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.sql", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#sql:String", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.toString", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#toString():String", "kind" : "def"}, {"label" : "simpleString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.simpleString", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#simpleString(maxFields:Int):String", "kind" : "def"}, {"label" : "verboseString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.verboseString", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#verboseString(maxFields:Int):String", "kind" : "final def"}, {"label" : "flatArguments", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.flatArguments", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#flatArguments:Iterator[Any]", "kind" : "def"}, {"label" : "prettyName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.prettyName", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#prettyName:String", "kind" : "def"}, {"label" : "semanticHash", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticHash", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#semanticHash():Int", "kind" : "def"}, {"label" : "semanticEquals", "tail" : "(other: Expression): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.semanticEquals", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#semanticEquals(other:org.apache.spark.sql.catalyst.expressions.Expression):Boolean", "kind" : "final def"}, {"label" : "canonicalized", "tail" : ": Expression", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.canonicalized", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#canonicalized:org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "lazy val"}, {"label" : "childrenResolved", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.childrenResolved", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#childrenResolved:Boolean", "kind" : "def"}, {"label" : "resolved", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.resolved", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#resolved:Boolean", "kind" : "lazy val"}, {"label" : "genCode", "tail" : "(ctx: CodegenContext): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.genCode", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#genCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "def"}, {"label" : "references", "tail" : "(): AttributeSet", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.references", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#references:org.apache.spark.sql.catalyst.expressions.AttributeSet", "kind" : "def"}, {"label" : "deterministic", "tail" : ": Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.deterministic", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#deterministic:Boolean", "kind" : "lazy val"}, {"label" : "foldable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.foldable", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#foldable:Boolean", "kind" : "def"}, {"label" : "jsonFields", "tail" : "(): List[JField]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.jsonFields", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#jsonFields:List[org.json4s.JsonAST.JField]", "kind" : "def"}, {"label" : "prettyJson", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.prettyJson", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#prettyJson:String", "kind" : "def"}, {"label" : "toJSON", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.toJSON", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#toJSON:String", "kind" : "def"}, {"label" : "asCode", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.asCode", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#asCode:String", "kind" : "def"}, {"label" : "generateTreeString", "tail" : "(depth: Int, lastChildren: Seq[Boolean], append: (String) ⇒ Unit, verbose: Boolean, prefix: String, addSuffix: Boolean, maxFields: Int, printNodeId: Boolean, indent: Int): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.generateTreeString", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#generateTreeString(depth:Int,lastChildren:Seq[Boolean],append:String=>Unit,verbose:Boolean,prefix:String,addSuffix:Boolean,maxFields:Int,printNodeId:Boolean,indent:Int):Unit", "kind" : "def"}, {"label" : "innerChildren", "tail" : "(): Seq[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.innerChildren", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#innerChildren:Seq[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "def"}, {"label" : "p", "tail" : "(number: Int): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.p", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#p(number:Int):BaseType", "kind" : "def"}, {"label" : "apply", "tail" : "(number: Int): TreeNode[_]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.apply", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#apply(number:Int):org.apache.spark.sql.catalyst.trees.TreeNode[_]", "kind" : "def"}, {"label" : "numberedTreeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.numberedTreeString", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#numberedTreeString:String", "kind" : "def"}, {"label" : "treeString", "tail" : "(append: (String) ⇒ Unit, verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#treeString(append:String=>Unit,verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):Unit", "kind" : "def"}, {"label" : "treeString", "tail" : "(verbose: Boolean, addSuffix: Boolean, maxFields: Int, printOperatorId: Boolean): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#treeString(verbose:Boolean,addSuffix:Boolean,maxFields:Int,printOperatorId:Boolean):String", "kind" : "final def"}, {"label" : "treeString", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treeString", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#treeString:String", "kind" : "final def"}, {"label" : "verboseStringWithSuffix", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.verboseStringWithSuffix", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#verboseStringWithSuffix(maxFields:Int):String", "kind" : "def"}, {"label" : "argString", "tail" : "(maxFields: Int): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.argString", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#argString(maxFields:Int):String", "kind" : "def"}, {"label" : "stringArgs", "tail" : "(): Iterator[Any]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.stringArgs", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#stringArgs:Iterator[Any]", "kind" : "def"}, {"label" : "nodeName", "tail" : "(): String", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodeName", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#nodeName:String", "kind" : "def"}, {"label" : "clone", "tail" : "(): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.clone", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#clone():BaseType", "kind" : "def"}, {"label" : "makeCopy", "tail" : "(newArgs: Array[AnyRef]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.makeCopy", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#makeCopy(newArgs:Array[AnyRef]):BaseType", "kind" : "def"}, {"label" : "otherCopyArgs", "tail" : "(): Seq[AnyRef]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.otherCopyArgs", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#otherCopyArgs:Seq[AnyRef]", "kind" : "def"}, {"label" : "mapChildren", "tail" : "(f: (Expression) ⇒ Expression): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#mapChildren(f:BaseType=>BaseType):BaseType", "kind" : "def"}, {"label" : "transformUpWithBeforeAndAfterRuleOnChildren", "tail" : "(cond: (Expression) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[(Expression, Expression), Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithBeforeAndAfterRuleOnChildren", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#transformUpWithBeforeAndAfterRuleOnChildren(cond:BaseType=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[(BaseType,BaseType),BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUpWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUpWithPruning", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#transformUpWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformUp", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformUp", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#transformUp(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDownWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#transformDownWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformDown", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformDown", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#transformDown(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transformWithPruning", "tail" : "(cond: (TreePatternBits) ⇒ Boolean, ruleId: RuleId)(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transformWithPruning", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#transformWithPruning(cond:org.apache.spark.sql.catalyst.trees.TreePatternBits=>Boolean,ruleId:org.apache.spark.sql.catalyst.rules.RuleId)(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "transform", "tail" : "(rule: PartialFunction[Expression, Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.transform", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#transform(rule:PartialFunction[BaseType,BaseType]):BaseType", "kind" : "def"}, {"label" : "legacyWithNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.legacyWithNewChildren", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#legacyWithNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "withNewChildren", "tail" : "(newChildren: Seq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildren", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#withNewChildren(newChildren:Seq[BaseType]):BaseType", "kind" : "final def"}, {"label" : "mapProductIterator", "tail" : "(f: (Any) ⇒ B)(arg0: ClassTag[B]): Array[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#mapProductIterator[B](f:Any=>B)(implicitevidence$1:scala.reflect.ClassTag[B]):Array[B]", "kind" : "def"}, {"label" : "collectFirst", "tail" : "(pf: PartialFunction[Expression, B]): Option[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectFirst", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#collectFirst[B](pf:PartialFunction[BaseType,B]):Option[B]", "kind" : "def"}, {"label" : "collectLeaves", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collectLeaves", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#collectLeaves():Seq[BaseType]", "kind" : "def"}, {"label" : "collect", "tail" : "(pf: PartialFunction[Expression, B]): Seq[B]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.collect", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#collect[B](pf:PartialFunction[BaseType,B]):Seq[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (Expression) ⇒ TraversableOnce[A]): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.flatMap", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#flatMap[A](f:BaseType=>TraversableOnce[A]):Seq[A]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (Expression) ⇒ A): Seq[A]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.map", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#map[A](f:BaseType=>A):Seq[A]", "kind" : "def"}, {"label" : "foreachUp", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#foreachUp(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (Expression) ⇒ Unit): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.foreach", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#foreach(f:BaseType=>Unit):Unit", "kind" : "def"}, {"label" : "find", "tail" : "(f: (Expression) ⇒ Boolean): Option[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.find", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#find(f:BaseType=>Boolean):Option[BaseType]", "kind" : "def"}, {"label" : "fastEquals", "tail" : "(other: TreeNode[_]): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.fastEquals", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#fastEquals(other:org.apache.spark.sql.catalyst.trees.TreeNode[_]):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.hashCode", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#hashCode():Int", "kind" : "def"}, {"label" : "containsChild", "tail" : ": Set[TreeNode[_]]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.containsChild", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#containsChild:Set[org.apache.spark.sql.catalyst.trees.TreeNode[_]]", "kind" : "lazy val"}, {"label" : "unsetTagValue", "tail" : "(tag: TreeNodeTag[T]): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.unsetTagValue", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#unsetTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Unit", "kind" : "def"}, {"label" : "getTagValue", "tail" : "(tag: TreeNodeTag[T]): Option[T]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getTagValue", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#getTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T]):Option[T]", "kind" : "def"}, {"label" : "setTagValue", "tail" : "(tag: TreeNodeTag[T], value: T): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.setTagValue", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#setTagValue[T](tag:org.apache.spark.sql.catalyst.trees.TreeNodeTag[T],value:T):Unit", "kind" : "def"}, {"label" : "copyTagsFrom", "tail" : "(other: Expression): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.copyTagsFrom", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#copyTagsFrom(other:BaseType):Unit", "kind" : "def"}, {"label" : "isRuleIneffective", "tail" : "(ruleId: RuleId): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.isRuleIneffective", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#isRuleIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Boolean", "kind" : "def"}, {"label" : "markRuleAsIneffective", "tail" : "(ruleId: RuleId): Unit", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.markRuleAsIneffective", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#markRuleAsIneffective(ruleId:org.apache.spark.sql.catalyst.rules.RuleId):Unit", "kind" : "def"}, {"label" : "nodePatterns", "tail" : ": Seq[TreePattern]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.nodePatterns", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#nodePatterns:Seq[org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern]", "kind" : "val"}, {"label" : "treePatternBits", "tail" : ": BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.treePatternBits", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#treePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "lazy val"}, {"label" : "getDefaultTreePatternBits", "tail" : "(): BitSet", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.getDefaultTreePatternBits", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#getDefaultTreePatternBits:org.apache.spark.util.collection.BitSet", "kind" : "def"}, {"label" : "origin", "tail" : ": Origin", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.origin", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#origin:org.apache.spark.sql.catalyst.trees.Origin", "kind" : "val"}, {"label" : "containsAnyPattern", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAnyPattern", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#containsAnyPattern(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsAllPatterns", "tail" : "(patterns: TreePattern*): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsAllPatterns", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#containsAllPatterns(patterns:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern*):Boolean", "kind" : "final def"}, {"label" : "containsPattern", "tail" : "(t: TreePattern): Boolean", "member" : "org.apache.spark.sql.catalyst.trees.TreePatternBits.containsPattern", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#containsPattern(t:org.apache.spark.sql.catalyst.trees.TreePattern.TreePattern):Boolean", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#notify():Unit", "kind" : "final def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inputDataTypes", "tail" : "(): Seq[Seq[DataType]]", "member" : "org.apache.spark.sql.InputTypeChecks.inputDataTypes", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#inputDataTypes:Seq[Seq[org.apache.spark.sql.types.DataType]]", "kind" : "abstract def"}, {"label" : "dataType", "tail" : "(): DataType", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.dataType", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#dataType:org.apache.spark.sql.types.DataType", "kind" : "abstract def"}, {"label" : "doGenCode", "tail" : "(ctx: CodegenContext, ev: ExprCode): ExprCode", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.doGenCode", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#doGenCode(ctx:org.apache.spark.sql.catalyst.expressions.codegen.CodegenContext,ev:org.apache.spark.sql.catalyst.expressions.codegen.ExprCode):org.apache.spark.sql.catalyst.expressions.codegen.ExprCode", "kind" : "abstract def"}, {"label" : "eval", "tail" : "(input: InternalRow): Any", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.eval", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#eval(input:org.apache.spark.sql.catalyst.InternalRow):Any", "kind" : "abstract def"}, {"label" : "nullable", "tail" : "(): Boolean", "member" : "org.apache.spark.sql.catalyst.expressions.Expression.nullable", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#nullable:Boolean", "kind" : "abstract def"}, {"label" : "withNewChildrenInternal", "tail" : "(newChildren: IndexedSeq[Expression]): Expression", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.withNewChildrenInternal", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#withNewChildrenInternal(newChildren:IndexedSeq[BaseType]):BaseType", "kind" : "abstract def"}, {"label" : "children", "tail" : "(): Seq[Expression]", "member" : "org.apache.spark.sql.catalyst.trees.TreeNode.children", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#children:Seq[BaseType]", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "org\/apache\/spark\/sql\/InputTypeChecks.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "Provides a simpler wrapper around types", "trait" : "org\/apache\/spark\/sql\/InputTypeChecks.html", "kind" : "trait"}, {"name" : "org.apache.spark.sql.QualitySparkUtils", "shortDescription" : "Set of utilities to reach in to private functions", "object" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html", "members_object" : [{"label" : "toString", "tail" : "(dataFrame: DataFrame, showParams: ShowParams): String", "member" : "org.apache.spark.sql.QualitySparkUtils.toString", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#toString(dataFrame:org.apache.spark.sql.DataFrame,showParams:com.sparkutils.quality.impl.ShowParams):String", "kind" : "def"}, {"label" : "registerFunction", "tail" : "(funcReg: FunctionRegistry)(name: String, builder: (Seq[Expression]) ⇒ Expression): Unit", "member" : "org.apache.spark.sql.QualitySparkUtils.registerFunction", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#registerFunction(funcReg:org.apache.spark.sql.catalyst.analysis.FunctionRegistry)(name:String,builder:Seq[org.apache.spark.sql.catalyst.expressions.Expression]=>org.apache.spark.sql.catalyst.expressions.Expression):Unit", "kind" : "def"}, {"label" : "newParser", "tail" : "(): SparkSqlParser", "member" : "org.apache.spark.sql.QualitySparkUtils.newParser", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#newParser():org.apache.spark.sql.execution.SparkSqlParser", "kind" : "def"}, {"label" : "FakePlan", "tail" : "", "member" : "org.apache.spark.sql.QualitySparkUtils.FakePlan", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#FakePlanextendsLogicalPlanwithUnaryNodewithProductwithSerializable", "kind" : "case class"}, {"label" : "tryResolveReferences", "tail" : "(sparkSession: SparkSession)(expr: Expression, child: LogicalPlan): Expression", "member" : "org.apache.spark.sql.QualitySparkUtils.tryResolveReferences", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#tryResolveReferences(sparkSession:org.apache.spark.sql.SparkSession)(expr:org.apache.spark.sql.catalyst.expressions.Expression,child:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "resolution", "tail" : "(analyzer: Analyzer, sparkSession: SparkSession, plan: LogicalPlan): Batch", "member" : "org.apache.spark.sql.QualitySparkUtils.resolution", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#resolution(analyzer:org.apache.spark.sql.catalyst.analysis.Analyzer,sparkSession:org.apache.spark.sql.SparkSession,plan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan):org.apache.spark.sql.QualitySparkUtils.Batch", "kind" : "def"}, {"label" : "Batch", "tail" : "", "member" : "org.apache.spark.sql.QualitySparkUtils.Batch", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#BatchextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Strategy", "tail" : "", "member" : "org.apache.spark.sql.QualitySparkUtils.Strategy", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#StrategyextendsProductwithSerializable", "kind" : "case class"}, {"label" : "execute", "tail" : "(logicalPlan: LogicalPlan, batch: Batch): LogicalPlan", "member" : "org.apache.spark.sql.QualitySparkUtils.execute", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#execute(logicalPlan:org.apache.spark.sql.catalyst.plans.logical.LogicalPlan,batch:org.apache.spark.sql.QualitySparkUtils.Batch):org.apache.spark.sql.catalyst.plans.logical.LogicalPlan", "kind" : "def"}, {"label" : "resolveExpression", "tail" : "(dataFrame: DataFrame, expr: Expression): Expression", "member" : "org.apache.spark.sql.QualitySparkUtils.resolveExpression", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#resolveExpression(dataFrame:org.apache.spark.sql.DataFrame,expr:org.apache.spark.sql.catalyst.expressions.Expression):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "hashCalendarInterval", "tail" : "(c: CalendarInterval, hashlongs: InterpretedHashLongsFunction, digest: Digest): Digest", "member" : "org.apache.spark.sql.QualitySparkUtils.hashCalendarInterval", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#hashCalendarInterval(c:org.apache.spark.unsafe.types.CalendarInterval,hashlongs:org.apache.spark.sql.qualityFunctions.InterpretedHashLongsFunction,digest:org.apache.spark.sql.qualityFunctions.Digest):org.apache.spark.sql.qualityFunctions.Digest", "kind" : "def"}, {"label" : "arguments", "tail" : "(unresolvedFunction: UnresolvedFunction): Seq[Expression]", "member" : "org.apache.spark.sql.QualitySparkUtils.arguments", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#arguments(unresolvedFunction:org.apache.spark.sql.catalyst.analysis.UnresolvedFunction):Seq[org.apache.spark.sql.catalyst.expressions.Expression]", "kind" : "def"}, {"label" : "cast", "tail" : "(child: Expression, dataType: DataType): Expression", "member" : "org.apache.spark.sql.QualitySparkUtils.cast", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#cast(child:org.apache.spark.sql.catalyst.expressions.Expression,dataType:org.apache.spark.sql.types.DataType):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "add", "tail" : "(left: Expression, right: Expression, dataType: DataType): Expression", "member" : "org.apache.spark.sql.QualitySparkUtils.add", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#add(left:org.apache.spark.sql.catalyst.expressions.Expression,right:org.apache.spark.sql.catalyst.expressions.Expression,dataType:org.apache.spark.sql.types.DataType):org.apache.spark.sql.catalyst.expressions.Expression", "kind" : "def"}, {"label" : "resolveWithOverride", "tail" : "(orig: Option[DataFrame]): Option[DataFrame]", "member" : "org.apache.spark.sql.QualitySparkUtils.resolveWithOverride", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#resolveWithOverride(orig:Option[org.apache.spark.sql.DataFrame]):Option[org.apache.spark.sql.DataFrame]", "kind" : "def"}, {"label" : "isPrimitive", "tail" : "(dataType: DataType): Boolean", "member" : "org.apache.spark.sql.QualitySparkUtils.isPrimitive", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#isPrimitive(dataType:org.apache.spark.sql.types.DataType):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "org\/apache\/spark\/sql\/QualitySparkUtils$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "org" : [], "com" : []};