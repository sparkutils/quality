package com.sparkutils.quality.impl

import com.sparkutils.quality.QualityException
import com.sparkutils.quality.sparkless.impl.DecoderOpEncoderProjection
import com.sparkutils.quality.sparkless.impl.Processors.{NO_QUERY_PLANS, isCopyNeeded}
import org.apache.spark.sql.catalyst.InternalRow
import org.apache.spark.sql.{Encoder, ShimUtils}
import org.apache.spark.sql.catalyst.expressions.BindReferences.bindReferences
import org.apache.spark.sql.catalyst.expressions._
import org.apache.spark.sql.catalyst.expressions.aggregate.NoOp
import org.apache.spark.sql.catalyst.expressions.codegen._
import org.apache.spark.sql.types.StructType

//import scala.collection.immutable.{Map, Seq}

/**
 * CODE is based on MutableProjection and generates a transformation between two encoders over a middle operation.
 * The generated class itself can create new instances directly, unlike Spark projections that need to go through the
 * codegen source generation cycle, only the compilation is cached.
 *
 * If the expression tree contains stateful expressions with codegenfallback the code must be regenerated against a
 * fresh tree.
 */
object GenerateDecoderOpEncoderProjection extends CodeGenerator[Seq[Expression], DecoderOpEncoderProjection[_,_]] {

  // $COVERAGE-OFF$
  protected def canonicalize(in: Seq[Expression]): Seq[Expression] =
    in.map(ExpressionCanonicalizer.execute)

  protected def bind(in: Seq[Expression], inputSchema: Seq[Attribute]): Seq[Expression] =
    bindReferences(in, inputSchema)
  // $COVERAGE-ON$

  def generate[I: Encoder, O: Encoder](expressions: Seq[Expression],
                                       useSubexprElimination: Boolean, toSize: Int): DecoderOpEncoderProjection[I,O] = {
    create(canonicalize(expressions), useSubexprElimination, toSize)
  }

  // $COVERAGE-OFF$
  protected def create(expressions: Seq[Expression]): DecoderOpEncoderProjection[_,_] = ???
  // $COVERAGE-ON$

  // only for subexpresssion elimination, the tree is cleaned for statefuls on each new invocation, just not the first
  // one and freshCopyIfContainsStatefulExpression is also >3.4.1 only
  def generateExpressions(ctx: CodegenContext, expressions: Seq[Expression], subExprState: Map[ExpressionEquals,
    SubExprEliminationState]): Seq[ExprCode] =
    ctx.withSubExprEliminationExprs(subExprState)( expressions.map(e => e.genCode(ctx) ) )

  def projections(ctx: CodegenContext, expressions: Seq[Expression], mutableRow: String, useSubexprElimination: Boolean = false,
                  subExprState: Map[ExpressionEquals, SubExprEliminationState] = Map.empty) = {
    val validExpr = expressions.zipWithIndex.filter {
      case (NoOp, _) => false
      case _ => true
    }

    val exprVals =
      if (useSubexprElimination)
        generateExpressions(ctx, validExpr.map(_._1), subExprState)
      else
        // non wholestage approach
        ctx.generateExpressions(validExpr.map(_._1), useSubexprElimination)

    // 4-tuples: (code for projection, isNull variable name, value variable name, column index)
    val projectionCodes: Seq[(String, String)] = validExpr.zip(exprVals).map {
      case ((e, i), ev) =>
        val value = JavaCode.global(
          ctx.addMutableState(CodeGenerator.javaType(e.dataType), "value"),
          e.dataType)

        val (code, isNull) = if (e.nullable) {
          val isNull = ctx.addMutableState(CodeGenerator.JAVA_BOOLEAN, "isNull")
          (s"""
              |${ev.code}
              |$isNull = ${ev.isNull};
              |$value = ${ev.value};
            """.stripMargin, JavaCode.isNullGlobal(isNull))
        } else {
          (s"""
              |${ev.code}
              |$value = ${ev.value};
            """.stripMargin, FalseLiteral)
        }
        val update = CodeGenerator.updateColumn(
          mutableRow,
          e.dataType,
          i,
          ExprCode(isNull, value),
          e.nullable)
        (code, update)
    }
    projectionCodes
  }

  // $COVERAGE-OFF$
  // for use in debugging rows generated by create's generated code
  def debug(row: InternalRow): Unit = {
    println("here")
  }
  // $COVERAGE-ON$

  // directly taken from wholestage
  protected def evaluateVariables(variables: Seq[ExprCode]): String = {
    val evaluate = variables.filter(_.code.nonEmpty).map(_.code.toString).mkString("\n")
    variables.foreach(_.code = EmptyBlock)
    evaluate
  }

  private def create[I: Encoder, O: Encoder](
                      expressions: Seq[Expression],
                      useSubexprElimination: Boolean, toSize: Int): DecoderOpEncoderProjection[I,O] = {

    val iEnc = implicitly[Encoder[I]]
    val oEnc = implicitly[Encoder[O]]
    val exprFrom = ShimUtils.expressionEncoder(iEnc).resolveAndBind().serializer
    val exprTo = ShimUtils.expressionEncoder(implicitly[Encoder[O]]).resolveAndBind().deserializer

    if (expressions.exists(_.exists{
      case s: PlanExpression[_] => true
      case _ => false
      })) {
      throw new QualityException(NO_QUERY_PLANS)
    }

    val (resTypeIsStruct, resType) =
      if (toSize == 1)
        (expressions.last.dataType.isInstanceOf[StructType],
          expressions.last.dataType.asInstanceOf[StructType])
      else
        (false, null)

    val ctx = newCodeGenContext()

    // the code references to the other fields is already present inside of expressions, works for input_row based,
    // but not wholestage approach, this is performed by all the CodegenSupport execs via attribute lookups
    val exprsToUse = expressions.drop( expressions.length - toSize)

    ctx.INPUT_ROW = "enc"

    // Evaluate all the subexpressions.
    // only for input_row projections val evalSubexpr = ctx.subexprFunctionsCode
    val (subExprsCode, subExprInputs, subExprStates: Map[ExpressionEquals, SubExprEliminationState]) =
      if (useSubexprElimination) {
        val subExprs = ctx.subexpressionEliminationForWholeStageCodegen(exprFrom ++ exprsToUse ++ Seq(exprTo))
        (ctx.evaluateSubExprEliminationState(subExprs.states.values), subExprs.exprCodesNeedEvaluate, subExprs.states)
      } else
        ("", Seq.empty, Map.empty)

    val encProjectionCodes = projections(ctx, exprFrom, "encRow", useSubexprElimination = useSubexprElimination, subExprStates)

    val encProjections = ctx.splitExpressionsWithCurrentInputs(encProjectionCodes.map(_._1))
    val encUpdates = ctx.splitExpressionsWithCurrentInputs(encProjectionCodes.map(_._2))

    val exprVals =
      if (useSubexprElimination)
        generateExpressions(ctx, exprFrom, subExprStates)
      else
        ctx.generateExpressions(exprFrom, useSubexprElimination)

    // we need InputRow to start with, after that we can bind to name
    if (useSubexprElimination) {
      ctx.currentVars = exprVals ++ subExprStates.map(_._2.eval)
    }

    ctx.INPUT_ROW = "mutableRow"

    val projectionCodes = projections(ctx, exprsToUse, "mutableRow", useSubexprElimination = useSubexprElimination, subExprStates)

    val allProjections = ctx.splitExpressionsWithCurrentInputs(projectionCodes.map(_._1))
    val allUpdates = ctx.splitExpressionsWithCurrentInputs(projectionCodes.map(_._2))

    // replace the code with empty block so the usage is against null/value only
    val oexprVals =
      (if (useSubexprElimination)
        generateExpressions(ctx, exprsToUse, subExprStates)
      else
        ctx.generateExpressions(exprsToUse, useSubexprElimination)).map(_.copy(code = EmptyBlock))

    if (useSubexprElimination) {
      ctx.currentVars = oexprVals ++ subExprStates.map(_._2.eval)
    }

    ctx.INPUT_ROW = "dec"
    val decProjectionCodes = projections(ctx, Seq(exprTo), "decRow", useSubexprElimination = useSubexprElimination, subExprStates)

    val (a, b) = CodeGenerator.getLocalInputVariableValues(ctx, exprTo, subExprStates)
    val decProjections = ctx.splitExpressionsWithCurrentInputs(decProjectionCodes.map(_._1))
    val decUpdates = ctx.splitExpressionsWithCurrentInputs(decProjectionCodes.map(_._2))

    val codeBody = s"""
      public java.lang.Object generate(Object[] references) {
        return new SpecificMutableProjection(references);
      }

      class SpecificMutableProjection extends ${classOf[DecoderOpEncoderProjection[I,O]].getName}<Object, Object> {

        private Object[] references;
        private InternalRow inRow;
        private InternalRow mutableRow;
        private InternalRow encRow;
        private InternalRow decRow;
        private InternalRow interim;
        ${ctx.declareMutableStates()}

        public SpecificMutableProjection(Object[] references) {
          this.references = references;
          mutableRow = new $genericMutableRowType(${expressions.size});
          inRow = new $genericMutableRowType(1);
          encRow = new $genericMutableRowType(${exprFrom.length});
          decRow = new $genericMutableRowType(${toSize});
          ${
            if (toSize == 1 && resTypeIsStruct)
              ""
            else
              s"interim = new $genericMutableRowType(${toSize});"
          }
          ${ctx.initMutableStates()}
        }

        public ${classOf[DecoderOpEncoderProjection[I,O]].getName} newInstance() {
          return new SpecificMutableProjection(references);
        }

        public void initialize(int partitionIndex) {
          ${ctx.initPartition()}
        }

        //public ${implicitly[Encoder[O]].clsTag.runtimeClass.getName} apply(${implicitly[Encoder[I]].clsTag.runtimeClass.getName} _i) {
        public java.lang.Object apply(java.lang.Object _i) {
          inRow.update(0, _i);

          InternalRow enc = (InternalRow) inRow;
          // common sub-expressions
          // setup
          ${evaluateVariables(subExprInputs)}
          // the code
          $subExprsCode
          // encoding from object done by subexprs
          $encProjections
          $encUpdates

          InternalRow i = (InternalRow) encRow;
          // projections doing the actual work
          $allProjections
          // copy all the results into MutableRow
          $allUpdates

          // uncomment to debug the output, extraProjection can introduce extra fields..
          // com.sparkutils.quality.impl.GenerateDecoderOpEncoderProjection.debug(mutableRow);

          // prepare input row for decoding to end user type
          ${""
            if (toSize == 1 && resTypeIsStruct)
              s"interim = mutableRow.getStruct(0, ${resType.length});"
            else
              (for(i <- 0 until toSize) yield
                s"interim.update($i, ${CodeGenerator.getValue("mutableRow", expressions((expressions.length - toSize) + i).dataType, i.toString)});"
                ).mkString("\n")
          }

          InternalRow dec = (InternalRow) interim;
          // init dec
          //initDec
          // decoding projections
          $decProjections
          // decoding updates, should only be for index 0
          $decUpdates

          return (${implicitly[Encoder[O]].clsTag.runtimeClass.getName}) decRow.get(0, new org.apache.spark.sql.types.ObjectType(Object.class));
        }


        ${ctx.declareAddedFunctions()}
      }
    """

    val code = CodeFormatter.stripOverlappingComments(
      new CodeAndComment(codeBody, ctx.getPlaceHolderToComments()))
    logDebug(s"code for ${expressions.mkString(",")}:\n${CodeFormatter.format(code)}")

    val (clazz, _) = CodeGenerator.compile(code)
    val initial = clazz.generate(ctx.references.toArray).asInstanceOf[DecoderOpEncoderProjection[I,O]]
    if (isCopyNeeded(expressions))
      new DecoderOpEncoderProjection[I,O] {

        override def apply(input: I): O = initial(input)

        // needs a fresh tree copy for each newInstance, so we need to proxy it
        override def newInstance: DecoderOpEncoderProjection[I, O] =
          create[I, O] (
            expressions.map(e => e.transformUp { case t => t.withNewChildren(t.children) }),
            useSubexprElimination, toSize)

        override def initialize(partitionIndex: Int): Unit = initial.initialize(partitionIndex)
      }
    else
      // with no stateful CodegenFallback's the generated newInstance function is correct
      initial
  }
}
